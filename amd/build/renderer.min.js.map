{"version":3,"file":"renderer.min.js","sources":["../src/renderer.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Renderer module\n *\n * @module     mod_kanban/renderer\n * @copyright  2023 ISB Bayern\n * @author     Stefan Hanauska\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Ajax from 'core/ajax';\nimport Log from 'core/log';\nimport Pending from 'core/pending';\nimport Templates from 'core/templates';\nimport {exception as displayException} from 'core/notification';\nimport Board from 'mod_kanban/board';\nimport BoardInterface from 'mod_kanban/interface';\nimport SortableList from 'core/sortable_list';\n\nexport const selectors = {\n    KANBAN_CONTAINER_PREFIX: 'mod_kanban_render_container-'\n};\n\n/**\n *\n *\n * @param {number} cmid\n * @param {number} boardid\n */\nexport const init = (cmid, boardid) => {\n    const rendererPendingPromise = new Pending(selectors.KANBAN_CONTAINER_PREFIX + cmid);\n    var boardState = new Board(cmid, boardid);\n    getDataAndUpdate(boardState);\n    rendererPendingPromise.resolve();\n};\n\n/**\n * Update the board\n *\n * @param {object} boardState\n */\nexport const getDataAndUpdate = (boardState) => {\n    const promises = Ajax.call(\n        [\n            {\n                methodname: 'mod_kanban_get_kanban_content',\n                args: {\n                    'cmid': boardState.cmid,\n                    'boardid': boardState.boardid,\n                    'timestamp': boardState.timestamp,\n                }\n            }\n        ]\n    );\n\n    promises[0].then(data => {\n        boardState.updateBoard(data.board);\n        boardState.updateColumns(data.columns);\n        boardState.updateCards(data.cards);\n        boardState.updateUsers(data.users);\n        boardState.timestamp = data.timestamp;\n        render(boardState);\n        return true;\n    }).catch((error) => {\n        Log.error(error);\n        return false;\n    });\n};\n\n/**\n * Render a given board state.\n *\n * @param {*} boardState The current board state\n */\nfunction render(boardState) {\n    let context = boardState.exportForTemplate();\n    Templates.renderForPromise('mod_kanban/board', context)\n        .then(({html, js}) => {\n            let node = document.getElementById(selectors.KANBAN_CONTAINER_PREFIX + boardState.cmid);\n            Templates.replaceNodeContents(node, html, js);\n            Templates.runTemplateJS(js);\n            var boardInterface = new BoardInterface(boardState);\n            registerBoardInterface(boardInterface);\n            return true;\n        }).catch(ex => displayException(ex));\n}\n\n/**\n * Register a board interface handling the changes.\n * @param {*} boardInterface\n */\nfunction registerBoardInterface(boardInterface) {\n    let actions = document.querySelectorAll(\n        '#' + selectors.KANBAN_CONTAINER_PREFIX + boardInterface.boardState.cmid + ' *[data-action]'\n    );\n    actions.forEach((element) => {\n        element.addEventListener('click', (evt) => {\n            evt.preventDefault();\n            let data = Object.assign({}, evt.target.closest('[data-action]').dataset);\n            let action = data.action;\n            delete data.action;\n            boardInterface.sendChange(action, data);\n        });\n    });\n    let cols = document.querySelectorAll('ul.mod_kanban_board > li.mod_kanban_column');\n    cols.forEach((element) => {\n        element.addEventListener(SortableList.EVENTS.DROP, (evt) => {\n            evt.stopPropagation();\n        });\n    });\n    let cards = document.querySelectorAll('ul.mod_kanban_column_inner > li.mod_kanban_card');\n    cards.forEach((element) => {\n        element.addEventListener(SortableList.EVENTS.DROP, (evt) => {\n            evt.stopPropagation();\n        });\n    });\n}"],"names":["selectors","KANBAN_CONTAINER_PREFIX","cmid","boardid","rendererPendingPromise","Pending","boardState","Board","getDataAndUpdate","resolve","Ajax","call","methodname","args","timestamp","then","data","updateBoard","board","updateColumns","columns","updateCards","cards","updateUsers","users","context","exportForTemplate","renderForPromise","_ref","html","js","node","document","getElementById","replaceNodeContents","runTemplateJS","boardInterface","querySelectorAll","forEach","element","addEventListener","evt","preventDefault","Object","assign","target","closest","dataset","action","sendChange","SortableList","EVENTS","DROP","stopPropagation","registerBoardInterface","BoardInterface","catch","ex","render","error"],"mappings":";;;;;;;;6aAgCaA,UAAY,CACrBC,wBAAyB,2EAST,CAACC,KAAMC,iBACjBC,uBAAyB,IAAIC,iBAAQL,UAAUC,wBAA0BC,UAC3EI,WAAa,IAAIC,eAAML,KAAMC,SACjCK,iBAAiBF,YACjBF,uBAAuBK,iBAQdD,iBAAoBF,aACZI,cAAKC,KAClB,CACI,CACIC,WAAY,gCACZC,KAAM,MACMP,WAAWJ,aACRI,WAAWH,kBACTG,WAAWQ,cAM/B,GAAGC,MAAKC,OACbV,WAAWW,YAAYD,KAAKE,OAC5BZ,WAAWa,cAAcH,KAAKI,SAC9Bd,WAAWe,YAAYL,KAAKM,OAC5BhB,WAAWiB,YAAYP,KAAKQ,OAC5BlB,WAAWQ,UAAYE,KAAKF,mBAcpBR,gBACRmB,QAAUnB,WAAWoB,uCACfC,iBAAiB,mBAAoBF,SAC1CV,MAAKa,WAACC,KAACA,KAADC,GAAOA,SACNC,KAAOC,SAASC,eAAejC,UAAUC,wBAA0BK,WAAWJ,gCACxEgC,oBAAoBH,KAAMF,KAAMC,uBAChCK,cAAcL,aAWJM,gBACdJ,SAASK,iBACnB,IAAMrC,UAAUC,wBAA0BmC,eAAe9B,WAAWJ,KAAO,mBAEvEoC,SAASC,UACbA,QAAQC,iBAAiB,SAAUC,MAC/BA,IAAIC,qBACA1B,KAAO2B,OAAOC,OAAO,GAAIH,IAAII,OAAOC,QAAQ,iBAAiBC,SAC7DC,OAAShC,KAAKgC,cACXhC,KAAKgC,OACZZ,eAAea,WAAWD,OAAQhC,YAG/BgB,SAASK,iBAAiB,8CAChCC,SAASC,UACVA,QAAQC,iBAAiBU,uBAAaC,OAAOC,MAAOX,MAChDA,IAAIY,wBAGArB,SAASK,iBAAiB,mDAChCC,SAASC,UACXA,QAAQC,iBAAiBU,uBAAaC,OAAOC,MAAOX,MAChDA,IAAIY,wBA/BJC,CADqB,IAAIC,mBAAejD,cAEjC,KACRkD,OAAMC,KAAM,2BAAiBA,MAvBhCC,CAAOpD,aACA,KACRkD,OAAOG,qBACFA,MAAMA,QACH"}