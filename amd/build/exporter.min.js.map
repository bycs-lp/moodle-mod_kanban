{"version":3,"file":"exporter.min.js","sources":["../src/exporter.js"],"sourcesContent":["/**\n * Exporter for use in mustache template.\n */\nexport default class {\n    /**\n     * Exports the complete state (for initial rendering).\n     * @param {*} state\n     * @returns {object}\n     */\n    static exportStateForTemplate(state) {\n        let columnOrder = state.board.sequence.split(',');\n        let columns = [];\n        let hascolumns = state.board.sequence != '';\n        if (hascolumns) {\n            columns = columnOrder.map((value) => {\n                return this.exportCardsForColumn(state, value);\n            });\n        }\n        return Object.assign({\n            cmid: state.common.id,\n            id: state.board.id,\n            sequence: state.board.sequence,\n            hascolumns: hascolumns,\n            columns: columns,\n            locked: state.board.locked,\n            hastemplate: state.common.template != 0,\n            istemplate: state.board.template != 0\n        }, this.exportCapabilities(state));\n    }\n    /**\n     * Exports the card for one column.\n     * @param {*} state\n     * @param {*} columnid\n     * @returns {object}\n     */\n    static exportCardsForColumn(state, columnid) {\n        let col = JSON.parse(JSON.stringify(state.columns.get(columnid)));\n        let options = JSON.parse(col.options);\n        col.hascards = col.sequence != '';\n        col.autoclose = options.autoclose;\n        col.autohide = options.autohide;\n        if (col.hascards) {\n            let cardOrder = col.sequence.split(',');\n            col.cards = cardOrder.map((value) => {\n                return this.exportCard(state, value);\n            });\n        }\n        return col;\n    }\n    /**\n     * Exports a card.\n     * @param {*} state\n     * @param {*} cardid\n     * @returns {object}\n     */\n    static exportCard(state, cardid) {\n        let card = {\n            id: cardid,\n            title: '-',\n            assignees: [],\n            options: '{}',\n        };\n        if (state.cards.get(cardid) !== undefined) {\n            card = JSON.parse(JSON.stringify(state.cards.get(cardid)));\n        }\n        card.cardid = card.id;\n        card.hasassignees = card.assignees.length > 0;\n        let options = JSON.parse(card.options);\n        if (card.hasassignees && typeof card.assignees[0] == 'number') {\n            card.assignees = card.assignees.map((userid) => {\n                return state.users.get(userid);\n            });\n            card.assignees = [...new Set(card.assignees)];\n        }\n        return Object.assign(card, options);\n    }\n\n    /**\n     * Exports the capabilities.\n     * @param {*} state\n     * @returns {object}\n     */\n    static exportCapabilities(state) {\n        let capabilities = [];\n        state.capabilities.forEach((c) => {\n            capabilities[c.id] = c.value;\n        });\n        return Object.assign({}, capabilities);\n    }\n\n    /**\n     * Exports the discussion for a card.\n     * @param {*} state\n     * @param {number} cardId\n     * @returns {array}\n     */\n    static exportDiscussion(state, cardId) {\n        let d = [];\n        state.discussions.get(cardId).values.forEach((c) => {\n            if (c === null) {\n                return;\n            }\n            d.push(c);\n        });\n        d = d.sort((a, b) => parseInt(a.timecreated) > parseInt(b.timecreated));\n        return d;\n    }\n}"],"names":["state","columnOrder","board","sequence","split","columns","hascolumns","map","value","this","exportCardsForColumn","Object","assign","cmid","common","id","locked","hastemplate","template","istemplate","exportCapabilities","columnid","col","JSON","parse","stringify","get","options","hascards","autoclose","autohide","cardOrder","cards","exportCard","cardid","card","title","assignees","undefined","hasassignees","length","userid","users","Set","capabilities","forEach","c","cardId","d","discussions","values","push","sort","a","b","parseInt","timecreated"],"mappings":"yMASkCA,WACtBC,YAAcD,MAAME,MAAMC,SAASC,MAAM,KACzCC,QAAU,GACVC,WAAqC,IAAxBN,MAAME,MAAMC,gBACzBG,aACAD,QAAUJ,YAAYM,KAAKC,OAChBC,KAAKC,qBAAqBV,MAAOQ,UAGzCG,OAAOC,OAAO,CACjBC,KAAMb,MAAMc,OAAOC,GACnBA,GAAIf,MAAME,MAAMa,GAChBZ,SAAUH,MAAME,MAAMC,SACtBG,WAAYA,WACZD,QAASA,QACTW,OAAQhB,MAAME,MAAMc,OACpBC,YAAsC,GAAzBjB,MAAMc,OAAOI,SAC1BC,WAAoC,GAAxBnB,MAAME,MAAMgB,UACzBT,KAAKW,mBAAmBpB,oCAQHA,MAAOqB,cAC3BC,IAAMC,KAAKC,MAAMD,KAAKE,UAAUzB,MAAMK,QAAQqB,IAAIL,YAClDM,QAAUJ,KAAKC,MAAMF,IAAIK,YAC7BL,IAAIM,SAA2B,IAAhBN,IAAInB,SACnBmB,IAAIO,UAAYF,QAAQE,UACxBP,IAAIQ,SAAWH,QAAQG,SACnBR,IAAIM,SAAU,KACVG,UAAYT,IAAInB,SAASC,MAAM,KACnCkB,IAAIU,MAAQD,UAAUxB,KAAKC,OAChBC,KAAKwB,WAAWjC,MAAOQ,gBAG/Bc,sBAQOtB,MAAOkC,YACjBC,KAAO,CACPpB,GAAImB,OACJE,MAAO,IACPC,UAAW,GACXV,QAAS,WAEmBW,IAA5BtC,MAAMgC,MAAMN,IAAIQ,UAChBC,KAAOZ,KAAKC,MAAMD,KAAKE,UAAUzB,MAAMgC,MAAMN,IAAIQ,WAErDC,KAAKD,OAASC,KAAKpB,GACnBoB,KAAKI,aAAeJ,KAAKE,UAAUG,OAAS,MACxCb,QAAUJ,KAAKC,MAAMW,KAAKR,gBAC1BQ,KAAKI,cAA4C,iBAArBJ,KAAKE,UAAU,KAC3CF,KAAKE,UAAYF,KAAKE,UAAU9B,KAAKkC,QAC1BzC,MAAM0C,MAAMhB,IAAIe,UAE3BN,KAAKE,UAAY,IAAI,IAAIM,IAAIR,KAAKE,aAE/B1B,OAAOC,OAAOuB,KAAMR,mCAQL3B,WAClB4C,aAAe,UACnB5C,MAAM4C,aAAaC,SAASC,IACxBF,aAAaE,EAAE/B,IAAM+B,EAAEtC,SAEpBG,OAAOC,OAAO,GAAIgC,sCASL5C,MAAO+C,YACvBC,EAAI,UACRhD,MAAMiD,YAAYvB,IAAIqB,QAAQG,OAAOL,SAASC,IAChC,OAANA,GAGJE,EAAEG,KAAKL,MAEXE,EAAIA,EAAEI,MAAK,CAACC,EAAGC,IAAMC,SAASF,EAAEG,aAAeD,SAASD,EAAEE,eACnDR"}