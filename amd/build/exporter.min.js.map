{"version":3,"file":"exporter.min.js","sources":["../src/exporter.js"],"sourcesContent":["/**\n * Exporter for use in mustache template.\n */\nexport default class {\n    /**\n     * Exports the complete state (for initial rendering).\n     * @param {*} state\n     * @returns {object}\n     */\n    static exportStateForTemplate(state) {\n        let columnOrder = state.board.sequence.split(',');\n        let columns = [];\n        let hascolumns = state.board.sequence != '';\n        if (hascolumns) {\n            columns = columnOrder.map((value) => {\n                return this.exportCardsForColumn(state, value);\n            });\n        }\n\n        let showactionmenu = state.common.userboards == 1 || state.common.groupselector != '' ||\n            state.capabilities.get('manageboards') || (state.common.userboards == 2 && state.capabilities.get('viewallboards'));\n\n        return Object.assign({\n            cmid: state.common.id,\n            id: state.board.id,\n            sequence: state.board.sequence,\n            hascolumns: hascolumns,\n            columns: columns,\n            locked: state.board.locked,\n            hastemplate: state.common.template != 0,\n            istemplate: state.board.template != 0,\n            heading: state.board.heading,\n            groupselector: state.common.groupselector,\n            userboards: state.common.userboards,\n            history: state.common.history,\n            groupmode: state.common.groupmode,\n            ismyuserboard: state.common.userid == state.board.userid,\n            myuserid: state.common.userid,\n            showactionmenu: showactionmenu,\n            users: JSON.parse(JSON.stringify(state.users)),\n        }, this.exportCapabilities(state));\n    }\n\n    /**\n     * Exports the card for one column.\n     * @param {*} state\n     * @param {*} columnid\n     * @returns {object}\n     */\n    static exportCardsForColumn(state, columnid) {\n        let col = JSON.parse(JSON.stringify(state.columns.get(columnid)));\n        let options = JSON.parse(col.options);\n        col.hascards = col.sequence != '';\n        col.autoclose = options.autoclose;\n        col.autohide = options.autohide;\n        if (col.hascards) {\n            let cardOrder = col.sequence.split(',');\n            col.cards = cardOrder.map((value) => {\n                return this.exportCard(state, value);\n            });\n        }\n        return col;\n    }\n\n    /**\n     * Exports a card.\n     * @param {*} state\n     * @param {*} cardid\n     * @returns {object}\n     */\n    static exportCard(state, cardid) {\n        let card = {\n            id: cardid,\n            title: '-',\n            assignees: [],\n            options: '{}',\n            canedit: false\n        };\n        if (state.cards.get(cardid) !== undefined) {\n            card = JSON.parse(JSON.stringify(state.cards.get(cardid)));\n        }\n        card.cardid = card.id;\n        card.hasassignees = card.assignees.length > 0;\n        let options = JSON.parse(card.options);\n        if (card.hasassignees && typeof card.assignees[0] == 'number') {\n            card.assignees = card.assignees.map((userid) => {\n                return state.users.get(userid);\n            });\n            card.assignees = [...new Set(card.assignees)];\n        }\n        return Object.assign(card, options);\n    }\n\n    /**\n     * Exports the capabilities.\n     * @param {*} state\n     * @returns {object}\n     */\n    static exportCapabilities(state) {\n        let capabilities = [];\n        state.capabilities.forEach((c) => {\n            capabilities[c.id] = c.value;\n        });\n        return Object.assign({}, capabilities);\n    }\n\n    /**\n     * Exports the discussion for a card.\n     * @param {*} state\n     * @param {number} cardId\n     * @returns {array}\n     */\n    static exportDiscussion(state, cardId) {\n        let d = [];\n        state.discussions.forEach((c) => {\n            if (c.kanban_card == cardId) {\n                d.push(c);\n            }\n        });\n        d = d.sort((a, b) => parseInt(a.timecreated) > parseInt(b.timecreated));\n        return d;\n    }\n\n    /**\n     * Exports history for a card.\n     * @param {*} state\n     * @param {number} cardId\n     * @returns {array}\n     */\n    static exportHistory(state, cardId) {\n        let d = [];\n        // Only get history of this card.\n        state.history.forEach((c) => {\n            if (c.kanban_card == cardId) {\n                d.push(c);\n            }\n        });\n        // Sort by timestamp.\n        d = d.sort((a, b) => parseInt(a.timestamp) > parseInt(b.timestamp));\n        return d;\n    }\n}"],"names":["state","columnOrder","board","sequence","split","columns","hascolumns","map","value","this","exportCardsForColumn","showactionmenu","common","userboards","groupselector","capabilities","get","Object","assign","cmid","id","locked","hastemplate","template","istemplate","heading","history","groupmode","ismyuserboard","userid","myuserid","users","JSON","parse","stringify","exportCapabilities","columnid","col","options","hascards","autoclose","autohide","cardOrder","cards","exportCard","cardid","card","title","assignees","canedit","undefined","hasassignees","length","Set","forEach","c","cardId","d","discussions","kanban_card","push","sort","a","b","parseInt","timecreated","timestamp"],"mappings":"yMASkCA,WACtBC,YAAcD,MAAME,MAAMC,SAASC,MAAM,KACzCC,QAAU,GACVC,WAAqC,IAAxBN,MAAME,MAAMC,SACzBG,aACAD,QAAUJ,YAAYM,KAAKC,OAChBC,KAAKC,qBAAqBV,MAAOQ,cAI5CG,eAA4C,GAA3BX,MAAMY,OAAOC,YAAiD,IAA9Bb,MAAMY,OAAOE,eAC9Dd,MAAMe,aAAaC,IAAI,iBAA+C,GAA3BhB,MAAMY,OAAOC,YAAmBb,MAAMe,aAAaC,IAAI,wBAE/FC,OAAOC,OAAO,CACjBC,KAAMnB,MAAMY,OAAOQ,GACnBA,GAAIpB,MAAME,MAAMkB,GAChBjB,SAAUH,MAAME,MAAMC,SACtBG,WAAYA,WACZD,QAASA,QACTgB,OAAQrB,MAAME,MAAMmB,OACpBC,YAAsC,GAAzBtB,MAAMY,OAAOW,SAC1BC,WAAoC,GAAxBxB,MAAME,MAAMqB,SACxBE,QAASzB,MAAME,MAAMuB,QACrBX,cAAed,MAAMY,OAAOE,cAC5BD,WAAYb,MAAMY,OAAOC,WACzBa,QAAS1B,MAAMY,OAAOc,QACtBC,UAAW3B,MAAMY,OAAOe,UACxBC,cAAe5B,MAAMY,OAAOiB,QAAU7B,MAAME,MAAM2B,OAClDC,SAAU9B,MAAMY,OAAOiB,OACvBlB,eAAgBA,eAChBoB,MAAOC,KAAKC,MAAMD,KAAKE,UAAUlC,MAAM+B,SACxCtB,KAAK0B,mBAAmBnC,oCASHA,MAAOoC,cAC3BC,IAAML,KAAKC,MAAMD,KAAKE,UAAUlC,MAAMK,QAAQW,IAAIoB,YAClDE,QAAUN,KAAKC,MAAMI,IAAIC,YAC7BD,IAAIE,SAA2B,IAAhBF,IAAIlC,SACnBkC,IAAIG,UAAYF,QAAQE,UACxBH,IAAII,SAAWH,QAAQG,SACnBJ,IAAIE,SAAU,KACVG,UAAYL,IAAIlC,SAASC,MAAM,KACnCiC,IAAIM,MAAQD,UAAUnC,KAAKC,OAChBC,KAAKmC,WAAW5C,MAAOQ,gBAG/B6B,sBASOrC,MAAO6C,YACjBC,KAAO,CACP1B,GAAIyB,OACJE,MAAO,IACPC,UAAW,GACXV,QAAS,KACTW,SAAS,QAEmBC,IAA5BlD,MAAM2C,MAAM3B,IAAI6B,UAChBC,KAAOd,KAAKC,MAAMD,KAAKE,UAAUlC,MAAM2C,MAAM3B,IAAI6B,WAErDC,KAAKD,OAASC,KAAK1B,GACnB0B,KAAKK,aAAeL,KAAKE,UAAUI,OAAS,MACxCd,QAAUN,KAAKC,MAAMa,KAAKR,gBAC1BQ,KAAKK,cAA4C,iBAArBL,KAAKE,UAAU,KAC3CF,KAAKE,UAAYF,KAAKE,UAAUzC,KAAKsB,QAC1B7B,MAAM+B,MAAMf,IAAIa,UAE3BiB,KAAKE,UAAY,IAAI,IAAIK,IAAIP,KAAKE,aAE/B/B,OAAOC,OAAO4B,KAAMR,mCAQLtC,WAClBe,aAAe,UACnBf,MAAMe,aAAauC,SAASC,IACxBxC,aAAawC,EAAEnC,IAAMmC,EAAE/C,SAEpBS,OAAOC,OAAO,GAAIH,sCASLf,MAAOwD,YACvBC,EAAI,UACRzD,MAAM0D,YAAYJ,SAASC,IACnBA,EAAEI,aAAeH,QACjBC,EAAEG,KAAKL,MAGfE,EAAIA,EAAEI,MAAK,CAACC,EAAGC,IAAMC,SAASF,EAAEG,aAAeD,SAASD,EAAEE,eACnDR,uBASUzD,MAAOwD,YACpBC,EAAI,UAERzD,MAAM0B,QAAQ4B,SAASC,IACfA,EAAEI,aAAeH,QACjBC,EAAEG,KAAKL,MAIfE,EAAIA,EAAEI,MAAK,CAACC,EAAGC,IAAMC,SAASF,EAAEI,WAAaF,SAASD,EAAEG,aACjDT"}