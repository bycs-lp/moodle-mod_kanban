{"version":3,"file":"exporter.min.js","sources":["../src/exporter.js"],"sourcesContent":["/**\n * Exporter for use in mustache template.\n */\nexport default class {\n    /**\n     * Exports the complete state (for initial rendering).\n     * @param {*} state\n     * @returns {object}\n     */\n    static exportStateForTemplate(state) {\n        let columnOrder = state.board.sequence.split(',');\n        let columns = [];\n        let hascolumns = state.board.sequence != '';\n        if (hascolumns) {\n            columns = columnOrder.map((value) => {\n                return this.exportCardsForColumn(state, value);\n            });\n        }\n        return Object.assign({\n            cmid: state.board.cmid,\n            id: state.board.id,\n            sequence: state.board.sequence,\n            hascolumns: hascolumns,\n            columns: columns,\n\n        }, this.exportCapabilities(state));\n    }\n    /**\n     * Exports the card for one column.\n     * @param {*} state\n     * @param {*} columnid\n     * @returns {object}\n     */\n    static exportCardsForColumn(state, columnid) {\n        let col = JSON.parse(JSON.stringify(state.columns.get(columnid)));\n        col.hascards = col.sequence != '';\n        if (col.hascards) {\n            let cardOrder = col.sequence.split(',');\n            col.cards = cardOrder.map((value) => {\n                return this.exportCard(state, value);\n            });\n        }\n        return col;\n    }\n    /**\n     * Exports a card.\n     * @param {*} state\n     * @param {*} cardid\n     * @returns {object}\n     */\n    static exportCard(state, cardid) {\n        let card = JSON.parse(JSON.stringify(state.cards.get(cardid)));\n        card.cardid = card.id;\n        card.hasassignees = card.assignees.length > 0;\n        if (card.hasassignees && typeof card.assignees[0] == 'number') {\n            card.assignees = card.assignees.map((userid) => {\n                return state.users.get(userid);\n            });\n            card.assignees = [...new Set(card.assignees)];\n        }\n        return card;\n    }\n\n    /**\n     * Exports the capabilities.\n     * @param {*} state\n     * @returns {object}\n     */\n    static exportCapabilities(state) {\n        let capabilities = [];\n        state.capabilities.forEach((c) => {\n            capabilities[c.id] = c.value;\n        });\n        return Object.assign({}, capabilities);\n    }\n}"],"names":["state","columnOrder","board","sequence","split","columns","hascolumns","map","value","this","exportCardsForColumn","Object","assign","cmid","id","exportCapabilities","columnid","col","JSON","parse","stringify","get","hascards","cardOrder","cards","exportCard","cardid","card","hasassignees","assignees","length","userid","users","Set","capabilities","forEach","c"],"mappings":"yMASkCA,WACtBC,YAAcD,MAAME,MAAMC,SAASC,MAAM,KACzCC,QAAU,GACVC,WAAqC,IAAxBN,MAAME,MAAMC,gBACzBG,aACAD,QAAUJ,YAAYM,KAAKC,OAChBC,KAAKC,qBAAqBV,MAAOQ,UAGzCG,OAAOC,OAAO,CACjBC,KAAMb,MAAME,MAAMW,KAClBC,GAAId,MAAME,MAAMY,GAChBX,SAAUH,MAAME,MAAMC,SACtBG,WAAYA,WACZD,QAASA,SAEVI,KAAKM,mBAAmBf,oCAQHA,MAAOgB,cAC3BC,IAAMC,KAAKC,MAAMD,KAAKE,UAAUpB,MAAMK,QAAQgB,IAAIL,eACtDC,IAAIK,SAA2B,IAAhBL,IAAId,SACfc,IAAIK,SAAU,KACVC,UAAYN,IAAId,SAASC,MAAM,KACnCa,IAAIO,MAAQD,UAAUhB,KAAKC,OAChBC,KAAKgB,WAAWzB,MAAOQ,gBAG/BS,sBAQOjB,MAAO0B,YACjBC,KAAOT,KAAKC,MAAMD,KAAKE,UAAUpB,MAAMwB,MAAMH,IAAIK,iBACrDC,KAAKD,OAASC,KAAKb,GACnBa,KAAKC,aAAeD,KAAKE,UAAUC,OAAS,EACxCH,KAAKC,cAA4C,iBAArBD,KAAKE,UAAU,KAC3CF,KAAKE,UAAYF,KAAKE,UAAUtB,KAAKwB,QAC1B/B,MAAMgC,MAAMX,IAAIU,UAE3BJ,KAAKE,UAAY,IAAI,IAAII,IAAIN,KAAKE,aAE/BF,+BAQe3B,WAClBkC,aAAe,UACnBlC,MAAMkC,aAAaC,SAASC,IACxBF,aAAaE,EAAEtB,IAAMsB,EAAE5B,SAEpBG,OAAOC,OAAO,GAAIsB"}