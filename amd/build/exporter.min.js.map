{"version":3,"file":"exporter.min.js","sources":["../src/exporter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle. If not, see http://www.gnu.org/licenses/.\n\n/**\n * Exporter for use in mustache template.\n * @module mod_kanban/exporter\n * @copyright 2024 ISB Bayern\n * @author Stefan Hanauska stefan.hanauska@csg-in.de\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport capabilities from 'mod_kanban/capabilities';\n\n/**\n * Exporter for use in mustache template.\n */\nexport default class {\n    /**\n     * Exports the complete state (for initial rendering).\n     * @param {*} state\n     * @returns {object}\n     */\n    static exportStateForTemplate(state) {\n        let columnOrder = state.board.sequence.split(',');\n        let columns = [];\n        let hascolumns = state.board.sequence != '';\n        if (hascolumns) {\n            columns = columnOrder.map((value) => {\n                return this.exportCardsForColumn(state, value);\n            });\n            columns = columns.filter((value) => {\n                return value.id !== undefined;\n            });\n        }\n\n        let showactionmenu = state.common.userboards == 1 || state.common.groupselector != '' ||\n            state.capabilities.get(capabilities.MANAGEBOARD).value ||\n            (state.common.userboards == 2 && state.capabilities.get(capabilities.VIEWALLBOARDS).value);\n\n        return Object.assign({\n            cmid: state.common.id,\n            id: state.board.id,\n            sequence: state.board.sequence,\n            hascolumns: hascolumns,\n            columns: columns,\n            locked: state.board.locked,\n            hastemplate: state.common.template != 0,\n            istemplate: state.board.template != 0,\n            heading: state.board.heading,\n            groupselector: state.common.groupselector,\n            userboards: state.common.userboards,\n            history: state.common.history && state.capabilities.get(capabilities.VIEWHISTORY).value,\n            groupmode: state.common.groupmode,\n            ismyuserboard: state.common.userid == state.board.userid,\n            myuserid: state.common.userid,\n            showactionmenu: showactionmenu,\n            userboardsonly: state.common.userboards == 2,\n            iscourseboard: state.board.userid == 0 && state.board.groupid == 0 && state.board.template == 0,\n            users: JSON.parse(JSON.stringify(state.users)),\n            usenumbers: state.common.usenumbers,\n            hasaddcards: state.board.hasaddcards ?? false,\n        }, this.exportCapabilities(state));\n    }\n\n    /**\n     * Exports the card for one column.\n     * @param {*} state\n     * @param {*} columnid\n     * @returns {object}\n     */\n    static exportCardsForColumn(state, columnid) {\n        let column = state.columns.get(columnid);\n        // This handles a column that is not present in the state.\n        if (column === undefined) {\n            return {};\n        }\n        let col = JSON.parse(JSON.stringify(column));\n        let options = JSON.parse(col.options);\n        col.hascards = col.sequence != '';\n        col.autoclose = options.autoclose;\n        col.autohide = options.autohide;\n        col.addcardshere = options.addcardshere ?? false;\n        if (options.wiplimit > 0) {\n            col.wiplimit = options.wiplimit;\n        }\n        col.cardcount = 0;\n        if (col.hascards) {\n            let cardOrder = col.sequence.split(',');\n            col.cards = cardOrder.map((value) => {\n                return this.exportCard(state, value);\n            });\n            col.cardcount = cardOrder.length;\n        }\n        return col;\n    }\n\n    /**\n     * Exports a card.\n     * @param {*} state\n     * @param {*} cardid\n     * @returns {object}\n     */\n    static exportCard(state, cardid) {\n        let card = {\n            id: cardid,\n            title: '-',\n            assignees: [],\n            options: '{}',\n            canedit: false,\n            number: 0,\n        };\n        if (state.cards.get(cardid) !== undefined) {\n            card = JSON.parse(JSON.stringify(state.cards.get(cardid)));\n        }\n        card.cardid = card.id;\n        card.hasassignees = card.assignees.length > 0;\n        let options = JSON.parse(card.options);\n        if (card.hasassignees && typeof card.assignees[0] == 'number') {\n            card.assignees = card.assignees.map((userid) => {\n                return state.users.get(userid);\n            });\n            card.assignees = [...new Set(card.assignees)];\n        }\n        return Object.assign(card, options);\n    }\n\n    /**\n     * Exports the capabilities.\n     * @param {*} state\n     * @returns {object}\n     */\n    static exportCapabilities(state) {\n        let capabilities = [];\n        state.capabilities.forEach((c) => {\n            capabilities[c.id] = c.value;\n        });\n        return Object.assign({}, capabilities);\n    }\n\n    /**\n     * Exports the discussion for a card.\n     * @param {*} state\n     * @param {number} cardId\n     * @returns {array}\n     */\n    static exportDiscussion(state, cardId) {\n        let d = [];\n        state.discussions.forEach((c) => {\n            if (c.kanban_card == cardId) {\n                d.push(c);\n            }\n        });\n        d = d.sort((a, b) => parseInt(a.timecreated) > parseInt(b.timecreated));\n        return d;\n    }\n\n    /**\n     * Exports history for a card.\n     * @param {*} state\n     * @param {number} cardId\n     * @returns {array}\n     */\n    static exportHistory(state, cardId) {\n        let d = [];\n        // Only get history of this card.\n        state.history.forEach((c) => {\n            if (c.kanban_card == cardId) {\n                d.push(c);\n            }\n        });\n        // Sort by timestamp.\n        d = d.sort((a, b) => parseInt(a.timestamp) > parseInt(b.timestamp));\n        return d;\n    }\n}\n"],"names":["state","columnOrder","board","sequence","split","columns","hascolumns","map","value","this","exportCardsForColumn","filter","undefined","id","showactionmenu","common","userboards","groupselector","capabilities","get","MANAGEBOARD","VIEWALLBOARDS","Object","assign","cmid","locked","hastemplate","template","istemplate","heading","history","VIEWHISTORY","groupmode","ismyuserboard","userid","myuserid","userboardsonly","iscourseboard","groupid","users","JSON","parse","stringify","usenumbers","hasaddcards","exportCapabilities","columnid","column","col","options","hascards","autoclose","autohide","addcardshere","wiplimit","cardcount","cardOrder","cards","exportCard","length","cardid","card","title","assignees","canedit","number","hasassignees","Set","forEach","c","cardId","d","discussions","kanban_card","push","sort","a","b","parseInt","timecreated","timestamp"],"mappings":"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"}