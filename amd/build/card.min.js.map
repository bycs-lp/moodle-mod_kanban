{"version":3,"file":"card.min.js","sources":["../src/card.js"],"sourcesContent":["import {BaseComponent, DragDrop} from 'core/reactive';\nimport selectors from 'mod_kanban/selectors';\nimport exporter from 'mod_kanban/exporter';\nimport {saveCancel} from 'core/notification';\nimport ModalForm from 'core_form/modalform';\nimport {get_string as getString} from 'core/str';\nimport {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\n\n/**\n * Component representing a card in a kanban board.\n */\nexport default class extends BaseComponent {\n    /**\n     * For relative time helper.\n     */\n    _units = {\n        year: 24 * 60 * 60 * 1000 * 365,\n        month: 24 * 60 * 60 * 1000 * 365 / 12,\n        day: 24 * 60 * 60 * 1000,\n        hour: 60 * 60 * 1000,\n        minute: 60 * 1000,\n        second: 1000\n    };\n\n    /**\n     * Function to initialize component, called by mustache template.\n     * @param {*} target The id of the HTMLElement to attach to\n     * @returns {BaseComponent} New component attached to the HTMLElement represented by target\n     */\n    static init(target) {\n        let element = document.getElementById(target);\n        return new this({\n            element: element,\n        });\n    }\n\n    /**\n     * Called after the component was created.\n     */\n    create() {\n        this.id = this.element.dataset.id;\n    }\n\n    /**\n     * Watchers for this component.\n     * @returns {array} All watchers for this component\n     */\n    getWatchers() {\n        return [\n            {watch: `cards[${this.id}]:updated`, handler: this._cardUpdated},\n            {watch: `cards[${this.id}]:deleted`, handler: this._cardDeleted},\n        ];\n    }\n\n    /**\n     * Called once when state is ready, attaching event listeners and initializing drag and drop.\n     * @param {*} state The initial state\n     */\n    stateReady(state) {\n        let lang = 'en';\n        if (state.board.lang !== undefined) {\n            lang = state.board.lang;\n        }\n        this.rtf = new Intl.RelativeTimeFormat(lang, {numeric: 'auto'});\n\n        this.addEventListener(\n            this.getElement(selectors.DELETECARD, this.id),\n            'click',\n            this._removeConfirm\n        );\n        this.addEventListener(\n            this.getElement(selectors.ADDCARD, this.id),\n            'click',\n            this._addCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.COMPLETE, this.id),\n            'click',\n            this._completeCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.UNCOMPLETE, this.id),\n            'click',\n            this._uncompleteCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.ASSIGNSELF, this.id),\n            'click',\n            this._assignSelf\n        );\n        this.addEventListener(\n            this.getElement(selectors.UNASSIGNSELF, this.id),\n            'click',\n            this._unassignSelf\n        );\n        this.addEventListener(\n            this.getElement(selectors.EDITDETAILS, this.id),\n            'click',\n            this._editDetails\n        );\n        this.draggable = false;\n        this.dragdrop = new DragDrop(this);\n        this.checkDragging(state);\n        this.boardid = state.board.id;\n        this.cmid = state.board.cmid;\n        this.userid = state.board.user;\n        this.groupid = state.board.groupid;\n        this._dueDateFormat();\n    }\n\n    /**\n     * Display confirmation modal for deleting a card.\n     * @param {*} event\n     */\n    _removeConfirm(event) {\n        saveCancel(\n            getString('deletecard', 'mod_kanban'),\n            getString('deletecardconfirm', 'mod_kanban'),\n            getString('delete', 'core'),\n            () => {\n                this._removeCard(event);\n            }\n        );\n    }\n\n    /**\n     * Dispatch event to assign the current user to the card.\n     * @param {*} event\n     */\n    _assignSelf(event) {\n        let target = event.target.closest(selectors.ASSIGNSELF);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('assignUser', data.id);\n    }\n\n    /**\n     * Dispatch event to add a card after this card.\n     * @param {*} event\n     */\n    _addCard(event) {\n        let target = event.target.closest(selectors.ADDCARD);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('addCard', data.columnid, data.id);\n    }\n\n    /**\n     * Update this card.\n     * @param {*} param0\n     */\n    async _cardUpdated({element}) {\n        const card = this.getElement();\n        if (card.dataset.columnid != element.kanban_column) {\n            const col = document.querySelector(selectors.COLUMNINNER + '[data-id=\"' + element.kanban_column + '\"]');\n            col.appendChild(card);\n            this.getElement(selectors.ADDCARD, this.id).setAttribute('data-columnid', element.kanban_column);\n            card.setAttribute('data-columnid', element.kanban_column);\n        }\n        const assignees = this.getElement(selectors.ASSIGNEES, this.id);\n        const assignedUsers = this.getElements(selectors.ASSIGNEDUSER, this.id);\n        const userids = [...assignedUsers].map(v => {\n            return v.dataset.userid;\n        });\n        if (element.assignees !== undefined) {\n            const additional = element.assignees.filter(x => !userids.includes(x));\n            if (assignedUsers !== null) {\n                assignedUsers.forEach(assignedUser => {\n                    if (!element.assignees.includes(assignedUser.dataset.userid)) {\n                        assignedUser.parentNode.removeChild(assignedUser);\n                    }\n                });\n            }\n            if (element.assignees.length > 0) {\n                this.getElement().classList.remove('mod_kanban_unassigned');\n                additional.forEach(async user => {\n                    let placeholder = document.createElement('div');\n                    let userdata = this.reactive.state.users.get(user);\n                    let data = Object.assign({cardid: element.id}, userdata);\n                    data = Object.assign(data, exporter.exportCapabilities(this.reactive.state));\n                    placeholder.setAttribute('data-id', element.id);\n                    assignees.appendChild(placeholder);\n                    const newcomponent = await this.renderComponent(placeholder, 'mod_kanban/user', data);\n                    const newelement = newcomponent.getElement();\n                    assignees.replaceChild(newelement, placeholder);\n                });\n            } else {\n                this.getElement().classList.add('mod_kanban_unassigned');\n            }\n        }\n        if (element.selfassigned !== undefined) {\n            if (element.selfassigned) {\n                this.getElement(selectors.ASSIGNSELF, this.id).parentNode.classList.add('hidden');\n                this.getElement(selectors.UNASSIGNSELF, this.id).parentNode.classList.remove('hidden');\n                if (this.reactive.state.capabilities.get('moveassignedcards')) {\n                        this.getElement(selectors.UNCOMPLETE).parentNode.classList.remove('mod_kanban_hidden');\n                        this.getElement(selectors.COMPLETE).parentNode.classList.remove('mod_kanban_hidden');\n                }\n            } else {\n                this.getElement(selectors.ASSIGNSELF, this.id).parentNode.classList.remove('hidden');\n                this.getElement(selectors.UNASSIGNSELF, this.id).parentNode.classList.add('hidden');\n                if (this.reactive.state.capabilities.get('moveallcards').value == false) {\n                    this.getElement(selectors.UNCOMPLETE).parentNode.classList.add('mod_kanban_hidden');\n                    this.getElement(selectors.COMPLETE).parentNode.classList.add('mod_kanban_hidden');\n                }\n            }\n        }\n        if (element.completed !== undefined) {\n            if (element.completed == 1) {\n                this.getElement(selectors.COMPLETIONSTATE).classList.remove('hidden');\n                this.getElement(selectors.UNCOMPLETE).parentNode.classList.remove('hidden');\n                this.getElement(selectors.COMPLETE).parentNode.classList.add('hidden');\n                this.getElement(selectors.INPLACEEDITABLE).removeAttribute('data-inplaceeditable');\n                this.getElement(selectors.DUEDATE).classList.add('hidden');\n                this.getElement().classList.add('mod_kanban_closed');\n            } else {\n                this.getElement(selectors.COMPLETIONSTATE).classList.add('hidden');\n                this.getElement(selectors.UNCOMPLETE).parentNode.classList.add('hidden');\n                this.getElement(selectors.COMPLETE).parentNode.classList.remove('hidden');\n                this.getElement(selectors.INPLACEEDITABLE).setAttribute('data-inplaceeditable', '1');\n                this.getElement(selectors.DUEDATE).classList.remove('hidden');\n                this.getElement().classList.remove('mod_kanban_closed');\n            }\n        }\n        if (element.title !== undefined) {\n            this.getElement(selectors.INPLACEEDITABLE).setAttribute('data-value', element.title);\n            this.getElement(selectors.INPLACEEDITABLE).querySelector('a').innerHTML = element.title;\n            this.getElement(selectors.DESCRIPTIONMODALTITLE).innerHTML = element.title;\n        }\n        if (element.description !== undefined) {\n            this.getElement(selectors.DESCRIPTIONMODALBODY).innerHTML = element.description;\n        }\n        if (element.attachments !== undefined) {\n            Templates.renderForPromise('mod_kanban/attachmentitems', {attachments: element.attachments}).then(({html}) => {\n                this.getElement(selectors.DESCRIPTIONMODALFOOTER).innerHTML = html;\n                return true;\n            }).catch((error) => displayException(error));\n        }\n        if (element.hasdescription !== undefined || element.hasattachment !== undefined) {\n            if (element.hasdescription || element.hasattachment) {\n                this.getElement(selectors.DESCRIPTIONTOGGLE).classList.remove('hidden');\n            } else {\n                this.getElement(selectors.DESCRIPTIONTOGGLE).classList.add('hidden');\n            }\n        }\n        if (element.duedate !== undefined) {\n            this.getElement(selectors.DUEDATE).setAttribute('data-date', element.duedate);\n            this._dueDateFormat();\n        }\n        this.checkDragging();\n    }\n\n    /**\n     * Delete this card.\n     */\n    _cardDeleted() {\n        const el = this.getElement();\n        el.parentNode.removeChild(el);\n        this.destroy();\n    }\n\n    /**\n     * Dispatch event to remove this card.\n     * @param {*} event\n     */\n    _removeCard(event) {\n        let target = event.target.closest(selectors.DELETECARD);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('deleteCard', data.id);\n    }\n\n    /**\n     * Dispatch event to complete this card.\n     * @param {*} event\n     */\n    _completeCard(event) {\n        let target = event.target.closest(selectors.COMPLETE);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('completeCard', data.id);\n    }\n\n    /**\n     * Dispatch event to complete this card.\n     * @param {*} event\n     */\n    _uncompleteCard(event) {\n        let target = event.target.closest(selectors.UNCOMPLETE);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('uncompleteCard', data.id);\n    }\n\n    /**\n     * Remove all subcomponents dependencies.\n     */\n    destroy() {\n        if (this.dragdrop !== undefined) {\n            this.dragdrop.unregister();\n        }\n    }\n\n    /**\n     * Get the draggable data of this component.\n     * @returns {object}\n     */\n    getDraggableData() {\n        return {\n            id: this.id,\n            type: 'card',\n        };\n    }\n\n    /**\n     * Conditionally enable / disable dragging.\n     * @param {*} state\n     */\n    checkDragging(state) {\n        if (state === undefined) {\n            state = this.reactive.stateManager.state;\n        }\n        if (state.capabilities.get('moveallcards').value ||\n            (state.capabilities.get('moveassignedcards').value &&\n            state.cards.get(this.id).assignees.includes(state.board.userid))) {\n            this.draggable = true;\n            this.dragdrop.setDraggable(true);\n        } else {\n            this.draggable = false;\n            this.dragdrop.setDraggable(false);\n        }\n    }\n\n    /**\n     * Validate draggable data.\n     * @param {object} dropdata\n     * @returns {boolean} if the data is valid for this drop-zone.\n     */\n    validateDropData(dropdata) {\n        return dropdata?.type == 'card';\n    }\n\n    /**\n     * Executed when a valid dropdata is dropped over the drop-zone.\n     * @param {object} dropdata\n     */\n    drop(dropdata) {\n        if (dropdata.id != this.id) {\n            let newcolumn = this.getElement(selectors.ADDCARD, this.id).dataset.columnid;\n            let aftercard = this.id;\n            this.reactive.dispatch('moveCard', dropdata.id, newcolumn, aftercard);\n        }\n    }\n\n    /**\n     * Dispatch event to unassign the current user.\n     * @param {*} event\n     */\n    _unassignSelf(event) {\n        let target = event.target.closest(selectors.UNASSIGNSELF);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('unassignUser', data.id);\n    }\n\n    /**\n     * Show modal form to edit card details.\n     * @param {*} event\n     */\n    _editDetails(event) {\n        event.preventDefault();\n\n        const modalForm = new ModalForm({\n            formClass: \"mod_kanban\\\\form\\\\edit_card_form\",\n            args: {\n                id: this.id,\n                boardid: this.boardid,\n                cmid: this.cmid,\n                groupid: this.groupid,\n                userid: this.user\n            },\n            modalConfig: {title: getString('editcard', 'mod_kanban')},\n            returnFocus: this.getElement(),\n        });\n        this.addEventListener(modalForm, modalForm.events.FORM_SUBMITTED, this._updateCard);\n        modalForm.show();\n    }\n\n    /**\n     * Dispatch an event to update card data from the detail modal.\n     * @param {*} event\n     */\n    _updateCard(event) {\n        this.reactive.dispatch('processUpdates', event.detail);\n    }\n\n    /**\n     * Update relative time.\n     * @param {int} timestamp\n     * @returns {string}\n     */\n    updateRelativeTime(timestamp) {\n        let elapsed = new Date(timestamp) - new Date();\n        for (var u in this._units) {\n            if (Math.abs(elapsed) > this._units[u] || u == 'second') {\n                return this.rtf.format(Math.round(elapsed / this._units[u]), u);\n            }\n        }\n        return '';\n    }\n\n    /**\n     * Format due date.\n     */\n    _dueDateFormat() {\n        // Convert timestamp to ms.\n        let duedate = this.getElement(selectors.DUEDATE).dataset.date * 1000;\n        if (duedate > 0) {\n            let element = this.getElement(selectors.DUEDATE);\n            element.innerHTML = this.updateRelativeTime(duedate);\n            if (duedate < new Date().getTime()) {\n                element.classList.add('mod_kanban_overdue');\n            } else {\n                element.classList.remove('mod_kanban_overdue');\n            }\n        } else {\n            this.getElement(selectors.DUEDATE).innerHTML = '';\n        }\n    }\n}\n"],"names":["BaseComponent","year","month","day","hour","minute","second","target","this","element","document","getElementById","create","id","dataset","getWatchers","watch","handler","_cardUpdated","_cardDeleted","stateReady","state","lang","undefined","board","rtf","Intl","RelativeTimeFormat","numeric","addEventListener","getElement","selectors","DELETECARD","_removeConfirm","ADDCARD","_addCard","COMPLETE","_completeCard","UNCOMPLETE","_uncompleteCard","ASSIGNSELF","_assignSelf","UNASSIGNSELF","_unassignSelf","EDITDETAILS","_editDetails","draggable","dragdrop","DragDrop","checkDragging","boardid","cmid","userid","user","groupid","_dueDateFormat","event","_removeCard","closest","data","Object","assign","reactive","dispatch","columnid","card","kanban_column","querySelector","COLUMNINNER","appendChild","setAttribute","assignees","ASSIGNEES","assignedUsers","getElements","ASSIGNEDUSER","userids","map","v","additional","filter","x","includes","forEach","assignedUser","parentNode","removeChild","length","classList","remove","async","placeholder","createElement","userdata","users","get","cardid","exporter","exportCapabilities","newelement","renderComponent","replaceChild","add","selfassigned","capabilities","value","completed","COMPLETIONSTATE","INPLACEEDITABLE","removeAttribute","DUEDATE","title","innerHTML","DESCRIPTIONMODALTITLE","description","DESCRIPTIONMODALBODY","attachments","renderForPromise","then","_ref2","html","DESCRIPTIONMODALFOOTER","catch","error","hasdescription","hasattachment","DESCRIPTIONTOGGLE","duedate","el","destroy","unregister","getDraggableData","type","stateManager","cards","setDraggable","validateDropData","dropdata","drop","newcolumn","aftercard","preventDefault","modalForm","ModalForm","formClass","args","modalConfig","returnFocus","events","FORM_SUBMITTED","_updateCard","show","detail","updateRelativeTime","timestamp","elapsed","Date","u","_units","Math","abs","format","round","date","getTime"],"mappings":"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"}