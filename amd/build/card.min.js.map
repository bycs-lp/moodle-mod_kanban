{"version":3,"file":"card.min.js","sources":["../src/card.js"],"sourcesContent":["import {BaseComponent, DragDrop} from 'core/reactive';\nimport selectors from 'mod_kanban/selectors';\nimport exporter from 'mod_kanban/exporter';\nimport {saveCancel} from 'core/notification';\nimport {get_string as getString} from 'core/str';\n\n/**\n * Component representing a card in a kanban board.\n */\nexport default class extends BaseComponent {\n    /**\n     * Function to initialize component, called by mustache template.\n     * @param {*} target The id of the HTMLElement to attach to\n     * @returns {BaseComponent} New component attached to the HTMLElement represented by target\n     */\n    static init(target) {\n        let element = document.getElementById(target);\n        return new this({\n            element: element,\n        });\n    }\n\n    /**\n     * Called after the component was created.\n     */\n    create() {\n        this.id = this.element.dataset.id;\n    }\n\n    /**\n     * Watchers for this component.\n     * @returns {array} All watchers for this component\n     */\n    getWatchers() {\n        return [\n            {watch: `cards[${this.id}]:updated`, handler: this._cardUpdated},\n            {watch: `cards[${this.id}]:deleted`, handler: this._cardDeleted},\n        ];\n    }\n\n    /**\n     * Called once when state is ready, attaching event listeners and initializing drag and drop.\n     * @param {*} state The initial state\n     */\n    stateReady(state) {\n        this.addEventListener(\n            this.getElement(selectors.DELETECARD, this.id),\n            'click',\n            this._removeConfirm\n        );\n        this.addEventListener(\n            this.getElement(selectors.ADDCARD, this.id),\n            'click',\n            this._addCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.COMPLETE, this.id),\n            'click',\n            this._completeCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.UNCOMPLETE, this.id),\n            'click',\n            this._uncompleteCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.ASSIGNSELF, this.id),\n            'click',\n            this._assignSelf\n        );\n        this.addEventListener(\n            this.getElement(selectors.UNASSIGNSELF, this.id),\n            'click',\n            this._unassignSelf\n        );\n        this.draggable = false;\n        this.dragdrop = new DragDrop(this);\n        this.checkDragging(state);\n    }\n\n    /**\n     * Display confirmation modal for deleting a card.\n     * @param {*} event\n     */\n    _removeConfirm(event) {\n        saveCancel(\n            getString('deletecard', 'mod_kanban'),\n            getString('deletecardconfirm', 'mod_kanban'),\n            getString('delete', 'core'),\n            () => {\n                this._removeCard(event);\n            }\n        );\n    }\n\n    /**\n     * Dispatch event to assign the current user to the card.\n     * @param {*} event\n     */\n    _assignSelf(event) {\n        let target = event.target.closest(selectors.ASSIGNSELF);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('assignUser', data.id);\n    }\n\n    /**\n     * Dispatch event to add a card after this card.\n     * @param {*} event\n     */\n    _addCard(event) {\n        let target = event.target.closest(selectors.ADDCARD);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('addCard', data.columnid, data.id);\n    }\n\n    /**\n     * Update this card.\n     * @param {*} param0\n     */\n    async _cardUpdated({element}) {\n        const card = this.getElement();\n        if (card.dataset.columnid != element.kanban_column) {\n            const col = document.querySelector(selectors.COLUMNINNER + '[data-id=\"' + element.kanban_column + '\"]');\n            col.appendChild(card);\n            this.getElement(selectors.ADDCARD, this.id).setAttribute('data-columnid', element.kanban_column);\n            card.setAttribute('data-columnid', element.kanban_column);\n        }\n        const assignees = this.getElement(selectors.ASSIGNEES, this.id);\n        const assignedUsers = this.getElements(selectors.ASSIGNEDUSER, this.id);\n        const userids = [...assignedUsers].map(v => {\n            return v.dataset.userid;\n        });\n        const additional = element.assignees.filter(x => !userids.includes(x));\n        if (assignedUsers !== null) {\n            assignedUsers.forEach(assignedUser => {\n                if (!element.assignees.includes(assignedUser.dataset.userid)) {\n                    assignedUser.parentNode.removeChild(assignedUser);\n                }\n            });\n        }\n        if (element.assignees.length > 0) {\n            additional.forEach(async user => {\n                let placeholder = document.createElement('div');\n                let userdata = this.reactive.state.users.get(user);\n                let data = Object.assign({cardid: element.id}, userdata);\n                data = Object.assign(data, exporter.exportCapabilities(this.reactive.state));\n                placeholder.setAttribute('data-id', element.id);\n                assignees.appendChild(placeholder);\n                const newcomponent = await this.renderComponent(placeholder, 'mod_kanban/user', data);\n                const newelement = newcomponent.getElement();\n                assignees.replaceChild(newelement, placeholder);\n            });\n        }\n        if (element.selfassigned !== undefined && element.selfassigned) {\n            this.getElement(selectors.ASSIGNSELF, this.id).parentNode.classList.add('hidden');\n            this.getElement(selectors.UNASSIGNSELF, this.id).parentNode.classList.remove('hidden');\n        } else {\n            this.getElement(selectors.ASSIGNSELF, this.id).parentNode.classList.remove('hidden');\n            this.getElement(selectors.UNASSIGNSELF, this.id).parentNode.classList.add('hidden');\n        }\n        if (element.complete !== undefined && element.selfassigned) {\n            this.getElement(selectors.UNCOMPLETE).parentNode.classList.remove('hidden');\n            this.getElement(selectors.COMPLETE).parentNode.classList.add('hidden');\n            this.getElement(selectors.INPLACEEDITABLE).removeAttribute('data-inplaceeditable');\n        } else {\n            this.getElement(selectors.UNCOMPLETE).parentNode.classList.add('hidden');\n            this.getElement(selectors.COMPLETE).parentNode.classList.remove('hidden');\n            this.getElement(selectors.INPLACEEDITABLE).setAttribute('data-inplaceeditable', '1');\n        }\n        this.checkDragging();\n    }\n\n    /**\n     * Delete this card.\n     */\n    _cardDeleted() {\n        const el = this.getElement();\n        el.parentNode.removeChild(el);\n        this.destroy();\n    }\n\n    /**\n     * Dispatch event to remove this card.\n     * @param {*} event\n     */\n    _removeCard(event) {\n        let target = event.target.closest('[data-action=\"delete_card\"]');\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('deleteCard', data.id);\n    }\n\n    /**\n     * Dispatch event to complete this card.\n     * @param {*} event\n     */\n    _completeCard(event) {\n        let target = event.target.closest(selectors.COMPLETE);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('completeCard', data.id);\n    }\n\n    /**\n     * Dispatch event to complete this card.\n     * @param {*} event\n     */\n    _uncompleteCard(event) {\n        let target = event.target.closest(selectors.UNCOMPLETE);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('uncompleteCard', data.id);\n    }\n\n    /**\n     * Remove all subcomponents dependencies.\n     */\n    destroy() {\n        if (this.dragdrop !== undefined) {\n            this.dragdrop.unregister();\n        }\n    }\n\n    /**\n     * Get the draggable data of this component.\n     * @returns {object}\n     */\n    getDraggableData() {\n        return {\n            id: this.id,\n            type: 'card',\n        };\n    }\n\n    /**\n     * Conditionally enable / disable dragging.\n     * @param {*} state\n     */\n    checkDragging(state) {\n        if (state === undefined) {\n            state = this.reactive.stateManager.state;\n        }\n        if (state.capabilities.get('moveallcards').value ||\n            (state.capabilities.get('moveassignedcards').value &&\n            state.cards.get(this.id).assignees.includes(state.board.userid))) {\n            this.draggable = true;\n            this.dragdrop.setDraggable(true);\n        } else {\n            this.draggable = false;\n            this.dragdrop.setDraggable(false);\n        }\n    }\n\n    /**\n     * Validate draggable data.\n     * @param {object} dropdata\n     * @returns {boolean} if the data is valid for this drop-zone.\n     */\n    validateDropData(dropdata) {\n        return dropdata?.type == 'card';\n    }\n\n    /**\n     * Executed when a valid dropdata is dropped over the drop-zone.\n     * @param {object} dropdata\n     */\n    drop(dropdata) {\n        if (dropdata.id != this.id) {\n            let newcolumn = this.getElement(selectors.ADDCARD, this.id).dataset.columnid;\n            let aftercard = this.id;\n            this.reactive.dispatch('moveCard', dropdata.id, newcolumn, aftercard);\n        }\n    }\n\n    /**\n     * Dispatch event to unassign the current user.\n     * @param {*} event\n     */\n    _unassignSelf(event) {\n        let target = event.target.closest(selectors.UNASSIGNSELF);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('unassignUser', data.id);\n    }\n}\n"],"names":["BaseComponent","target","this","element","document","getElementById","create","id","dataset","getWatchers","watch","handler","_cardUpdated","_cardDeleted","stateReady","state","addEventListener","getElement","selectors","DELETECARD","_removeConfirm","ADDCARD","_addCard","COMPLETE","_completeCard","UNCOMPLETE","_uncompleteCard","ASSIGNSELF","_assignSelf","UNASSIGNSELF","_unassignSelf","draggable","dragdrop","DragDrop","checkDragging","event","_removeCard","closest","data","Object","assign","reactive","dispatch","columnid","card","kanban_column","querySelector","COLUMNINNER","appendChild","setAttribute","assignees","ASSIGNEES","assignedUsers","getElements","ASSIGNEDUSER","userids","map","v","userid","additional","filter","x","includes","forEach","assignedUser","parentNode","removeChild","length","async","placeholder","createElement","userdata","users","get","user","cardid","exporter","exportCapabilities","newelement","renderComponent","replaceChild","undefined","selfassigned","classList","add","remove","complete","INPLACEEDITABLE","removeAttribute","el","destroy","unregister","getDraggableData","type","stateManager","capabilities","value","cards","board","setDraggable","validateDropData","dropdata","drop","newcolumn","aftercard"],"mappings":"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"}