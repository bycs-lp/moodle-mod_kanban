{"version":3,"file":"card.min.js","sources":["../src/card.js"],"sourcesContent":["import {DragDrop} from 'core/reactive';\nimport selectors from 'mod_kanban/selectors';\nimport exporter from 'mod_kanban/exporter';\nimport {alert, exception as displayException, saveCancel} from 'core/notification';\nimport ModalForm from 'core_form/modalform';\nimport ModalEvents from 'core/modal_events';\nimport * as Str from 'core/str';\nimport {get_string as getString} from 'core/str';\nimport Templates from 'core/templates';\nimport KanbanComponent from 'mod_kanban/kanbancomponent';\nimport Log from 'core/log';\n\n/**\n * Component representing a card in a kanban board.\n */\nexport default class extends KanbanComponent {\n    /**\n     * For relative time helper.\n     */\n    _units = {\n        year: 24 * 60 * 60 * 1000 * 365,\n        month: 24 * 60 * 60 * 1000 * 365 / 12,\n        day: 24 * 60 * 60 * 1000,\n        hour: 60 * 60 * 1000,\n        minute: 60 * 1000,\n        second: 1000\n    };\n\n    /**\n     * Function to initialize component, called by mustache template.\n     * @param {*} target The id of the HTMLElement to attach to\n     * @returns {BaseComponent} New component attached to the HTMLElement represented by target\n     */\n    static init(target) {\n        let element = document.getElementById(target);\n        return new this({\n            element: element,\n        });\n    }\n\n    /**\n     * Called after the component was created.\n     */\n    create() {\n        this.id = this.element.dataset.id;\n    }\n\n    /**\n     * Watchers for this component.\n     * @returns {array} All watchers for this component\n     */\n    getWatchers() {\n        return [\n            {watch: `cards[${this.id}]:updated`, handler: this._cardUpdated},\n            {watch: `cards[${this.id}]:deleted`, handler: this._cardDeleted},\n            {watch: `discussions:created`, handler: this._discussionUpdated},\n            {watch: `discussions:updated`, handler: this._discussionUpdated},\n            {watch: `discussions:deleted`, handler: this._discussionUpdated},\n            {watch: `history:created`, handler: this._historyUpdated},\n            {watch: `history:updated`, handler: this._historyUpdated},\n            {watch: `history:deleted`, handler: this._historyUpdated},\n        ];\n    }\n\n    /**\n     * Called once when state is ready (also if component is registered after initial state was set), attaching event\n     * isteners and initializing drag and drop.\n     * @param {*} state The initial state\n     */\n    stateReady(state) {\n        // Get language for relative time formatting.\n        let lang = 'en';\n        if (state.common.lang !== undefined) {\n            lang = state.common.lang;\n        }\n        // The property state.common.lang contains the locale extracted from the currently used moodle language pack.\n        // This should be a real locale and thus suitable for RelativeTimeFormat, for edge cases however we are\n        // using a fallback locale here.\n        try {\n            this.rtf = new Intl.RelativeTimeFormat(lang, {numeric: 'auto'});\n        } catch (e) {\n            // Fallback if there is no valid lang found.\n            this.rtf = new Intl.RelativeTimeFormat('en', {numeric: 'auto'});\n        }\n\n        this.addEventListener(\n            this.getElement(selectors.DELETECARD, this.id),\n            'click',\n            this._removeConfirm\n        );\n        this.addEventListener(\n            this.getElement(selectors.ADDCARD, this.id),\n            'click',\n            this._addCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.COMPLETE, this.id),\n            'click',\n            this._completeCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.UNCOMPLETE, this.id),\n            'click',\n            this._uncompleteCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.ASSIGNSELF, this.id),\n            'click',\n            this._assignSelf\n        );\n        this.addEventListener(\n            this.getElement(selectors.UNASSIGNSELF, this.id),\n            'click',\n            this._unassignSelf\n        );\n        this.addEventListener(\n            this.getElement(selectors.EDITDETAILS, this.id),\n            'click',\n            this._editDetails\n        );\n        this.addEventListener(\n            this.getElement(selectors.DISCUSSIONMODALTRIGGER),\n            'click',\n            this._updateDiscussion\n        );\n        this.addEventListener(\n            this.getElement(selectors.DISCUSSIONSHOW, this.id),\n            'click',\n            this._updateDiscussion\n        );\n        this.addEventListener(\n            this.getElement(selectors.DISCUSSIONSEND),\n            'click',\n            this._sendMessage\n        );\n        this.addEventListener(\n            this.getElement(selectors.HISTORYMODALTRIGGER),\n            'click',\n            this._updateHistory\n        );\n        this.addEventListener(\n            this.getElement(selectors.MOVEMODALTRIGGER),\n            'click',\n            this._showMoveModal\n        );\n        this.addEventListener(\n            this.getElement(selectors.PUSHCARD),\n            'click',\n            this._pushCardConfirm\n        );\n        this.addEventListener(\n            this.getElement(selectors.DETAILBUTTON),\n            'click',\n            this._showDetailsModal\n        );\n\n        this.draggable = false;\n        this.dragdrop = new DragDrop(this);\n        this.checkEditing(state);\n        this.boardid = state.board.id;\n        this.cmid = state.common.id;\n        this.userid = state.board.userid;\n        this.groupid = state.board.groupid;\n        this._dueDateFormat();\n    }\n\n    /**\n     * Show modal to move a column.\n     */\n    _showMoveModal() {\n        let data = exporter.exportStateForTemplate(this.reactive.state);\n        data.cardid = this.id;\n        data.kanbancolumn = this.reactive.state.cards.get(this.id).kanban_column;\n        Str.get_strings([\n            {key: 'movecard', component: 'mod_kanban'},\n            {key: 'move', component: 'core'},\n        ]).then((strings) => {\n            return saveCancel(\n                strings[0],\n                Templates.render('mod_kanban/movemodal', data),\n                strings[1],\n                () => {\n                    let column = document.querySelector(selectors.MOVECARDCOLUMN + `[data-id=\"${this.id}\"]`).value;\n                    let aftercard = document.querySelector(selectors.MOVECARDAFTERCARD + `[data-id=\"${this.id}\"]`).value;\n                    this.reactive.dispatch('moveCard', this.id, column, aftercard);\n                }\n            );\n        }).catch((error) => Log.debug(error));\n    }\n\n    /**\n     * Show modal with card details.\n     * @param {*} event\n     */\n    _showDetailsModal(event) {\n        let id = this.id;\n        if (event.target.dataset.id !== undefined) {\n            id = event.target.dataset.id;\n        }\n\n        let data = exporter.exportCard(this.reactive.state, id);\n        let title = this.reactive.state.common.usenumbers ? '#' + data.number + ' ' + data.title : data.title;\n\n        alert(\n            title,\n            Templates.render('mod_kanban/descriptionmodal', data),\n            getString('close', 'form')\n        ).then((modal) => {\n            modal.modal[0].addEventListener(ModalEvents.bodyRendered, () => {\n                document.querySelectorAll(selectors.CARDNUMBER).forEach((el) => {\n                    this.removeEventListener(el, 'click', this._clickDetailsButton);\n                    this.addEventListener(el, 'click', this._clickDetailsButton);\n                });\n            });\n            return true;\n        }).catch((error) => Log.debug(error));\n    }\n\n    /**\n     * Simulate click on details button.\n     * @param {*} event\n     */\n    _clickDetailsButton(event) {\n        document.querySelector(\n            selectors.CARD + `[data-number=\"${event.target.dataset.id}\"]` + ' ' + selectors.DETAILBUTTON\n        ).click();\n    }\n\n    /**\n     * Display confirmation modal for pushing a card.\n     * @param {*} event\n     */\n    _pushCardConfirm(event) {\n        Str.get_strings([\n            {key: 'pushcard', component: 'mod_kanban'},\n            {key: 'pushcardconfirm', component: 'mod_kanban'},\n            {key: 'copy', component: 'core'},\n        ]).then((strings) => {\n            return saveCancel(\n                strings[0],\n                strings[1],\n                strings[2],\n                () => {\n                    this._pushCard(event);\n                }\n            );\n        }).catch((error) => Log.debug(error));\n    }\n\n    /**\n     * Display confirmation modal for deleting a card.\n     * @param {*} event\n     */\n    _removeConfirm(event) {\n        Str.get_strings([\n            {key: 'deletecard', component: 'mod_kanban'},\n            {key: 'deletecardconfirm', component: 'mod_kanban'},\n            {key: 'delete', component: 'core'},\n        ]).then((strings) => {\n            return saveCancel(\n                strings[0],\n                strings[1],\n                strings[2],\n                () => {\n                    this._removeCard(event);\n                }\n            );\n        }).catch((error) => Log.debug(error));\n    }\n\n    /**\n     * Display confirmation modal for deleting a discussion message.\n     * @param {*} event\n     */\n    _removeMessageConfirm(event) {\n        Str.get_strings([\n            {key: 'deletemessage', component: 'mod_kanban'},\n            {key: 'deletemessageconfirm', component: 'mod_kanban'},\n            {key: 'delete', component: 'core'},\n        ]).then((strings) => {\n            return saveCancel(\n                strings[0],\n                strings[1],\n                strings[2],\n                () => {\n                    this._removeMessage(event);\n                }\n            );\n        }).catch((error) => Log.debug(error));\n    }\n\n    /**\n     * Dispatch event to add a message to discussion.\n     */\n    _sendMessage() {\n        let el = this.getElement(selectors.DISCUSSIONINPUT);\n        let message = el.value.trim();\n        if (message != '') {\n            this.reactive.dispatch('sendDiscussionMessage', this.id, message);\n            el.value = '';\n        }\n    }\n\n    /**\n     * Dispatch event to update the discussion data.\n     */\n    _updateDiscussion() {\n        this.getElement(selectors.DISCUSSIONMODAL).classList.add('mod_kanban_loading');\n        this.reactive.dispatch('getDiscussionUpdates', this.id);\n    }\n\n    /**\n     * Called when discussion was updated.\n     */\n    async _discussionUpdated() {\n        let data = {\n            discussions: exporter.exportDiscussion(this.reactive.state, this.id)\n        };\n        Templates.renderForPromise('mod_kanban/discussionmessages', data).then(({html}) => {\n            this.getElement(selectors.DISCUSSION, this.id).innerHTML = html;\n            this.getElement(selectors.DISCUSSIONMODAL, this.id).classList.remove('mod_kanban_loading');\n            let el = this.getElement(selectors.DISCUSSIONMESSAGES);\n            // Scroll down to latest message.\n            el.scrollTop = el.scrollHeight;\n            data.discussions.forEach((d) => {\n                if (d.candelete) {\n                    this.addEventListener(this.getElement(selectors.DELETEMESSAGE, d.id), 'click', this._removeMessageConfirm);\n                }\n            });\n            return true;\n        }).catch((error) => displayException(error));\n    }\n\n    /**\n     * Dispatch event to update the history data.\n     */\n    _updateHistory() {\n        this.getElement(selectors.HISTORYMODAL).classList.add('mod_kanban_loading');\n        this.reactive.dispatch('getHistoryUpdates', this.id);\n    }\n\n    /**\n     * Called when history was updated.\n     */\n    async _historyUpdated() {\n        let data = {\n            historyitems: exporter.exportHistory(this.reactive.state, this.id)\n        };\n        Templates.renderForPromise('mod_kanban/historyitems', data).then(({html}) => {\n            this.getElement(selectors.HISTORY, this.id).innerHTML = html;\n            this.getElement(selectors.HISTORYMODAL).classList.remove('mod_kanban_loading');\n            // Scroll down to latest history item.\n            let el = this.getElement(selectors.HISTORYITEMS);\n            el.scrollTop = el.scrollHeight;\n            return true;\n        }).catch((error) => displayException(error));\n    }\n\n    /**\n     * Dispatch event to assign the current user to the card.\n     * @param {*} event\n     */\n    _assignSelf(event) {\n        let target = event.target.closest(selectors.ASSIGNSELF);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('assignUser', data.id);\n    }\n\n    /**\n     * Dispatch event to add a card after this card.\n     * @param {*} event\n     */\n    _addCard(event) {\n        document.activeElement.blur();\n        let target = event.target.closest(selectors.ADDCARD);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('addCard', data.columnid, data.id);\n    }\n\n    /**\n     * Called when card is updated.\n     * @param {*} param0\n     */\n    async _cardUpdated({element}) {\n        const card = this.getElement();\n        // Card was moved to another column. Move the element to new card (right position is handled by column component).\n        if (card.dataset.columnid != element.kanban_column) {\n            const col = document.querySelector(selectors.COLUMNINNER + '[data-id=\"' + element.kanban_column + '\"]');\n            col.appendChild(card);\n            this.getElement(selectors.ADDCARD, this.id).setAttribute('data-columnid', element.kanban_column);\n            card.setAttribute('data-columnid', element.kanban_column);\n        }\n        const assignees = this.getElement(selectors.ASSIGNEES, this.id);\n        const assignedUsers = this.getElements(selectors.ASSIGNEDUSER, this.id);\n        const userids = [...assignedUsers].map(v => {\n            return v.dataset.userid;\n        });\n        // Update assignees.\n        if (element.assignees !== undefined) {\n            const additional = element.assignees.filter(x => !userids.includes(x));\n            // Remove all elements that represent users that are no longer assigned to this card.\n            if (assignedUsers !== null) {\n                assignedUsers.forEach(assignedUser => {\n                    if (!element.assignees.includes(assignedUser.dataset.userid)) {\n                        assignedUser.parentNode.removeChild(assignedUser);\n                    }\n                });\n            }\n            this.toggleClass(element.assignees.length == 0, 'mod_kanban_unassigned');\n            // Add new assignees.\n            if (element.assignees.length > 0) {\n                additional.forEach(async user => {\n                    let userdata = this.reactive.state.users.get(user);\n                    let data = Object.assign({cardid: element.id}, userdata);\n                    data = Object.assign(data, exporter.exportCapabilities(this.reactive.state));\n                    Templates.renderForPromise('mod_kanban/user', data).then(({html, js}) => {\n                        Templates.appendNodeContents(assignees, html, js);\n                        return true;\n                    }).catch((error) => displayException(error));\n                });\n            }\n        }\n        this.toggleClass(element.selfassigned, 'mod_kanban_selfassigned');\n        // Set card completion state.\n        this.toggleClass(element.completed == 1, 'mod_kanban_closed');\n        // Update title (also in modals).\n        if (element.title !== undefined) {\n            // For Moodle inplace editing title is once needed plain and once with html entities encoded.\n            // This avoids double encoding of html entities as the value of \"data-value\" is exactly what is shown\n            // in the input field when clicking on the inplace editable.\n            let doc = new DOMParser().parseFromString(element.title, 'text/html');\n            this.getElement(selectors.INPLACEEDITABLE).setAttribute('data-value', doc.documentElement.textContent);\n            this.getElement(selectors.INPLACEEDITABLE).querySelector('a').innerHTML = element.title;\n            this.getElement(selectors.DISCUSSIONMODALTITLE).innerHTML = element.title;\n        }\n        this.toggleClass(element.hasdescription, 'mod_kanban_hasdescription');\n        this.toggleClass(element.hasattachment, 'mod_kanban_hasattachment');\n        // Update due date.\n        if (element.duedate !== undefined) {\n            this.getElement(selectors.DUEDATE).setAttribute('data-date', element.duedate);\n            this._dueDateFormat();\n        }\n        this.toggleClass(element.discussion, 'mod_kanban_hasdiscussion');\n        // Only option for now is background color.\n        if (element.options !== undefined) {\n            let options = JSON.parse(element.options);\n            if (options.background === undefined) {\n                this.getElement().removeAttribute('style');\n            } else {\n                this.getElement().setAttribute('style', 'background-color: ' + options.background);\n            }\n        }\n        // Enable/disable dragging and inplace editing (e.g. if user is not assigned to the card anymore).\n        this.checkEditing();\n    }\n\n    /**\n     * Delete this card.\n     */\n    _cardDeleted() {\n        this.destroy();\n    }\n\n    /**\n     * Dispatch event to remove this card.\n     * @param {*} event\n     */\n    _removeCard(event) {\n        let target = event.target.closest(selectors.DELETECARD);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('deleteCard', data.id);\n    }\n\n    /**\n     * Dispatch event to push this card.\n     * @param {*} event\n     */\n    _pushCard(event) {\n        let target = event.target.closest(selectors.PUSHCARD);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('pushCard', data.id);\n    }\n\n    /**\n     * Dispatch event to remove this card.\n     * @param {*} event\n     */\n    _removeMessage(event) {\n        let target = event.target.closest(selectors.DELETEMESSAGE);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('deleteMessage', data.id);\n    }\n\n    /**\n     * Dispatch event to complete this card.\n     * @param {*} event\n     */\n    _completeCard(event) {\n        let target = event.target.closest(selectors.COMPLETE);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('completeCard', data.id);\n    }\n\n    /**\n     * Dispatch event to complete this card.\n     * @param {*} event\n     */\n    _uncompleteCard(event) {\n        let target = event.target.closest(selectors.UNCOMPLETE);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('uncompleteCard', data.id);\n    }\n\n    /**\n     * Remove all subcomponents dependencies.\n     */\n    destroy() {\n        if (this.dragdrop !== undefined) {\n            this.dragdrop.unregister();\n        }\n    }\n\n    /**\n     * Get the draggable data of this component.\n     * @returns {object}\n     */\n    getDraggableData() {\n        return {\n            id: this.id,\n            type: 'card',\n        };\n    }\n\n    /**\n     * Conditionally enable / disable dragging and inplace editing.\n     * @param {*} state\n     */\n    checkEditing(state) {\n        if (state === undefined) {\n            state = this.reactive.stateManager.state;\n        }\n        if (state.cards.get(this.id).canedit) {\n            this.draggable = true;\n            this.dragdrop.setDraggable(true);\n        } else {\n            this.draggable = false;\n            this.dragdrop.setDraggable(false);\n        }\n        if (state.cards.get(this.id).completed != 1 && state.cards.get(this.id).canedit) {\n            this.getElement(selectors.INPLACEEDITABLE).setAttribute('data-inplaceeditable', '1');\n        } else {\n            this.getElement(selectors.INPLACEEDITABLE).removeAttribute('data-inplaceeditable');\n        }\n\n        this.toggleClass(state.cards.get(this.id).canedit, 'mod_kanban_canedit');\n    }\n\n    /**\n     * Validate draggable data.\n     * @param {object} dropdata\n     * @returns {boolean} if the data is valid for this drop-zone.\n     */\n    validateDropData(dropdata) {\n        return dropdata?.type == 'card';\n    }\n\n    /**\n     * Executed when a valid dropdata is dropped over the drop-zone.\n     * @param {object} dropdata\n     */\n    drop(dropdata) {\n        if (dropdata.id != this.id) {\n            let newcolumn = this.getElement(selectors.ADDCARD, this.id).dataset.columnid;\n            let aftercard = this.id;\n            this.reactive.dispatch('moveCard', dropdata.id, newcolumn, aftercard);\n        }\n    }\n\n    /**\n     * Dispatch event to unassign the current user.\n     * @param {*} event\n     */\n    _unassignSelf(event) {\n        let target = event.target.closest(selectors.UNASSIGNSELF);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('unassignUser', data.id);\n    }\n\n    /**\n     * Show modal form to edit card details.\n     * @param {*} event\n     */\n    _editDetails(event) {\n        event.preventDefault();\n\n        const modalForm = new ModalForm({\n            formClass: \"mod_kanban\\\\form\\\\edit_card_form\",\n            args: {\n                id: this.id,\n                boardid: this.boardid,\n                cmid: this.cmid,\n                groupid: this.groupid,\n                userid: this.userid\n            },\n            modalConfig: {title: getString('editcard', 'mod_kanban')},\n            returnFocus: this.getElement(),\n        });\n        this.addEventListener(modalForm, modalForm.events.FORM_SUBMITTED, this._updateCard);\n        modalForm.show();\n    }\n\n    /**\n     * Dispatch an event to update card data from the detail modal.\n     * @param {*} event\n     */\n    _updateCard(event) {\n        this.reactive.dispatch('processUpdates', event.detail);\n    }\n\n    /**\n     * Update relative time.\n     * @param {int} timestamp\n     * @returns {string}\n     */\n    updateRelativeTime(timestamp) {\n        let elapsed = new Date(timestamp) - new Date();\n        for (var u in this._units) {\n            if (Math.abs(elapsed) > this._units[u] || u == 'second') {\n                return this.rtf.format(Math.round(elapsed / this._units[u]), u);\n            }\n        }\n        return '';\n    }\n\n    /**\n     * Format due date using relative time.\n     */\n    _dueDateFormat() {\n        // Convert timestamp to ms.\n        let duedate = this.getElement(selectors.DUEDATE).dataset.date * 1000;\n        if (duedate > 0) {\n            let element = this.getElement(selectors.DUEDATE);\n            element.innerHTML = this.updateRelativeTime(duedate);\n            if (duedate < new Date().getTime()) {\n                element.classList.add('mod_kanban_overdue');\n            } else {\n                element.classList.remove('mod_kanban_overdue');\n            }\n        } else {\n            this.getElement(selectors.DUEDATE).innerHTML = '';\n        }\n    }\n}\n"],"names":["KanbanComponent","year","month","day","hour","minute","second","target","this","element","document","getElementById","create","id","dataset","getWatchers","watch","handler","_cardUpdated","_cardDeleted","_discussionUpdated","_historyUpdated","stateReady","state","lang","undefined","common","rtf","Intl","RelativeTimeFormat","numeric","e","addEventListener","getElement","selectors","DELETECARD","_removeConfirm","ADDCARD","_addCard","COMPLETE","_completeCard","UNCOMPLETE","_uncompleteCard","ASSIGNSELF","_assignSelf","UNASSIGNSELF","_unassignSelf","EDITDETAILS","_editDetails","DISCUSSIONMODALTRIGGER","_updateDiscussion","DISCUSSIONSHOW","DISCUSSIONSEND","_sendMessage","HISTORYMODALTRIGGER","_updateHistory","MOVEMODALTRIGGER","_showMoveModal","PUSHCARD","_pushCardConfirm","DETAILBUTTON","_showDetailsModal","draggable","dragdrop","DragDrop","checkEditing","boardid","board","cmid","userid","groupid","_dueDateFormat","data","exporter","exportStateForTemplate","reactive","cardid","kanbancolumn","cards","get","kanban_column","Str","get_strings","key","component","then","strings","Templates","render","column","querySelector","MOVECARDCOLUMN","value","aftercard","MOVECARDAFTERCARD","dispatch","catch","error","Log","debug","event","exportCard","title","usenumbers","number","modal","ModalEvents","bodyRendered","querySelectorAll","CARDNUMBER","forEach","el","removeEventListener","_clickDetailsButton","CARD","click","_pushCard","_removeCard","_removeMessageConfirm","_removeMessage","DISCUSSIONINPUT","message","trim","DISCUSSIONMODAL","classList","add","discussions","exportDiscussion","renderForPromise","_ref","html","DISCUSSION","innerHTML","remove","DISCUSSIONMESSAGES","scrollTop","scrollHeight","d","candelete","DELETEMESSAGE","HISTORYMODAL","historyitems","exportHistory","_ref2","HISTORY","HISTORYITEMS","closest","Object","assign","activeElement","blur","columnid","card","COLUMNINNER","appendChild","setAttribute","assignees","ASSIGNEES","assignedUsers","getElements","ASSIGNEDUSER","userids","map","v","additional","filter","x","includes","assignedUser","parentNode","removeChild","toggleClass","length","async","userdata","users","user","exportCapabilities","_ref4","js","appendNodeContents","selfassigned","completed","doc","DOMParser","parseFromString","INPLACEEDITABLE","documentElement","textContent","DISCUSSIONMODALTITLE","hasdescription","hasattachment","duedate","DUEDATE","discussion","options","JSON","parse","background","removeAttribute","destroy","unregister","getDraggableData","type","stateManager","canedit","setDraggable","validateDropData","dropdata","drop","newcolumn","preventDefault","modalForm","ModalForm","formClass","args","modalConfig","returnFocus","events","FORM_SUBMITTED","_updateCard","show","detail","updateRelativeTime","timestamp","elapsed","Date","u","_units","Math","abs","format","round","date","getTime"],"mappings":"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"}