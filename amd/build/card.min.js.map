{"version":3,"file":"card.min.js","sources":["../src/card.js"],"sourcesContent":["import {BaseComponent, DragDrop} from 'core/reactive';\nimport selectors from 'mod_kanban/selectors';\nimport exporter from 'mod_kanban/exporter';\nimport {saveCancel} from 'core/notification';\nimport {get_string as getString} from 'core/str';\n\n/**\n * Component representing a card in a kanban board.\n */\nexport default class extends BaseComponent {\n    /**\n     * Function to initialize component, called by mustache template.\n     * @param {*} target The id of the HTMLElement to attach to\n     * @returns {BaseComponent} New component attached to the HTMLElement represented by target\n     */\n    static init(target) {\n        let element = document.getElementById(target);\n        return new this({\n            element: element,\n        });\n    }\n\n    /**\n     * Called after the component was created.\n     */\n    create() {\n        this.id = this.element.dataset.id;\n    }\n\n    /**\n     * Watchers for this component.\n     * @returns {array} All watchers for this component\n     */\n    getWatchers() {\n        return [\n            {watch: `cards[${this.id}]:updated`, handler: this._cardUpdated},\n            {watch: `cards[${this.id}]:deleted`, handler: this._cardDeleted},\n        ];\n    }\n\n    /**\n     * Called once when state is ready, attaching event listeners and initializing drag and drop.\n     * @param {*} state The initial state\n     */\n    stateReady(state) {\n        this.addEventListener(\n            this.getElement(selectors.DELETECARD, this.id),\n            'click',\n            this._removeConfirm\n        );\n        this.addEventListener(\n            this.getElement(selectors.ADDCARD, this.id),\n            'click',\n            this._addCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.ASSIGNUSER, this.id),\n            'click',\n            this._assignUser\n        );\n        this.addEventListener(\n            this.getElement(selectors.COMPLETE, this.id),\n            'click',\n            this._completeCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.UNCOMPLETE, this.id),\n            'click',\n            this._uncompleteCard\n        );\n        if (state.cards.get(this.id).assignees.length > 0) {\n            this.getElement(selectors.ASSIGNUSER, this.id).classList.add('mod_kanban_hidden');\n        }\n        this.draggable = false;\n        this.dragdrop = new DragDrop(this);\n        this.checkDragging(state);\n    }\n\n    /**\n     * Display confirmation modal for deleting a card.\n     * @param {*} event\n     */\n    _removeConfirm(event) {\n        saveCancel(\n            getString('deletecard', 'mod_kanban'),\n            getString('deletecardconfirm', 'mod_kanban'),\n            getString('delete', 'core'),\n            () => {\n                this._removeCard(event);\n            }\n        );\n    }\n\n    /**\n     * Dispatch event to assign a user to the card.\n     * @param {*} event\n     */\n    _assignUser(event) {\n        let target = event.target.closest(selectors.ASSIGNUSER);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('assignUser', data.id);\n    }\n\n    /**\n     * Dispatch event to add a card after this card.\n     * @param {*} event\n     */\n    _addCard(event) {\n        let target = event.target.closest(selectors.ADDCARD);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('addCard', data.columnid, data.id);\n    }\n\n    /**\n     * Update this card.\n     * @param {*} param0\n     */\n    async _cardUpdated({element}) {\n        const card = this.getElement();\n        if (card.dataset.columnid != element.kanban_column) {\n            const col = document.querySelector(selectors.COLUMNINNER + '[data-id=\"' + element.kanban_column + '\"]');\n            col.appendChild(card);\n            this.getElement(selectors.ADDCARD, this.id).setAttribute('data-columnid', element.kanban_column);\n            card.setAttribute('data-columnid', element.kanban_column);\n        }\n        const assignees = this.getElement(selectors.ASSIGNEES, this.id);\n        const assignedUsers = this.getElements(selectors.ASSIGNEDUSER, this.id);\n        const userids = [...assignedUsers].map(v => {\n            return v.dataset.userid;\n        });\n        const additional = element.assignees.filter(x => !userids.includes(x));\n        if (assignedUsers !== null) {\n            assignedUsers.forEach(assignedUser => {\n                if (!element.assignees.includes(assignedUser.dataset.userid)) {\n                    assignedUser.parentNode.removeChild(assignedUser);\n                }\n            });\n        }\n        if (element.assignees.length > 0) {\n            additional.forEach(async user => {\n                let placeholder = document.createElement('div');\n                let userdata = this.reactive.state.users.get(user);\n                let data = Object.assign({cardid: element.id}, userdata);\n                data = Object.assign(data, exporter.exportCapabilities(this.reactive.state));\n                placeholder.setAttribute('data-id', element.id);\n                placeholder.setAttribute('data-action', 'unassign_user');\n                assignees.appendChild(placeholder);\n                const newcomponent = await this.renderComponent(placeholder, 'mod_kanban/user', data);\n                const newelement = newcomponent.getElement();\n                assignees.replaceChild(newelement, placeholder);\n                assignees.appendChild(this.getElement(selectors.ASSIGNUSER, this.id));\n            });\n            this.getElement(selectors.ASSIGNUSER, this.id).classList.add('mod_kanban_hidden');\n        } else {\n            this.getElement(selectors.ASSIGNUSER, this.id).classList.remove('mod_kanban_hidden');\n        }\n        if (element.complete) {\n            this.getElement(selectors.UNCOMPLETE).parentNode.classList.remove('hidden');\n            this.getElement(selectors.COMPLETE).parentNode.classList.add('hidden');\n            this.getElement(selectors.INPLACEEDITABLE).removeAttribute('data-inplaceeditable');\n        } else {\n            this.getElement(selectors.UNCOMPLETE).parentNode.classList.add('hidden');\n            this.getElement(selectors.COMPLETE).parentNode.classList.remove('hidden');\n            this.getElement(selectors.INPLACEEDITABLE).setAttribute('data-inplaceeditable', '1');\n        }\n        this.checkDragging();\n    }\n\n    /**\n     * Delete this card.\n     */\n    _cardDeleted() {\n        const el = this.getElement();\n        el.parentNode.removeChild(el);\n        this.destroy();\n    }\n\n    /**\n     * Dispatch event to remove this card.\n     * @param {*} event\n     */\n    _removeCard(event) {\n        let target = event.target.closest('[data-action=\"delete_card\"]');\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('deleteCard', data.id);\n    }\n\n    /**\n     * Dispatch event to complete this card.\n     * @param {*} event\n     */\n    _completeCard(event) {\n        let target = event.target.closest(selectors.COMPLETE);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('completeCard', data.id);\n    }\n\n    /**\n     * Dispatch event to complete this card.\n     * @param {*} event\n     */\n    _uncompleteCard(event) {\n        let target = event.target.closest(selectors.UNCOMPLETE);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('uncompleteCard', data.id);\n    }\n\n    /**\n     * Remove all subcomponents dependencies.\n     */\n    destroy() {\n        if (this.dragdrop !== undefined) {\n            this.dragdrop.unregister();\n        }\n    }\n\n    /**\n     * Get the draggable data of this component.\n     * @returns {object}\n     */\n    getDraggableData() {\n        return {\n            id: this.id,\n            type: 'card',\n        };\n    }\n\n    /**\n     * Conditionally enable / disable dragging.\n     * @param {*} state\n     */\n    checkDragging(state) {\n        if (state === undefined) {\n            state = this.reactive.stateManager.state;\n        }\n        if (state.capabilities.get('moveallcards').value ||\n            (state.capabilities.get('moveassignedcards').value &&\n            state.cards.get(this.id).assignees.includes(state.board.userid))) {\n            this.draggable = true;\n            this.dragdrop.setDraggable(true);\n        } else {\n            this.draggable = false;\n            this.dragdrop.setDraggable(false);\n        }\n    }\n\n    /**\n     * Validate draggable data.\n     * @param {object} dropdata\n     * @returns {boolean} if the data is valid for this drop-zone.\n     */\n    validateDropData(dropdata) {\n        return dropdata?.type == 'card';\n    }\n\n    /**\n     * Executed when a valid dropdata is dropped over the drop-zone.\n     * @param {object} dropdata\n     */\n    drop(dropdata) {\n        if (dropdata.id != this.id) {\n            let newcolumn = this.getElement(selectors.ADDCARD, this.id).dataset.columnid;\n            let aftercard = this.id;\n            this.reactive.dispatch('moveCard', dropdata.id, newcolumn, aftercard);\n        }\n    }\n}\n"],"names":["BaseComponent","target","this","element","document","getElementById","create","id","dataset","getWatchers","watch","handler","_cardUpdated","_cardDeleted","stateReady","state","addEventListener","getElement","selectors","DELETECARD","_removeConfirm","ADDCARD","_addCard","ASSIGNUSER","_assignUser","COMPLETE","_completeCard","UNCOMPLETE","_uncompleteCard","cards","get","assignees","length","classList","add","draggable","dragdrop","DragDrop","checkDragging","event","_removeCard","closest","data","Object","assign","reactive","dispatch","columnid","card","kanban_column","querySelector","COLUMNINNER","appendChild","setAttribute","ASSIGNEES","assignedUsers","getElements","ASSIGNEDUSER","userids","map","v","userid","additional","filter","x","includes","forEach","assignedUser","parentNode","removeChild","async","placeholder","createElement","userdata","users","user","cardid","exporter","exportCapabilities","newelement","renderComponent","replaceChild","remove","complete","INPLACEEDITABLE","removeAttribute","el","destroy","undefined","unregister","getDraggableData","type","stateManager","capabilities","value","board","setDraggable","validateDropData","dropdata","drop","newcolumn","aftercard"],"mappings":"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"}