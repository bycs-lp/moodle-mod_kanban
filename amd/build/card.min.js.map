{"version":3,"file":"card.min.js","sources":["../src/card.js"],"sourcesContent":["import {BaseComponent, DragDrop} from 'core/reactive';\nimport selectors from 'mod_kanban/selectors';\nimport exporter from 'mod_kanban/exporter';\n\n/**\n * Component representing a card in a kanban board.\n */\nexport default class extends BaseComponent {\n    /**\n     * Function to initialize component, called by mustache template.\n     * @param {*} target The id of the HTMLElement to attach to\n     * @returns {BaseComponent} New component attached to the HTMLElement represented by target\n     */\n    static init(target) {\n        let element = document.getElementById(target);\n        return new this({\n            element: element,\n        });\n    }\n\n    /**\n     * Called after the component was created.\n     */\n    create() {\n        this.id = this.element.dataset.id;\n    }\n\n    /**\n     * Watchers for this component.\n     * @returns {array} All watchers for this component\n     */\n    getWatchers() {\n        return [\n            {watch: `cards[${this.id}]:updated`, handler: this._cardUpdated},\n            {watch: `cards[${this.id}]:deleted`, handler: this._cardDeleted},\n        ];\n    }\n\n    /**\n     * Called once when state is ready, attaching event listeners and initializing drag and drop.\n     * @param {*} state The initial state\n     */\n    stateReady(state) {\n        this.addEventListener(\n            this.getElement(selectors.DELETECARD, this.id),\n            'click',\n            this._removeCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.ADDCARD, this.id),\n            'click',\n            this._addCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.ASSIGNUSER, this.id),\n            'click',\n            this._assignUser\n        );\n        if (state.cards.get(this.id).assignees.length > 0) {\n            this.getElement(selectors.ASSIGNUSER, this.id).classList.add('mod_kanban_hidden');\n        }\n        this.dragdrop = new DragDrop(this);\n    }\n\n    /**\n     * Dispatch event to assign a user to the card.\n     * @param {*} event\n     */\n    _assignUser(event) {\n        let target = event.target.closest(selectors.ASSIGNUSER);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('assignUser', data.id);\n    }\n\n    /**\n     * Dispatch event to add a card after this card.\n     * @param {*} event\n     */\n    _addCard(event) {\n        let target = event.target.closest(selectors.ADDCARD);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('addCard', data.columnid, data.id);\n    }\n\n    /**\n     * Update this card.\n     * @param {*} param0\n     */\n    async _cardUpdated({element}) {\n        const card = this.getElement();\n        if (card.dataset.columnid != element.kanban_column) {\n            const col = document.querySelector(selectors.COLUMNINNER + '[data-id=\"' + element.kanban_column + '\"]');\n            col.appendChild(card);\n            this.getElement(selectors.ADDCARD, this.id).setAttribute('data-columnid', element.kanban_column);\n            card.setAttribute('data-columnid', element.kanban_column);\n        }\n        const assignees = this.getElement(selectors.ASSIGNEES, this.id);\n        const assignedUsers = this.getElements(selectors.ASSIGNEDUSER, this.id);\n        const userids = [...assignedUsers].map(v => {\n            return v.dataset.userid;\n        });\n        const additional = element.assignees.filter(x => !userids.includes(x));\n        if (assignedUsers !== null) {\n            assignedUsers.forEach(assignedUser => {\n                if (!element.assignees.includes(assignedUser.dataset.userid)) {\n                    assignedUser.parentNode.removeChild(assignedUser);\n                }\n            });\n        }\n        if (element.assignees.length > 0) {\n            additional.forEach(async user => {\n                let placeholder = document.createElement('div');\n                let userdata = this.reactive.state.users.get(user);\n                let data = Object.assign({cardid: element.id}, userdata);\n                data = Object.assign(data, exporter.exportCapabilities(this.reactive.state));\n                placeholder.setAttribute('data-id', element.id);\n                placeholder.setAttribute('data-action', 'unassign_user');\n                assignees.appendChild(placeholder);\n                const newcomponent = await this.renderComponent(placeholder, 'mod_kanban/user', data);\n                const newelement = newcomponent.getElement();\n                assignees.replaceChild(newelement, placeholder);\n                assignees.appendChild(this.getElement(selectors.ASSIGNUSER, this.id));\n            });\n            this.getElement(selectors.ASSIGNUSER, this.id).classList.add('mod_kanban_hidden');\n        } else {\n            this.getElement(selectors.ASSIGNUSER, this.id).classList.remove('mod_kanban_hidden');\n        }\n    }\n\n    /**\n     * Delete this card.\n     */\n    _cardDeleted() {\n        const el = this.getElement();\n        el.parentNode.removeChild(el);\n        this.destroy();\n    }\n\n    /**\n     * Dispatch event to remove this card.\n     * @param {*} event\n     */\n    _removeCard(event) {\n        let target = event.target.closest('[data-action=\"delete_card\"]');\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('deleteCard', data.id);\n    }\n\n    /**\n     * Remove all subcomponents dependencies.\n     */\n    destroy() {\n        if (this.dragdrop !== undefined) {\n            this.dragdrop.unregister();\n        }\n    }\n\n    /**\n     * Get the draggable data of this component.\n     *\n     * @returns {Object} the draggable data.\n     */\n    getDraggableData() {\n        return {\n            id: this.id,\n            type: 'card',\n            height: this.getElement().clientHeight\n        };\n    }\n\n    /**\n     * Validate draggable data.\n     * @param {object} dropdata\n     * @returns {boolean} if the data is valid for this drop-zone.\n     */\n    validateDropData(dropdata) {\n        return dropdata?.type == 'card';\n    }\n\n    /**\n     * Executed when a valid dropdata is dropped over the drop-zone.\n     * @param {object} dropdata\n     */\n    drop(dropdata) {\n        if (dropdata.id != this.id) {\n            let newcolumn = this.getElement(selectors.ADDCARD, this.id).dataset.columnid;\n            let aftercard = this.id;\n            this.reactive.dispatch('moveCard', dropdata.id, newcolumn, aftercard);\n        }\n        this.getElement().removeAttribute('style');\n    }\n}\n"],"names":["BaseComponent","target","this","element","document","getElementById","create","id","dataset","getWatchers","watch","handler","_cardUpdated","_cardDeleted","stateReady","state","addEventListener","getElement","selectors","DELETECARD","_removeCard","ADDCARD","_addCard","ASSIGNUSER","_assignUser","cards","get","assignees","length","classList","add","dragdrop","DragDrop","event","closest","data","Object","assign","reactive","dispatch","columnid","card","kanban_column","querySelector","COLUMNINNER","appendChild","setAttribute","ASSIGNEES","assignedUsers","getElements","ASSIGNEDUSER","userids","map","v","userid","additional","filter","x","includes","forEach","assignedUser","parentNode","removeChild","async","placeholder","createElement","userdata","users","user","cardid","exporter","exportCapabilities","newelement","renderComponent","replaceChild","remove","el","destroy","undefined","unregister","getDraggableData","type","height","clientHeight","validateDropData","dropdata","drop","newcolumn","aftercard","removeAttribute"],"mappings":"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"}