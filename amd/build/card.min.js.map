{"version":3,"file":"card.min.js","sources":["../src/card.js"],"sourcesContent":["import {DragDrop} from 'core/reactive';\nimport selectors from 'mod_kanban/selectors';\nimport exporter from 'mod_kanban/exporter';\nimport {saveCancel} from 'core/notification';\nimport ModalForm from 'core_form/modalform';\nimport {get_string as getString} from 'core/str';\nimport {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\nimport KanbanComponent from 'mod_kanban/kanbancomponent';\n\n/**\n * Component representing a card in a kanban board.\n */\nexport default class extends KanbanComponent {\n    /**\n     * For relative time helper.\n     */\n    _units = {\n        year: 24 * 60 * 60 * 1000 * 365,\n        month: 24 * 60 * 60 * 1000 * 365 / 12,\n        day: 24 * 60 * 60 * 1000,\n        hour: 60 * 60 * 1000,\n        minute: 60 * 1000,\n        second: 1000\n    };\n\n    /**\n     * Function to initialize component, called by mustache template.\n     * @param {*} target The id of the HTMLElement to attach to\n     * @returns {BaseComponent} New component attached to the HTMLElement represented by target\n     */\n    static init(target) {\n        let element = document.getElementById(target);\n        return new this({\n            element: element,\n        });\n    }\n\n    /**\n     * Called after the component was created.\n     */\n    create() {\n        this.id = this.element.dataset.id;\n    }\n\n    /**\n     * Watchers for this component.\n     * @returns {array} All watchers for this component\n     */\n    getWatchers() {\n        return [\n            {watch: `cards[${this.id}]:updated`, handler: this._cardUpdated},\n            {watch: `cards[${this.id}]:deleted`, handler: this._cardDeleted},\n            {watch: `discussions:created`, handler: this._discussionUpdated},\n            {watch: `discussions:updated`, handler: this._discussionUpdated},\n            {watch: `discussions:deleted`, handler: this._discussionUpdated},\n            {watch: `history:created`, handler: this._historyUpdated},\n            {watch: `history:updated`, handler: this._historyUpdated},\n            {watch: `history:deleted`, handler: this._historyUpdated},\n        ];\n    }\n\n    /**\n     * Called once when state is ready, attaching event listeners and initializing drag and drop.\n     * @param {*} state The initial state\n     */\n    stateReady(state) {\n        let lang = 'en';\n        if (state.common.lang !== undefined) {\n            lang = state.common.lang;\n        }\n        this.rtf = new Intl.RelativeTimeFormat(lang, {numeric: 'auto'});\n\n        this.addEventListener(\n            this.getElement(selectors.DELETECARD, this.id),\n            'click',\n            this._removeConfirm\n        );\n        this.addEventListener(\n            this.getElement(selectors.ADDCARD, this.id),\n            'click',\n            this._addCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.COMPLETE, this.id),\n            'click',\n            this._completeCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.UNCOMPLETE, this.id),\n            'click',\n            this._uncompleteCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.ASSIGNSELF, this.id),\n            'click',\n            this._assignSelf\n        );\n        this.addEventListener(\n            this.getElement(selectors.UNASSIGNSELF, this.id),\n            'click',\n            this._unassignSelf\n        );\n        this.addEventListener(\n            this.getElement(selectors.EDITDETAILS, this.id),\n            'click',\n            this._editDetails\n        );\n        this.addEventListener(\n            this.getElement(selectors.DISCUSSIONMODALTRIGGER),\n            'click',\n            this._updateDiscussion\n        );\n        this.addEventListener(\n            this.getElement(selectors.DISCUSSIONSHOW, this.id),\n            'click',\n            this._updateDiscussion\n        );\n        this.addEventListener(\n            this.getElement(selectors.DISCUSSIONSEND),\n            'click',\n            this._sendMessage\n        );\n        this.addEventListener(\n            this.getElement(selectors.HISTORYMODALTRIGGER),\n            'click',\n            this._updateHistory\n        );\n\n        this.draggable = false;\n        this.dragdrop = new DragDrop(this);\n        this.checkDragging(state);\n        this.boardid = state.board.id;\n        this.cmid = state.common.id;\n        this.user = state.board.user;\n        this.groupid = state.board.groupid;\n        this._dueDateFormat();\n    }\n\n    /**\n     * Display confirmation modal for deleting a card.\n     * @param {*} event\n     */\n    _removeConfirm(event) {\n        saveCancel(\n            getString('deletecard', 'mod_kanban'),\n            getString('deletecardconfirm', 'mod_kanban'),\n            getString('delete', 'core'),\n            () => {\n                this._removeCard(event);\n            }\n        );\n    }\n\n    /**\n     * Display confirmation modal for deleting a discussion message.\n     * @param {*} event\n     */\n    _removeMessageConfirm(event) {\n        saveCancel(\n            getString('deletemessage', 'mod_kanban'),\n            getString('deletemessageconfirm', 'mod_kanban'),\n            getString('delete', 'core'),\n            () => {\n                this._removeMessage(event);\n            }\n        );\n    }\n\n    /**\n     * Dispatch event to add a message to discussion.\n     */\n    _sendMessage() {\n        let el = this.getElement(selectors.DISCUSSIONINPUT);\n        let message = el.value.trim();\n        if (message != '') {\n            this.reactive.dispatch('sendDiscussionMessage', this.id, message);\n            el.value = '';\n        }\n    }\n\n    /**\n     * Dispatch event to update the discussion data.\n     */\n    _updateDiscussion() {\n        this.getElement(selectors.DISCUSSIONMODAL).classList.add('mod_kanban_loading');\n        this.reactive.dispatch('getDiscussionUpdates', this.id);\n    }\n\n    async _discussionUpdated() {\n        let data = {\n            discussions: exporter.exportDiscussion(this.reactive.state, this.id)\n        };\n        Templates.renderForPromise('mod_kanban/discussionmessages', data).then(({html}) => {\n            this.getElement(selectors.DISCUSSION, this.id).innerHTML = html;\n            this.getElement(selectors.DISCUSSIONMODAL, this.id).classList.remove('mod_kanban_loading');\n            let el = this.getElement(selectors.DISCUSSIONMESSAGES);\n            el.scrollTop = el.scrollHeight;\n            data.discussions.forEach((d) => {\n                this.addEventListener(this.getElement(selectors.DELETEMESSAGE, d.id), 'click', this._removeMessageConfirm);\n            });\n            return true;\n        }).catch((error) => displayException(error));\n    }\n\n    /**\n     * Dispatch event to update the history data.\n     */\n    _updateHistory() {\n        this.getElement(selectors.HISTORYMODAL).classList.add('mod_kanban_loading');\n        this.reactive.dispatch('getHistoryUpdates', this.id);\n    }\n\n    async _historyUpdated() {\n        let data = {\n            historyitems: exporter.exportHistory(this.reactive.state, this.id)\n        };\n        Templates.renderForPromise('mod_kanban/historyitems', data).then(({html}) => {\n            this.getElement(selectors.HISTORY, this.id).innerHTML = html;\n            this.getElement(selectors.HISTORYMODAL).classList.remove('mod_kanban_loading');\n            let el = this.getElement(selectors.HISTORYITEMS);\n            el.scrollTop = el.scrollHeight;\n            return true;\n        }).catch((error) => displayException(error));\n    }\n\n    /**\n     * Dispatch event to assign the current user to the card.\n     * @param {*} event\n     */\n    _assignSelf(event) {\n        let target = event.target.closest(selectors.ASSIGNSELF);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('assignUser', data.id);\n    }\n\n    /**\n     * Dispatch event to add a card after this card.\n     * @param {*} event\n     */\n    _addCard(event) {\n        let target = event.target.closest(selectors.ADDCARD);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('addCard', data.columnid, data.id);\n    }\n\n    /**\n     * Update this card.\n     * @param {*} param0\n     */\n    async _cardUpdated({element}) {\n        const card = this.getElement();\n        if (card.dataset.columnid != element.kanban_column) {\n            const col = document.querySelector(selectors.COLUMNINNER + '[data-id=\"' + element.kanban_column + '\"]');\n            col.appendChild(card);\n            this.getElement(selectors.ADDCARD, this.id).setAttribute('data-columnid', element.kanban_column);\n            card.setAttribute('data-columnid', element.kanban_column);\n        }\n        const assignees = this.getElement(selectors.ASSIGNEES, this.id);\n        const assignedUsers = this.getElements(selectors.ASSIGNEDUSER, this.id);\n        const userids = [...assignedUsers].map(v => {\n            return v.dataset.userid;\n        });\n        if (element.assignees !== undefined) {\n            const additional = element.assignees.filter(x => !userids.includes(x));\n            if (assignedUsers !== null) {\n                assignedUsers.forEach(assignedUser => {\n                    if (!element.assignees.includes(assignedUser.dataset.userid)) {\n                        assignedUser.parentNode.removeChild(assignedUser);\n                    }\n                });\n            }\n            this.toggleClass(element.assignees.length == 0, 'mod_kanban_unassigned');\n            if (element.assignees.length > 0) {\n                additional.forEach(async user => {\n                    let userdata = this.reactive.state.users.get(user);\n                    let data = Object.assign({cardid: element.id}, userdata);\n                    data = Object.assign(data, exporter.exportCapabilities(this.reactive.state));\n                    Templates.renderForPromise('mod_kanban/user', data).then(({html, js}) => {\n                        Templates.appendNodeContents(assignees, html, js);\n                        return true;\n                    }).catch((error) => displayException(error));\n                });\n            }\n        }\n        this.toggleClass(element.selfassigned, 'mod_kanban_selfassigned');\n        if (element.completed !== undefined) {\n            this.toggleClass(element.completed == 1, 'mod_kanban_closed');\n            if (element.completed == 1) {\n                this.getElement(selectors.INPLACEEDITABLE).removeAttribute('data-inplaceeditable');\n            } else {\n                this.getElement(selectors.INPLACEEDITABLE).setAttribute('data-inplaceeditable', '1');\n            }\n        }\n        if (element.title !== undefined) {\n            this.getElement(selectors.INPLACEEDITABLE).setAttribute('data-value', element.title);\n            this.getElement(selectors.INPLACEEDITABLE).querySelector('a').innerHTML = element.title;\n            this.getElement(selectors.DESCRIPTIONMODALTITLE).innerHTML = element.title;\n            this.getElement(selectors.DISCUSSIONMODALTITLE).innerHTML = element.title;\n        }\n        if (element.description !== undefined) {\n            this.getElement(selectors.DESCRIPTIONMODALBODY).innerHTML = element.description;\n        }\n        if (element.attachments !== undefined) {\n            Templates.renderForPromise('mod_kanban/attachmentitems', {attachments: element.attachments}).then(({html}) => {\n                this.getElement(selectors.DESCRIPTIONMODALFOOTER).innerHTML = html;\n                return true;\n            }).catch((error) => displayException(error));\n        }\n        this.toggleClass(element.hasdescription, 'mod_kanban_hasdescription');\n        this.toggleClass(element.hasattachment, 'mod_kanban_hasattachment');\n        if (element.duedate !== undefined) {\n            this.getElement(selectors.DUEDATE).setAttribute('data-date', element.duedate);\n            this._dueDateFormat();\n        }\n        this.toggleClass(element.discussion, 'mod_kanban_hasdiscussion');\n        if (element.options !== undefined) {\n            let options = JSON.parse(element.options);\n            if (options.background === undefined) {\n                this.getElement().removeAttribute('style');\n            } else {\n                this.getElement().setAttribute('style', 'background-color: ' + options.background);\n            }\n        }\n        if (element.highlight !== undefined && element.highlight) {\n            this.getElement().classList.add('mod_kanban_updated');\n            setTimeout(() => this.getElement().classList.remove('mod_kanban_updated'), 3000);\n        }\n        this.checkDragging();\n    }\n\n    /**\n     * Delete this card.\n     */\n    _cardDeleted() {\n        const el = this.getElement();\n        el.parentNode.removeChild(el);\n        this.destroy();\n    }\n\n    /**\n     * Dispatch event to remove this card.\n     * @param {*} event\n     */\n    _removeCard(event) {\n        let target = event.target.closest(selectors.DELETECARD);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('deleteCard', data.id);\n    }\n\n    /**\n     * Dispatch event to remove this card.\n     * @param {*} event\n     */\n    _removeMessage(event) {\n        let target = event.target.closest(selectors.DELETEMESSAGE);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('deleteMessage', data.id);\n    }\n\n    /**\n     * Dispatch event to complete this card.\n     * @param {*} event\n     */\n    _completeCard(event) {\n        let target = event.target.closest(selectors.COMPLETE);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('completeCard', data.id);\n    }\n\n    /**\n     * Dispatch event to complete this card.\n     * @param {*} event\n     */\n    _uncompleteCard(event) {\n        let target = event.target.closest(selectors.UNCOMPLETE);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('uncompleteCard', data.id);\n    }\n\n    /**\n     * Remove all subcomponents dependencies.\n     */\n    destroy() {\n        if (this.dragdrop !== undefined) {\n            this.dragdrop.unregister();\n        }\n    }\n\n    /**\n     * Get the draggable data of this component.\n     * @returns {object}\n     */\n    getDraggableData() {\n        return {\n            id: this.id,\n            type: 'card',\n        };\n    }\n\n    /**\n     * Conditionally enable / disable dragging.\n     * @param {*} state\n     */\n    checkDragging(state) {\n        if (state === undefined) {\n            state = this.reactive.stateManager.state;\n        }\n        if (state.capabilities.get('moveallcards').value ||\n            (state.capabilities.get('moveassignedcards').value &&\n            state.cards.get(this.id).assignees.includes(state.common.userid))) {\n            this.draggable = true;\n            this.dragdrop.setDraggable(true);\n        } else {\n            this.draggable = false;\n            this.dragdrop.setDraggable(false);\n        }\n    }\n\n    /**\n     * Validate draggable data.\n     * @param {object} dropdata\n     * @returns {boolean} if the data is valid for this drop-zone.\n     */\n    validateDropData(dropdata) {\n        return dropdata?.type == 'card';\n    }\n\n    /**\n     * Executed when a valid dropdata is dropped over the drop-zone.\n     * @param {object} dropdata\n     */\n    drop(dropdata) {\n        if (dropdata.id != this.id) {\n            let newcolumn = this.getElement(selectors.ADDCARD, this.id).dataset.columnid;\n            let aftercard = this.id;\n            this.reactive.dispatch('moveCard', dropdata.id, newcolumn, aftercard);\n        }\n    }\n\n    /**\n     * Dispatch event to unassign the current user.\n     * @param {*} event\n     */\n    _unassignSelf(event) {\n        let target = event.target.closest(selectors.UNASSIGNSELF);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('unassignUser', data.id);\n    }\n\n    /**\n     * Show modal form to edit card details.\n     * @param {*} event\n     */\n    _editDetails(event) {\n        event.preventDefault();\n\n        const modalForm = new ModalForm({\n            formClass: \"mod_kanban\\\\form\\\\edit_card_form\",\n            args: {\n                id: this.id,\n                boardid: this.boardid,\n                cmid: this.cmid,\n                groupid: this.groupid,\n                userid: this.user\n            },\n            modalConfig: {title: getString('editcard', 'mod_kanban')},\n            returnFocus: this.getElement(),\n        });\n        this.addEventListener(modalForm, modalForm.events.FORM_SUBMITTED, this._updateCard);\n        modalForm.show();\n    }\n\n    /**\n     * Dispatch an event to update card data from the detail modal.\n     * @param {*} event\n     */\n    _updateCard(event) {\n        this.reactive.dispatch('processUpdates', event.detail);\n    }\n\n    /**\n     * Update relative time.\n     * @param {int} timestamp\n     * @returns {string}\n     */\n    updateRelativeTime(timestamp) {\n        let elapsed = new Date(timestamp) - new Date();\n        for (var u in this._units) {\n            if (Math.abs(elapsed) > this._units[u] || u == 'second') {\n                return this.rtf.format(Math.round(elapsed / this._units[u]), u);\n            }\n        }\n        return '';\n    }\n\n    /**\n     * Format due date.\n     */\n    _dueDateFormat() {\n        // Convert timestamp to ms.\n        let duedate = this.getElement(selectors.DUEDATE).dataset.date * 1000;\n        if (duedate > 0) {\n            let element = this.getElement(selectors.DUEDATE);\n            element.innerHTML = this.updateRelativeTime(duedate);\n            if (duedate < new Date().getTime()) {\n                element.classList.add('mod_kanban_overdue');\n            } else {\n                element.classList.remove('mod_kanban_overdue');\n            }\n        } else {\n            this.getElement(selectors.DUEDATE).innerHTML = '';\n        }\n    }\n}\n"],"names":["KanbanComponent","year","month","day","hour","minute","second","target","this","element","document","getElementById","create","id","dataset","getWatchers","watch","handler","_cardUpdated","_cardDeleted","_discussionUpdated","_historyUpdated","stateReady","state","lang","undefined","common","rtf","Intl","RelativeTimeFormat","numeric","addEventListener","getElement","selectors","DELETECARD","_removeConfirm","ADDCARD","_addCard","COMPLETE","_completeCard","UNCOMPLETE","_uncompleteCard","ASSIGNSELF","_assignSelf","UNASSIGNSELF","_unassignSelf","EDITDETAILS","_editDetails","DISCUSSIONMODALTRIGGER","_updateDiscussion","DISCUSSIONSHOW","DISCUSSIONSEND","_sendMessage","HISTORYMODALTRIGGER","_updateHistory","draggable","dragdrop","DragDrop","checkDragging","boardid","board","cmid","user","groupid","_dueDateFormat","event","_removeCard","_removeMessageConfirm","_removeMessage","el","DISCUSSIONINPUT","message","value","trim","reactive","dispatch","DISCUSSIONMODAL","classList","add","data","discussions","exporter","exportDiscussion","renderForPromise","then","_ref","html","DISCUSSION","innerHTML","remove","DISCUSSIONMESSAGES","scrollTop","scrollHeight","forEach","d","DELETEMESSAGE","catch","error","HISTORYMODAL","historyitems","exportHistory","_ref2","HISTORY","HISTORYITEMS","closest","Object","assign","columnid","card","kanban_column","querySelector","COLUMNINNER","appendChild","setAttribute","assignees","ASSIGNEES","assignedUsers","getElements","ASSIGNEDUSER","userids","map","v","userid","additional","filter","x","includes","assignedUser","parentNode","removeChild","toggleClass","length","async","userdata","users","get","cardid","exportCapabilities","_ref4","js","appendNodeContents","selfassigned","completed","INPLACEEDITABLE","removeAttribute","title","DESCRIPTIONMODALTITLE","DISCUSSIONMODALTITLE","description","DESCRIPTIONMODALBODY","attachments","_ref5","DESCRIPTIONMODALFOOTER","hasdescription","hasattachment","duedate","DUEDATE","discussion","options","JSON","parse","background","highlight","setTimeout","destroy","unregister","getDraggableData","type","stateManager","capabilities","cards","setDraggable","validateDropData","dropdata","drop","newcolumn","aftercard","preventDefault","modalForm","ModalForm","formClass","args","modalConfig","returnFocus","events","FORM_SUBMITTED","_updateCard","show","detail","updateRelativeTime","timestamp","elapsed","Date","u","_units","Math","abs","format","round","date","getTime"],"mappings":"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"}