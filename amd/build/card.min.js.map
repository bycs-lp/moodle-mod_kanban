{"version":3,"file":"card.min.js","sources":["../src/card.js"],"sourcesContent":["import {DragDrop} from 'core/reactive';\nimport selectors from 'mod_kanban/selectors';\nimport exporter from 'mod_kanban/exporter';\nimport {exception as displayException, saveCancel} from 'core/notification';\nimport ModalForm from 'core_form/modalform';\nimport * as Str from 'core/str';\nimport {get_string as getString} from 'core/str';\nimport Templates from 'core/templates';\nimport KanbanComponent from 'mod_kanban/kanbancomponent';\nimport Log from 'core/log';\n\n\n/**\n * Component representing a card in a kanban board.\n */\nexport default class extends KanbanComponent {\n    /**\n     * For relative time helper.\n     */\n    _units = {\n        year: 24 * 60 * 60 * 1000 * 365,\n        month: 24 * 60 * 60 * 1000 * 365 / 12,\n        day: 24 * 60 * 60 * 1000,\n        hour: 60 * 60 * 1000,\n        minute: 60 * 1000,\n        second: 1000\n    };\n\n    /**\n     * Function to initialize component, called by mustache template.\n     * @param {*} target The id of the HTMLElement to attach to\n     * @returns {BaseComponent} New component attached to the HTMLElement represented by target\n     */\n    static init(target) {\n        let element = document.getElementById(target);\n        return new this({\n            element: element,\n        });\n    }\n\n    /**\n     * Called after the component was created.\n     */\n    create() {\n        this.id = this.element.dataset.id;\n    }\n\n    /**\n     * Watchers for this component.\n     * @returns {array} All watchers for this component\n     */\n    getWatchers() {\n        return [\n            {watch: `cards[${this.id}]:updated`, handler: this._cardUpdated},\n            {watch: `cards[${this.id}]:deleted`, handler: this._cardDeleted},\n            {watch: `discussions:created`, handler: this._discussionUpdated},\n            {watch: `discussions:updated`, handler: this._discussionUpdated},\n            {watch: `discussions:deleted`, handler: this._discussionUpdated},\n            {watch: `history:created`, handler: this._historyUpdated},\n            {watch: `history:updated`, handler: this._historyUpdated},\n            {watch: `history:deleted`, handler: this._historyUpdated},\n        ];\n    }\n\n    /**\n     * Called once when state is ready (also if component is registered after initial state was set), attaching event\n     * isteners and initializing drag and drop.\n     * @param {*} state The initial state\n     */\n    stateReady(state) {\n        // Get language for relative time formatting.\n        let lang = 'en';\n        if (state.common.lang !== undefined) {\n            lang = state.common.lang;\n        }\n        this.rtf = new Intl.RelativeTimeFormat(lang, {numeric: 'auto'});\n\n        this.addEventListener(\n            this.getElement(selectors.DELETECARD, this.id),\n            'click',\n            this._removeConfirm\n        );\n        this.addEventListener(\n            this.getElement(selectors.ADDCARD, this.id),\n            'click',\n            this._addCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.COMPLETE, this.id),\n            'click',\n            this._completeCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.UNCOMPLETE, this.id),\n            'click',\n            this._uncompleteCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.ASSIGNSELF, this.id),\n            'click',\n            this._assignSelf\n        );\n        this.addEventListener(\n            this.getElement(selectors.UNASSIGNSELF, this.id),\n            'click',\n            this._unassignSelf\n        );\n        this.addEventListener(\n            this.getElement(selectors.EDITDETAILS, this.id),\n            'click',\n            this._editDetails\n        );\n        this.addEventListener(\n            this.getElement(selectors.DISCUSSIONMODALTRIGGER),\n            'click',\n            this._updateDiscussion\n        );\n        this.addEventListener(\n            this.getElement(selectors.DISCUSSIONSHOW, this.id),\n            'click',\n            this._updateDiscussion\n        );\n        this.addEventListener(\n            this.getElement(selectors.DISCUSSIONSEND),\n            'click',\n            this._sendMessage\n        );\n        this.addEventListener(\n            this.getElement(selectors.HISTORYMODALTRIGGER),\n            'click',\n            this._updateHistory\n        );\n        this.addEventListener(\n            this.getElement(selectors.MOVEMODALTRIGGER),\n            'click',\n            this._showMoveModal\n        );\n        this.addEventListener(\n            this.getElement(selectors.PUSHCARD),\n            'click',\n            this._pushCardConfirm\n        );\n\n        this.draggable = false;\n        this.dragdrop = new DragDrop(this);\n        this.checkDragging(state);\n        this.boardid = state.board.id;\n        this.cmid = state.common.id;\n        this.userid = state.board.userid;\n        this.groupid = state.board.groupid;\n        this._dueDateFormat();\n    }\n\n    /**\n     * Show modal to move a column.\n     */\n    _showMoveModal() {\n        let data = exporter.exportStateForTemplate(this.reactive.state);\n        data.cardid = this.id;\n        data.kanbancolumn = this.reactive.state.cards.get(this.id).kanban_column;\n        Str.get_strings([\n            {key: 'movecard', component: 'mod_kanban'},\n            {key: 'move', component: 'core'},\n        ]).then((strings) => {\n            return saveCancel(\n                strings[0],\n                Templates.render('mod_kanban/movemodal', data),\n                strings[1],\n                () => {\n                    let column = document.querySelector(selectors.MOVECARDCOLUMN + `[data-id=\"${this.id}\"]`).value;\n                    let aftercard = document.querySelector(selectors.MOVECARDAFTERCARD + `[data-id=\"${this.id}\"]`).value;\n                    this.reactive.dispatch('moveCard', this.id, column, aftercard);\n                }\n            );\n        }).catch((error) => Log.debug(error));\n    }\n\n    /**\n     * Display confirmation modal for pushing a card.\n     * @param {*} event\n     */\n    _pushCardConfirm(event) {\n        Str.get_strings([\n            {key: 'pushcard', component: 'mod_kanban'},\n            {key: 'pushcardconfirm', component: 'mod_kanban'},\n            {key: 'copy', component: 'core'},\n        ]).then((strings) => {\n            return saveCancel(\n                strings[0],\n                strings[1],\n                strings[2],\n                () => {\n                    this._pushCard(event);\n                }\n            );\n        }).catch((error) => Log.debug(error));\n    }\n\n    /**\n     * Display confirmation modal for deleting a card.\n     * @param {*} event\n     */\n    _removeConfirm(event) {\n        Str.get_strings([\n            {key: 'deletecard', component: 'mod_kanban'},\n            {key: 'deletecardconfirm', component: 'mod_kanban'},\n            {key: 'delete', component: 'core'},\n        ]).then((strings) => {\n            return saveCancel(\n                strings[0],\n                strings[1],\n                strings[2],\n                () => {\n                    this._removeCard(event);\n                }\n            );\n        }).catch((error) => Log.debug(error));\n    }\n\n    /**\n     * Display confirmation modal for deleting a discussion message.\n     * @param {*} event\n     */\n    _removeMessageConfirm(event) {\n        Str.get_strings([\n            {key: 'deletemessage', component: 'mod_kanban'},\n            {key: 'deletemessageconfirm', component: 'mod_kanban'},\n            {key: 'delete', component: 'core'},\n        ]).then((strings) => {\n            return saveCancel(\n                strings[0],\n                strings[1],\n                strings[2],\n                () => {\n                    this._removeMessage(event);\n                }\n            );\n        }).catch((error) => Log.debug(error));\n    }\n\n    /**\n     * Dispatch event to add a message to discussion.\n     */\n    _sendMessage() {\n        let el = this.getElement(selectors.DISCUSSIONINPUT);\n        let message = el.value.trim();\n        if (message != '') {\n            this.reactive.dispatch('sendDiscussionMessage', this.id, message);\n            el.value = '';\n        }\n    }\n\n    /**\n     * Dispatch event to update the discussion data.\n     */\n    _updateDiscussion() {\n        this.getElement(selectors.DISCUSSIONMODAL).classList.add('mod_kanban_loading');\n        this.reactive.dispatch('getDiscussionUpdates', this.id);\n    }\n\n    /**\n     * Called when discussion was updated.\n     */\n    async _discussionUpdated() {\n        let data = {\n            discussions: exporter.exportDiscussion(this.reactive.state, this.id)\n        };\n        Templates.renderForPromise('mod_kanban/discussionmessages', data).then(({html}) => {\n            this.getElement(selectors.DISCUSSION, this.id).innerHTML = html;\n            this.getElement(selectors.DISCUSSIONMODAL, this.id).classList.remove('mod_kanban_loading');\n            let el = this.getElement(selectors.DISCUSSIONMESSAGES);\n            // Scroll down to latest message.\n            el.scrollTop = el.scrollHeight;\n            data.discussions.forEach((d) => {\n                this.addEventListener(this.getElement(selectors.DELETEMESSAGE, d.id), 'click', this._removeMessageConfirm);\n            });\n            return true;\n        }).catch((error) => displayException(error));\n    }\n\n    /**\n     * Dispatch event to update the history data.\n     */\n    _updateHistory() {\n        this.getElement(selectors.HISTORYMODAL).classList.add('mod_kanban_loading');\n        this.reactive.dispatch('getHistoryUpdates', this.id);\n    }\n\n    /**\n     * Called when history was updated.\n     */\n    async _historyUpdated() {\n        let data = {\n            historyitems: exporter.exportHistory(this.reactive.state, this.id)\n        };\n        Templates.renderForPromise('mod_kanban/historyitems', data).then(({html}) => {\n            this.getElement(selectors.HISTORY, this.id).innerHTML = html;\n            this.getElement(selectors.HISTORYMODAL).classList.remove('mod_kanban_loading');\n            // Scroll down to latest history item.\n            let el = this.getElement(selectors.HISTORYITEMS);\n            el.scrollTop = el.scrollHeight;\n            return true;\n        }).catch((error) => displayException(error));\n    }\n\n    /**\n     * Dispatch event to assign the current user to the card.\n     * @param {*} event\n     */\n    _assignSelf(event) {\n        let target = event.target.closest(selectors.ASSIGNSELF);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('assignUser', data.id);\n    }\n\n    /**\n     * Dispatch event to add a card after this card.\n     * @param {*} event\n     */\n    _addCard(event) {\n        document.activeElement.blur();\n        let target = event.target.closest(selectors.ADDCARD);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('addCard', data.columnid, data.id);\n    }\n\n    /**\n     * Called when card is updated.\n     * @param {*} param0\n     */\n    async _cardUpdated({element}) {\n        const card = this.getElement();\n        // Card was moved to another column. Move the element to new card (right position is handled by column component).\n        if (card.dataset.columnid != element.kanban_column) {\n            const col = document.querySelector(selectors.COLUMNINNER + '[data-id=\"' + element.kanban_column + '\"]');\n            col.appendChild(card);\n            this.getElement(selectors.ADDCARD, this.id).setAttribute('data-columnid', element.kanban_column);\n            card.setAttribute('data-columnid', element.kanban_column);\n        }\n        const assignees = this.getElement(selectors.ASSIGNEES, this.id);\n        const assignedUsers = this.getElements(selectors.ASSIGNEDUSER, this.id);\n        const userids = [...assignedUsers].map(v => {\n            return v.dataset.userid;\n        });\n        // Update assignees.\n        if (element.assignees !== undefined) {\n            const additional = element.assignees.filter(x => !userids.includes(x));\n            // Remove all elements that represent users that are no longer assigned to this card.\n            if (assignedUsers !== null) {\n                assignedUsers.forEach(assignedUser => {\n                    if (!element.assignees.includes(assignedUser.dataset.userid)) {\n                        assignedUser.parentNode.removeChild(assignedUser);\n                    }\n                });\n            }\n            this.toggleClass(element.assignees.length == 0, 'mod_kanban_unassigned');\n            // Add new assignees.\n            if (element.assignees.length > 0) {\n                additional.forEach(async user => {\n                    let userdata = this.reactive.state.users.get(user);\n                    let data = Object.assign({cardid: element.id}, userdata);\n                    data = Object.assign(data, exporter.exportCapabilities(this.reactive.state));\n                    Templates.renderForPromise('mod_kanban/user', data).then(({html, js}) => {\n                        Templates.appendNodeContents(assignees, html, js);\n                        return true;\n                    }).catch((error) => displayException(error));\n                });\n            }\n        }\n        this.toggleClass(element.selfassigned, 'mod_kanban_selfassigned');\n        // Set card completion state.\n        if (element.completed !== undefined) {\n            this.toggleClass(element.completed == 1, 'mod_kanban_closed');\n            if (element.completed == 1) {\n                this.getElement(selectors.INPLACEEDITABLE).removeAttribute('data-inplaceeditable');\n            } else {\n                this.getElement(selectors.INPLACEEDITABLE).setAttribute('data-inplaceeditable', '1');\n            }\n        }\n        // Update title (also in modals).\n        if (element.title !== undefined) {\n            this.getElement(selectors.INPLACEEDITABLE).setAttribute('data-value', element.title);\n            this.getElement(selectors.INPLACEEDITABLE).querySelector('a').innerHTML = element.title;\n            this.getElement(selectors.DESCRIPTIONMODALTITLE).innerHTML = element.title;\n            this.getElement(selectors.DISCUSSIONMODALTITLE).innerHTML = element.title;\n        }\n        // Update description.\n        if (element.description !== undefined) {\n            this.getElement(selectors.DESCRIPTIONMODALBODY).innerHTML = element.description;\n        }\n        // Render attachments in description modal.\n        if (element.attachments !== undefined) {\n            Templates.renderForPromise('mod_kanban/attachmentitems', {attachments: element.attachments}).then(({html}) => {\n                this.getElement(selectors.DESCRIPTIONMODALFOOTER).innerHTML = html;\n                return true;\n            }).catch((error) => displayException(error));\n        }\n        this.toggleClass(element.hasdescription, 'mod_kanban_hasdescription');\n        this.toggleClass(element.hasattachment, 'mod_kanban_hasattachment');\n        // Update due date.\n        if (element.duedate !== undefined) {\n            this.getElement(selectors.DUEDATE).setAttribute('data-date', element.duedate);\n            this._dueDateFormat();\n        }\n        this.toggleClass(element.discussion, 'mod_kanban_hasdiscussion');\n        // Only option for now is background color.\n        if (element.options !== undefined) {\n            let options = JSON.parse(element.options);\n            if (options.background === undefined) {\n                this.getElement().removeAttribute('style');\n            } else {\n                this.getElement().setAttribute('style', 'background-color: ' + options.background);\n            }\n        }\n        // Enable/disable dragging (e.g. if user is not assigned to the card anymore).\n        this.checkDragging();\n    }\n\n    /**\n     * Delete this card.\n     */\n    _cardDeleted() {\n        this.destroy();\n    }\n\n    /**\n     * Dispatch event to remove this card.\n     * @param {*} event\n     */\n    _removeCard(event) {\n        let target = event.target.closest(selectors.DELETECARD);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('deleteCard', data.id);\n    }\n\n    /**\n     * Dispatch event to push this card.\n     * @param {*} event\n     */\n    _pushCard(event) {\n        let target = event.target.closest(selectors.PUSHCARD);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('pushCard', data.id);\n    }\n\n    /**\n     * Dispatch event to remove this card.\n     * @param {*} event\n     */\n    _removeMessage(event) {\n        let target = event.target.closest(selectors.DELETEMESSAGE);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('deleteMessage', data.id);\n    }\n\n    /**\n     * Dispatch event to complete this card.\n     * @param {*} event\n     */\n    _completeCard(event) {\n        let target = event.target.closest(selectors.COMPLETE);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('completeCard', data.id);\n    }\n\n    /**\n     * Dispatch event to complete this card.\n     * @param {*} event\n     */\n    _uncompleteCard(event) {\n        let target = event.target.closest(selectors.UNCOMPLETE);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('uncompleteCard', data.id);\n    }\n\n    /**\n     * Remove all subcomponents dependencies.\n     */\n    destroy() {\n        if (this.dragdrop !== undefined) {\n            this.dragdrop.unregister();\n        }\n    }\n\n    /**\n     * Get the draggable data of this component.\n     * @returns {object}\n     */\n    getDraggableData() {\n        return {\n            id: this.id,\n            type: 'card',\n        };\n    }\n\n    /**\n     * Conditionally enable / disable dragging.\n     * @param {*} state\n     */\n    checkDragging(state) {\n        if (state === undefined) {\n            state = this.reactive.stateManager.state;\n        }\n        // User may move the card if he/she has moveallcards capability or has moveassignedcards\n        // capability and is currently assigned to the card.\n        if (state.capabilities.get('moveallcards').value ||\n            (state.capabilities.get('moveassignedcards').value &&\n                state.cards.get(this.id).selfassigned)) {\n            this.draggable = true;\n            this.dragdrop.setDraggable(true);\n        } else {\n            this.draggable = false;\n            this.dragdrop.setDraggable(false);\n        }\n    }\n\n    /**\n     * Validate draggable data.\n     * @param {object} dropdata\n     * @returns {boolean} if the data is valid for this drop-zone.\n     */\n    validateDropData(dropdata) {\n        return dropdata?.type == 'card';\n    }\n\n    /**\n     * Executed when a valid dropdata is dropped over the drop-zone.\n     * @param {object} dropdata\n     */\n    drop(dropdata) {\n        if (dropdata.id != this.id) {\n            let newcolumn = this.getElement(selectors.ADDCARD, this.id).dataset.columnid;\n            let aftercard = this.id;\n            this.reactive.dispatch('moveCard', dropdata.id, newcolumn, aftercard);\n        }\n    }\n\n    /**\n     * Dispatch event to unassign the current user.\n     * @param {*} event\n     */\n    _unassignSelf(event) {\n        let target = event.target.closest(selectors.UNASSIGNSELF);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('unassignUser', data.id);\n    }\n\n    /**\n     * Show modal form to edit card details.\n     * @param {*} event\n     */\n    _editDetails(event) {\n        event.preventDefault();\n\n        const modalForm = new ModalForm({\n            formClass: \"mod_kanban\\\\form\\\\edit_card_form\",\n            args: {\n                id: this.id,\n                boardid: this.boardid,\n                cmid: this.cmid,\n                groupid: this.groupid,\n                userid: this.userid\n            },\n            modalConfig: {title: getString('editcard', 'mod_kanban')},\n            returnFocus: this.getElement(),\n        });\n        this.addEventListener(modalForm, modalForm.events.FORM_SUBMITTED, this._updateCard);\n        modalForm.show();\n    }\n\n    /**\n     * Dispatch an event to update card data from the detail modal.\n     * @param {*} event\n     */\n    _updateCard(event) {\n        this.reactive.dispatch('processUpdates', event.detail);\n    }\n\n    /**\n     * Update relative time.\n     * @param {int} timestamp\n     * @returns {string}\n     */\n    updateRelativeTime(timestamp) {\n        let elapsed = new Date(timestamp) - new Date();\n        for (var u in this._units) {\n            if (Math.abs(elapsed) > this._units[u] || u == 'second') {\n                return this.rtf.format(Math.round(elapsed / this._units[u]), u);\n            }\n        }\n        return '';\n    }\n\n    /**\n     * Format due date using relative time.\n     */\n    _dueDateFormat() {\n        // Convert timestamp to ms.\n        let duedate = this.getElement(selectors.DUEDATE).dataset.date * 1000;\n        if (duedate > 0) {\n            let element = this.getElement(selectors.DUEDATE);\n            element.innerHTML = this.updateRelativeTime(duedate);\n            if (duedate < new Date().getTime()) {\n                element.classList.add('mod_kanban_overdue');\n            } else {\n                element.classList.remove('mod_kanban_overdue');\n            }\n        } else {\n            this.getElement(selectors.DUEDATE).innerHTML = '';\n        }\n    }\n}\n"],"names":["KanbanComponent","year","month","day","hour","minute","second","target","this","element","document","getElementById","create","id","dataset","getWatchers","watch","handler","_cardUpdated","_cardDeleted","_discussionUpdated","_historyUpdated","stateReady","state","lang","undefined","common","rtf","Intl","RelativeTimeFormat","numeric","addEventListener","getElement","selectors","DELETECARD","_removeConfirm","ADDCARD","_addCard","COMPLETE","_completeCard","UNCOMPLETE","_uncompleteCard","ASSIGNSELF","_assignSelf","UNASSIGNSELF","_unassignSelf","EDITDETAILS","_editDetails","DISCUSSIONMODALTRIGGER","_updateDiscussion","DISCUSSIONSHOW","DISCUSSIONSEND","_sendMessage","HISTORYMODALTRIGGER","_updateHistory","MOVEMODALTRIGGER","_showMoveModal","PUSHCARD","_pushCardConfirm","draggable","dragdrop","DragDrop","checkDragging","boardid","board","cmid","userid","groupid","_dueDateFormat","data","exporter","exportStateForTemplate","reactive","cardid","kanbancolumn","cards","get","kanban_column","Str","get_strings","key","component","then","strings","Templates","render","column","querySelector","MOVECARDCOLUMN","value","aftercard","MOVECARDAFTERCARD","dispatch","catch","error","Log","debug","event","_pushCard","_removeCard","_removeMessageConfirm","_removeMessage","el","DISCUSSIONINPUT","message","trim","DISCUSSIONMODAL","classList","add","discussions","exportDiscussion","renderForPromise","_ref","html","DISCUSSION","innerHTML","remove","DISCUSSIONMESSAGES","scrollTop","scrollHeight","forEach","d","DELETEMESSAGE","HISTORYMODAL","historyitems","exportHistory","_ref2","HISTORY","HISTORYITEMS","closest","Object","assign","activeElement","blur","columnid","card","COLUMNINNER","appendChild","setAttribute","assignees","ASSIGNEES","assignedUsers","getElements","ASSIGNEDUSER","userids","map","v","additional","filter","x","includes","assignedUser","parentNode","removeChild","toggleClass","length","async","userdata","users","user","exportCapabilities","_ref4","js","appendNodeContents","selfassigned","completed","INPLACEEDITABLE","removeAttribute","title","DESCRIPTIONMODALTITLE","DISCUSSIONMODALTITLE","description","DESCRIPTIONMODALBODY","attachments","_ref5","DESCRIPTIONMODALFOOTER","hasdescription","hasattachment","duedate","DUEDATE","discussion","options","JSON","parse","background","destroy","unregister","getDraggableData","type","stateManager","capabilities","setDraggable","validateDropData","dropdata","drop","newcolumn","preventDefault","modalForm","ModalForm","formClass","args","modalConfig","returnFocus","events","FORM_SUBMITTED","_updateCard","show","detail","updateRelativeTime","timestamp","elapsed","Date","u","_units","Math","abs","format","round","date","getTime"],"mappings":"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"}