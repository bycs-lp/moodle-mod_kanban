{"version":3,"file":"card.min.js","sources":["../src/card.js"],"sourcesContent":["import {BaseComponent, DragDrop} from 'core/reactive';\nimport selectors from 'mod_kanban/selectors';\nimport exporter from 'mod_kanban/exporter';\nimport {saveCancel} from 'core/notification';\nimport ModalForm from 'core_form/modalform';\nimport {get_string as getString} from 'core/str';\n\n/**\n * Component representing a card in a kanban board.\n */\nexport default class extends BaseComponent {\n    /**\n     * Function to initialize component, called by mustache template.\n     * @param {*} target The id of the HTMLElement to attach to\n     * @returns {BaseComponent} New component attached to the HTMLElement represented by target\n     */\n    static init(target) {\n        let element = document.getElementById(target);\n        return new this({\n            element: element,\n        });\n    }\n\n    /**\n     * Called after the component was created.\n     */\n    create() {\n        this.id = this.element.dataset.id;\n    }\n\n    /**\n     * Watchers for this component.\n     * @returns {array} All watchers for this component\n     */\n    getWatchers() {\n        return [\n            {watch: `cards[${this.id}]:updated`, handler: this._cardUpdated},\n            {watch: `cards[${this.id}]:deleted`, handler: this._cardDeleted},\n        ];\n    }\n\n    /**\n     * Called once when state is ready, attaching event listeners and initializing drag and drop.\n     * @param {*} state The initial state\n     */\n    stateReady(state) {\n        this.addEventListener(\n            this.getElement(selectors.DELETECARD, this.id),\n            'click',\n            this._removeConfirm\n        );\n        this.addEventListener(\n            this.getElement(selectors.ADDCARD, this.id),\n            'click',\n            this._addCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.COMPLETE, this.id),\n            'click',\n            this._completeCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.UNCOMPLETE, this.id),\n            'click',\n            this._uncompleteCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.ASSIGNSELF, this.id),\n            'click',\n            this._assignSelf\n        );\n        this.addEventListener(\n            this.getElement(selectors.UNASSIGNSELF, this.id),\n            'click',\n            this._unassignSelf\n        );\n        this.addEventListener(\n            this.getElement(selectors.EDITDETAILS, this.id),\n            'click',\n            this._editDetails\n        );\n        this.draggable = false;\n        this.dragdrop = new DragDrop(this);\n        this.checkDragging(state);\n        this.boardid = state.board.id;\n        this.cmid = state.board.cmid;\n    }\n\n    /**\n     * Display confirmation modal for deleting a card.\n     * @param {*} event\n     */\n    _removeConfirm(event) {\n        saveCancel(\n            getString('deletecard', 'mod_kanban'),\n            getString('deletecardconfirm', 'mod_kanban'),\n            getString('delete', 'core'),\n            () => {\n                this._removeCard(event);\n            }\n        );\n    }\n\n    /**\n     * Dispatch event to assign the current user to the card.\n     * @param {*} event\n     */\n    _assignSelf(event) {\n        let target = event.target.closest(selectors.ASSIGNSELF);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('assignUser', data.id);\n    }\n\n    /**\n     * Dispatch event to add a card after this card.\n     * @param {*} event\n     */\n    _addCard(event) {\n        let target = event.target.closest(selectors.ADDCARD);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('addCard', data.columnid, data.id);\n    }\n\n    /**\n     * Update this card.\n     * @param {*} param0\n     */\n    async _cardUpdated({element}) {\n        const card = this.getElement();\n        if (card.dataset.columnid != element.kanban_column) {\n            const col = document.querySelector(selectors.COLUMNINNER + '[data-id=\"' + element.kanban_column + '\"]');\n            col.appendChild(card);\n            this.getElement(selectors.ADDCARD, this.id).setAttribute('data-columnid', element.kanban_column);\n            card.setAttribute('data-columnid', element.kanban_column);\n        }\n        const assignees = this.getElement(selectors.ASSIGNEES, this.id);\n        const assignedUsers = this.getElements(selectors.ASSIGNEDUSER, this.id);\n        const userids = [...assignedUsers].map(v => {\n            return v.dataset.userid;\n        });\n        const additional = element.assignees.filter(x => !userids.includes(x));\n        if (assignedUsers !== null) {\n            assignedUsers.forEach(assignedUser => {\n                if (!element.assignees.includes(assignedUser.dataset.userid)) {\n                    assignedUser.parentNode.removeChild(assignedUser);\n                }\n            });\n        }\n        if (element.assignees.length > 0) {\n            additional.forEach(async user => {\n                let placeholder = document.createElement('div');\n                let userdata = this.reactive.state.users.get(user);\n                let data = Object.assign({cardid: element.id}, userdata);\n                data = Object.assign(data, exporter.exportCapabilities(this.reactive.state));\n                placeholder.setAttribute('data-id', element.id);\n                assignees.appendChild(placeholder);\n                const newcomponent = await this.renderComponent(placeholder, 'mod_kanban/user', data);\n                const newelement = newcomponent.getElement();\n                assignees.replaceChild(newelement, placeholder);\n            });\n        }\n        if (element.selfassigned !== undefined) {\n            if (element.selfassigned) {\n                this.getElement(selectors.ASSIGNSELF, this.id).parentNode.classList.add('hidden');\n                this.getElement(selectors.UNASSIGNSELF, this.id).parentNode.classList.remove('hidden');\n            } else {\n                this.getElement(selectors.ASSIGNSELF, this.id).parentNode.classList.remove('hidden');\n                this.getElement(selectors.UNASSIGNSELF, this.id).parentNode.classList.add('hidden');\n            }\n        }\n        if (element.completed !== undefined) {\n            if (element.completed) {\n                this.getElement(selectors.COMPLETIONSTATE).classList.remove('hidden');\n                this.getElement(selectors.UNCOMPLETE).parentNode.classList.remove('hidden');\n                this.getElement(selectors.COMPLETE).parentNode.classList.add('hidden');\n                this.getElement(selectors.INPLACEEDITABLE).removeAttribute('data-inplaceeditable');\n            } else {\n                this.getElement(selectors.COMPLETIONSTATE).classList.add('hidden');\n                this.getElement(selectors.UNCOMPLETE).parentNode.classList.add('hidden');\n                this.getElement(selectors.COMPLETE).parentNode.classList.remove('hidden');\n                this.getElement(selectors.INPLACEEDITABLE).setAttribute('data-inplaceeditable', '1');\n            }\n        }\n        if (element.title !== undefined) {\n            this.getElement(selectors.INPLACEEDITABLE).setAttribute('data-value', element.title);\n            this.getElement(selectors.INPLACEEDITABLE).querySelector('a').innerHTML = element.title;\n            this.getElement(selectors.DESCRIPTIONMODALTITLE).innerHTML = element.title;\n        }\n        if (element.description !== undefined) {\n            this.getElement(selectors.DESCRIPTIONMODALBODY).innerHTML = element.description;\n        }\n        if (element.hasdescription !== undefined) {\n            if (element.hasdescription) {\n                this.getElement(selectors.DESCRIPTIONTOGGLE).classList.remove('hidden');\n            } else {\n                this.getElement(selectors.DESCRIPTIONTOGGLE).classList.add('hidden');\n            }\n\n        }\n        this.checkDragging();\n    }\n\n    /**\n     * Delete this card.\n     */\n    _cardDeleted() {\n        const el = this.getElement();\n        el.parentNode.removeChild(el);\n        this.destroy();\n    }\n\n    /**\n     * Dispatch event to remove this card.\n     * @param {*} event\n     */\n    _removeCard(event) {\n        let target = event.target.closest(selectors.DELETECARD);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('deleteCard', data.id);\n    }\n\n    /**\n     * Dispatch event to complete this card.\n     * @param {*} event\n     */\n    _completeCard(event) {\n        let target = event.target.closest(selectors.COMPLETE);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('completeCard', data.id);\n    }\n\n    /**\n     * Dispatch event to complete this card.\n     * @param {*} event\n     */\n    _uncompleteCard(event) {\n        let target = event.target.closest(selectors.UNCOMPLETE);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('uncompleteCard', data.id);\n    }\n\n    /**\n     * Remove all subcomponents dependencies.\n     */\n    destroy() {\n        if (this.dragdrop !== undefined) {\n            this.dragdrop.unregister();\n        }\n    }\n\n    /**\n     * Get the draggable data of this component.\n     * @returns {object}\n     */\n    getDraggableData() {\n        return {\n            id: this.id,\n            type: 'card',\n        };\n    }\n\n    /**\n     * Conditionally enable / disable dragging.\n     * @param {*} state\n     */\n    checkDragging(state) {\n        if (state === undefined) {\n            state = this.reactive.stateManager.state;\n        }\n        if (state.capabilities.get('moveallcards').value ||\n            (state.capabilities.get('moveassignedcards').value &&\n            state.cards.get(this.id).assignees.includes(state.board.userid))) {\n            this.draggable = true;\n            this.dragdrop.setDraggable(true);\n        } else {\n            this.draggable = false;\n            this.dragdrop.setDraggable(false);\n        }\n    }\n\n    /**\n     * Validate draggable data.\n     * @param {object} dropdata\n     * @returns {boolean} if the data is valid for this drop-zone.\n     */\n    validateDropData(dropdata) {\n        return dropdata?.type == 'card';\n    }\n\n    /**\n     * Executed when a valid dropdata is dropped over the drop-zone.\n     * @param {object} dropdata\n     */\n    drop(dropdata) {\n        if (dropdata.id != this.id) {\n            let newcolumn = this.getElement(selectors.ADDCARD, this.id).dataset.columnid;\n            let aftercard = this.id;\n            this.reactive.dispatch('moveCard', dropdata.id, newcolumn, aftercard);\n        }\n    }\n\n    /**\n     * Dispatch event to unassign the current user.\n     * @param {*} event\n     */\n    _unassignSelf(event) {\n        let target = event.target.closest(selectors.UNASSIGNSELF);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('unassignUser', data.id);\n    }\n\n    /**\n     * Show modal form to edit card details.\n     * @param {*} event\n     */\n    _editDetails(event) {\n        event.preventDefault();\n\n        const modalForm = new ModalForm({\n            formClass: \"mod_kanban\\\\form\\\\edit_card_form\",\n            args: {\n                id: this.id,\n                kanban_board: this.boardid,\n                cmid: this.cmid\n            },\n            modalConfig: {title: getString('editcard', 'mod_kanban')},\n            returnFocus: this.getElement(),\n        });\n        this.addEventListener(modalForm, modalForm.events.FORM_SUBMITTED, this._updateCard);\n        modalForm.show();\n    }\n\n    /**\n     * Dispatch an event to update card data from the detail modal.\n     * @param {*} event\n     */\n    _updateCard(event) {\n        this.reactive.dispatch('processUpdates', event.detail);\n    }\n}\n"],"names":["BaseComponent","target","this","element","document","getElementById","create","id","dataset","getWatchers","watch","handler","_cardUpdated","_cardDeleted","stateReady","state","addEventListener","getElement","selectors","DELETECARD","_removeConfirm","ADDCARD","_addCard","COMPLETE","_completeCard","UNCOMPLETE","_uncompleteCard","ASSIGNSELF","_assignSelf","UNASSIGNSELF","_unassignSelf","EDITDETAILS","_editDetails","draggable","dragdrop","DragDrop","checkDragging","boardid","board","cmid","event","_removeCard","closest","data","Object","assign","reactive","dispatch","columnid","card","kanban_column","querySelector","COLUMNINNER","appendChild","setAttribute","assignees","ASSIGNEES","assignedUsers","getElements","ASSIGNEDUSER","userids","map","v","userid","additional","filter","x","includes","forEach","assignedUser","parentNode","removeChild","length","async","placeholder","createElement","userdata","users","get","user","cardid","exporter","exportCapabilities","newelement","renderComponent","replaceChild","undefined","selfassigned","classList","add","remove","completed","COMPLETIONSTATE","INPLACEEDITABLE","removeAttribute","title","innerHTML","DESCRIPTIONMODALTITLE","description","DESCRIPTIONMODALBODY","hasdescription","DESCRIPTIONTOGGLE","el","destroy","unregister","getDraggableData","type","stateManager","capabilities","value","cards","setDraggable","validateDropData","dropdata","drop","newcolumn","aftercard","preventDefault","modalForm","ModalForm","formClass","args","kanban_board","modalConfig","returnFocus","events","FORM_SUBMITTED","_updateCard","show","detail"],"mappings":"yiBAU6BA,oCAMbC,eAED,IAAIC,KAAK,CACZC,QAFUC,SAASC,eAAeJ,UAS1CK,cACSC,GAAKL,KAAKC,QAAQK,QAAQD,GAOnCE,oBACW,CACH,CAACC,sBAAgBR,KAAKK,gBAAeI,QAAST,KAAKU,cACnD,CAACF,sBAAgBR,KAAKK,gBAAeI,QAAST,KAAKW,eAQ3DC,WAAWC,YACFC,iBACDd,KAAKe,WAAWC,mBAAUC,WAAYjB,KAAKK,IAC3C,QACAL,KAAKkB,qBAEJJ,iBACDd,KAAKe,WAAWC,mBAAUG,QAASnB,KAAKK,IACxC,QACAL,KAAKoB,eAEJN,iBACDd,KAAKe,WAAWC,mBAAUK,SAAUrB,KAAKK,IACzC,QACAL,KAAKsB,oBAEJR,iBACDd,KAAKe,WAAWC,mBAAUO,WAAYvB,KAAKK,IAC3C,QACAL,KAAKwB,sBAEJV,iBACDd,KAAKe,WAAWC,mBAAUS,WAAYzB,KAAKK,IAC3C,QACAL,KAAK0B,kBAEJZ,iBACDd,KAAKe,WAAWC,mBAAUW,aAAc3B,KAAKK,IAC7C,QACAL,KAAK4B,oBAEJd,iBACDd,KAAKe,WAAWC,mBAAUa,YAAa7B,KAAKK,IAC5C,QACAL,KAAK8B,mBAEJC,WAAY,OACZC,SAAW,IAAIC,mBAASjC,WACxBkC,cAAcrB,YACdsB,QAAUtB,MAAMuB,MAAM/B,QACtBgC,KAAOxB,MAAMuB,MAAMC,KAO5BnB,eAAeoB,qCAEP,mBAAU,aAAc,eACxB,mBAAU,oBAAqB,eAC/B,mBAAU,SAAU,SACpB,UACSC,YAAYD,UAS7BZ,YAAYY,WACJvC,OAASuC,MAAMvC,OAAOyC,QAAQxB,mBAAUS,YACxCgB,KAAOC,OAAOC,OAAO,GAAI5C,OAAOO,cAC/BsC,SAASC,SAAS,aAAcJ,KAAKpC,IAO9Ce,SAASkB,WACDvC,OAASuC,MAAMvC,OAAOyC,QAAQxB,mBAAUG,SACxCsB,KAAOC,OAAOC,OAAO,GAAI5C,OAAOO,cAC/BsC,SAASC,SAAS,UAAWJ,KAAKK,SAAUL,KAAKpC,iCAOvCJ,QAACA,oBACV8C,KAAO/C,KAAKe,gBACdgC,KAAKzC,QAAQwC,UAAY7C,QAAQ+C,cAAe,CACpC9C,SAAS+C,cAAcjC,mBAAUkC,YAAc,aAAejD,QAAQ+C,cAAgB,MAC9FG,YAAYJ,WACXhC,WAAWC,mBAAUG,QAASnB,KAAKK,IAAI+C,aAAa,gBAAiBnD,QAAQ+C,eAClFD,KAAKK,aAAa,gBAAiBnD,QAAQ+C,qBAEzCK,UAAYrD,KAAKe,WAAWC,mBAAUsC,UAAWtD,KAAKK,IACtDkD,cAAgBvD,KAAKwD,YAAYxC,mBAAUyC,aAAczD,KAAKK,IAC9DqD,QAAU,IAAIH,eAAeI,KAAIC,GAC5BA,EAAEtD,QAAQuD,SAEfC,WAAa7D,QAAQoD,UAAUU,QAAOC,IAAMN,QAAQO,SAASD,KAC7C,OAAlBT,eACAA,cAAcW,SAAQC,eACblE,QAAQoD,UAAUY,SAASE,aAAa7D,QAAQuD,SACjDM,aAAaC,WAAWC,YAAYF,iBAI5ClE,QAAQoD,UAAUiB,OAAS,GAC3BR,WAAWI,SAAQK,MAAAA,WACXC,YAActE,SAASuE,cAAc,OACrCC,SAAW1E,KAAK4C,SAAS/B,MAAM8D,MAAMC,IAAIC,MACzCpC,KAAOC,OAAOC,OAAO,CAACmC,OAAQ7E,QAAQI,IAAKqE,UAC/CjC,KAAOC,OAAOC,OAAOF,KAAMsC,kBAASC,mBAAmBhF,KAAK4C,SAAS/B,QACrE2D,YAAYpB,aAAa,UAAWnD,QAAQI,IAC5CgD,UAAUF,YAAYqB,mBAEhBS,kBADqBjF,KAAKkF,gBAAgBV,YAAa,kBAAmB/B,OAChD1B,aAChCsC,UAAU8B,aAAaF,WAAYT,qBAGdY,IAAzBnF,QAAQoF,eACJpF,QAAQoF,mBACHtE,WAAWC,mBAAUS,WAAYzB,KAAKK,IAAI+D,WAAWkB,UAAUC,IAAI,eACnExE,WAAWC,mBAAUW,aAAc3B,KAAKK,IAAI+D,WAAWkB,UAAUE,OAAO,iBAExEzE,WAAWC,mBAAUS,WAAYzB,KAAKK,IAAI+D,WAAWkB,UAAUE,OAAO,eACtEzE,WAAWC,mBAAUW,aAAc3B,KAAKK,IAAI+D,WAAWkB,UAAUC,IAAI,iBAGxDH,IAAtBnF,QAAQwF,YACJxF,QAAQwF,gBACH1E,WAAWC,mBAAU0E,iBAAiBJ,UAAUE,OAAO,eACvDzE,WAAWC,mBAAUO,YAAY6C,WAAWkB,UAAUE,OAAO,eAC7DzE,WAAWC,mBAAUK,UAAU+C,WAAWkB,UAAUC,IAAI,eACxDxE,WAAWC,mBAAU2E,iBAAiBC,gBAAgB,+BAEtD7E,WAAWC,mBAAU0E,iBAAiBJ,UAAUC,IAAI,eACpDxE,WAAWC,mBAAUO,YAAY6C,WAAWkB,UAAUC,IAAI,eAC1DxE,WAAWC,mBAAUK,UAAU+C,WAAWkB,UAAUE,OAAO,eAC3DzE,WAAWC,mBAAU2E,iBAAiBvC,aAAa,uBAAwB,YAGlEgC,IAAlBnF,QAAQ4F,aACH9E,WAAWC,mBAAU2E,iBAAiBvC,aAAa,aAAcnD,QAAQ4F,YACzE9E,WAAWC,mBAAU2E,iBAAiB1C,cAAc,KAAK6C,UAAY7F,QAAQ4F,WAC7E9E,WAAWC,mBAAU+E,uBAAuBD,UAAY7F,QAAQ4F,YAE7CT,IAAxBnF,QAAQ+F,mBACHjF,WAAWC,mBAAUiF,sBAAsBH,UAAY7F,QAAQ+F,kBAEzCZ,IAA3BnF,QAAQiG,iBACJjG,QAAQiG,oBACHnF,WAAWC,mBAAUmF,mBAAmBb,UAAUE,OAAO,eAEzDzE,WAAWC,mBAAUmF,mBAAmBb,UAAUC,IAAI,gBAI9DrD,gBAMTvB,qBACUyF,GAAKpG,KAAKe,aAChBqF,GAAGhC,WAAWC,YAAY+B,SACrBC,UAOT9D,YAAYD,WACJvC,OAASuC,MAAMvC,OAAOyC,QAAQxB,mBAAUC,YACxCwB,KAAOC,OAAOC,OAAO,GAAI5C,OAAOO,cAC/BsC,SAASC,SAAS,aAAcJ,KAAKpC,IAO9CiB,cAAcgB,WACNvC,OAASuC,MAAMvC,OAAOyC,QAAQxB,mBAAUK,UACxCoB,KAAOC,OAAOC,OAAO,GAAI5C,OAAOO,cAC/BsC,SAASC,SAAS,eAAgBJ,KAAKpC,IAOhDmB,gBAAgBc,WACRvC,OAASuC,MAAMvC,OAAOyC,QAAQxB,mBAAUO,YACxCkB,KAAOC,OAAOC,OAAO,GAAI5C,OAAOO,cAC/BsC,SAASC,SAAS,iBAAkBJ,KAAKpC,IAMlDgG,eAC0BjB,IAAlBpF,KAAKgC,eACAA,SAASsE,aAQtBC,yBACW,CACHlG,GAAIL,KAAKK,GACTmG,KAAM,QAQdtE,cAAcrB,YACIuE,IAAVvE,QACAA,MAAQb,KAAK4C,SAAS6D,aAAa5F,OAEnCA,MAAM6F,aAAa9B,IAAI,gBAAgB+B,OACtC9F,MAAM6F,aAAa9B,IAAI,qBAAqB+B,OAC7C9F,MAAM+F,MAAMhC,IAAI5E,KAAKK,IAAIgD,UAAUY,SAASpD,MAAMuB,MAAMyB,cACnD9B,WAAY,OACZC,SAAS6E,cAAa,UAEtB9E,WAAY,OACZC,SAAS6E,cAAa,IASnCC,iBAAiBC,gBACY,SAAlBA,MAAAA,gBAAAA,SAAUP,MAOrBQ,KAAKD,aACGA,SAAS1G,IAAML,KAAKK,GAAI,KACpB4G,UAAYjH,KAAKe,WAAWC,mBAAUG,QAASnB,KAAKK,IAAIC,QAAQwC,SAChEoE,UAAYlH,KAAKK,QAChBuC,SAASC,SAAS,WAAYkE,SAAS1G,GAAI4G,UAAWC,YAQnEtF,cAAcU,WACNvC,OAASuC,MAAMvC,OAAOyC,QAAQxB,mBAAUW,cACxCc,KAAOC,OAAOC,OAAO,GAAI5C,OAAOO,cAC/BsC,SAASC,SAAS,eAAgBJ,KAAKpC,IAOhDyB,aAAaQ,OACTA,MAAM6E,uBAEAC,UAAY,IAAIC,mBAAU,CAC5BC,UAAW,mCACXC,KAAM,CACFlH,GAAIL,KAAKK,GACTmH,aAAcxH,KAAKmC,QACnBE,KAAMrC,KAAKqC,MAEfoF,YAAa,CAAC5B,OAAO,mBAAU,WAAY,eAC3C6B,YAAa1H,KAAKe,oBAEjBD,iBAAiBsG,UAAWA,UAAUO,OAAOC,eAAgB5H,KAAK6H,aACvET,UAAUU,OAOdD,YAAYvF,YACHM,SAASC,SAAS,iBAAkBP,MAAMyF"}