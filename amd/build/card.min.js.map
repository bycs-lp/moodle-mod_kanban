{"version":3,"file":"card.min.js","sources":["../src/card.js"],"sourcesContent":["import {DragDrop} from 'core/reactive';\nimport selectors from 'mod_kanban/selectors';\nimport exporter from 'mod_kanban/exporter';\nimport {saveCancel} from 'core/notification';\nimport ModalForm from 'core_form/modalform';\nimport {get_string as getString} from 'core/str';\nimport {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\nimport KanbanComponent from 'mod_kanban/kanbancomponent';\n\n/**\n * Component representing a card in a kanban board.\n */\nexport default class extends KanbanComponent {\n    /**\n     * For relative time helper.\n     */\n    _units = {\n        year: 24 * 60 * 60 * 1000 * 365,\n        month: 24 * 60 * 60 * 1000 * 365 / 12,\n        day: 24 * 60 * 60 * 1000,\n        hour: 60 * 60 * 1000,\n        minute: 60 * 1000,\n        second: 1000\n    };\n\n    /**\n     * Function to initialize component, called by mustache template.\n     * @param {*} target The id of the HTMLElement to attach to\n     * @returns {BaseComponent} New component attached to the HTMLElement represented by target\n     */\n    static init(target) {\n        let element = document.getElementById(target);\n        return new this({\n            element: element,\n        });\n    }\n\n    /**\n     * Called after the component was created.\n     */\n    create() {\n        this.id = this.element.dataset.id;\n    }\n\n    /**\n     * Watchers for this component.\n     * @returns {array} All watchers for this component\n     */\n    getWatchers() {\n        return [\n            {watch: `cards[${this.id}]:updated`, handler: this._cardUpdated},\n            {watch: `cards[${this.id}]:deleted`, handler: this._cardDeleted},\n            {watch: `discussions[${this.id}]:created`, handler: this._discussionUpdated},\n            {watch: `discussions[${this.id}]:updated`, handler: this._discussionUpdated},\n        ];\n    }\n\n    /**\n     * Called once when state is ready, attaching event listeners and initializing drag and drop.\n     * @param {*} state The initial state\n     */\n    stateReady(state) {\n        let lang = 'en';\n        if (state.common.lang !== undefined) {\n            lang = state.common.lang;\n        }\n        this.rtf = new Intl.RelativeTimeFormat(lang, {numeric: 'auto'});\n\n        this.addEventListener(\n            this.getElement(selectors.DELETECARD, this.id),\n            'click',\n            this._removeConfirm\n        );\n        this.addEventListener(\n            this.getElement(selectors.ADDCARD, this.id),\n            'click',\n            this._addCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.COMPLETE, this.id),\n            'click',\n            this._completeCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.UNCOMPLETE, this.id),\n            'click',\n            this._uncompleteCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.ASSIGNSELF, this.id),\n            'click',\n            this._assignSelf\n        );\n        this.addEventListener(\n            this.getElement(selectors.UNASSIGNSELF, this.id),\n            'click',\n            this._unassignSelf\n        );\n        this.addEventListener(\n            this.getElement(selectors.EDITDETAILS, this.id),\n            'click',\n            this._editDetails\n        );\n        this.addEventListener(\n            this.getElement(selectors.DISCUSSIONMODALTRIGGER),\n            'click',\n            this._updateDiscussion\n        );\n        this.addEventListener(\n            this.getElement(selectors.DISCUSSIONSHOW, this.id),\n            'click',\n            this._updateDiscussion\n        );\n        this.addEventListener(\n            this.getElement(selectors.DISCUSSIONSEND),\n            'click',\n            this._sendMessage\n        );\n\n        this.draggable = false;\n        this.dragdrop = new DragDrop(this);\n        this.checkDragging(state);\n        this.boardid = state.board.id;\n        this.cmid = state.common.id;\n        this.user = state.board.user;\n        this.groupid = state.board.groupid;\n        this._dueDateFormat();\n    }\n\n    /**\n     * Display confirmation modal for deleting a card.\n     * @param {*} event\n     */\n    _removeConfirm(event) {\n        saveCancel(\n            getString('deletecard', 'mod_kanban'),\n            getString('deletecardconfirm', 'mod_kanban'),\n            getString('delete', 'core'),\n            () => {\n                this._removeCard(event);\n            }\n        );\n    }\n\n    /**\n     * Display confirmation modal for deleting a discussion message.\n     * @param {*} event\n     */\n    _removeMessageConfirm(event) {\n        saveCancel(\n            getString('deletemessage', 'mod_kanban'),\n            getString('deletemessageconfirm', 'mod_kanban'),\n            getString('delete', 'core'),\n            () => {\n                this._removeMessage(event);\n            }\n        );\n    }\n\n    /**\n     * Dispatch event to add a message to discussion.\n     */\n    _sendMessage() {\n        let el = this.getElement(selectors.DISCUSSIONINPUT);\n        let message = el.value.trim();\n        if (message != '') {\n            this.reactive.dispatch('sendDiscussionMessage', this.id, message);\n            el.value = '';\n        }\n    }\n\n    /**\n     * Dispatch event to update the discussion data.\n     */\n    _updateDiscussion() {\n        this.getElement(selectors.DISCUSSIONMODAL).classList.add('mod_kanban_loading');\n        this.getElement(selectors.DISCUSSIONMODALTITLE).innerHTML = this.reactive.state.cards.get(this.id).title;\n        this.reactive.dispatch('getDiscussionUpdates', this.id);\n    }\n\n    async _discussionUpdated() {\n        let data = {\n            discussions: exporter.exportDiscussion(this.reactive.state, this.id)\n        };\n        Templates.renderForPromise('mod_kanban/discussionmessages', data).then(({html}) => {\n            this.getElement(selectors.DISCUSSION, this.id).innerHTML = html;\n            this.getElement(selectors.DISCUSSIONMODAL, this.id).classList.remove('mod_kanban_loading');\n            let el = this.getElement(selectors.DISCUSSIONMESSAGES);\n            el.scrollTop = el.scrollHeight;\n            data.discussions.forEach((d) => {\n                this.addEventListener(this.getElement(selectors.DELETEMESSAGE, d.id), 'click', this._removeMessageConfirm);\n            });\n            return true;\n        }).catch((error) => displayException(error));\n    }\n\n    /**\n     * Dispatch event to assign the current user to the card.\n     * @param {*} event\n     */\n    _assignSelf(event) {\n        let target = event.target.closest(selectors.ASSIGNSELF);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('assignUser', data.id);\n    }\n\n    /**\n     * Dispatch event to add a card after this card.\n     * @param {*} event\n     */\n    _addCard(event) {\n        let target = event.target.closest(selectors.ADDCARD);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('addCard', data.columnid, data.id);\n    }\n\n    /**\n     * Update this card.\n     * @param {*} param0\n     */\n    async _cardUpdated({element}) {\n        const card = this.getElement();\n        if (card.dataset.columnid != element.kanban_column) {\n            const col = document.querySelector(selectors.COLUMNINNER + '[data-id=\"' + element.kanban_column + '\"]');\n            col.appendChild(card);\n            this.getElement(selectors.ADDCARD, this.id).setAttribute('data-columnid', element.kanban_column);\n            card.setAttribute('data-columnid', element.kanban_column);\n        }\n        const assignees = this.getElement(selectors.ASSIGNEES, this.id);\n        const assignedUsers = this.getElements(selectors.ASSIGNEDUSER, this.id);\n        const userids = [...assignedUsers].map(v => {\n            return v.dataset.userid;\n        });\n        if (element.assignees !== undefined) {\n            const additional = element.assignees.filter(x => !userids.includes(x));\n            if (assignedUsers !== null) {\n                assignedUsers.forEach(assignedUser => {\n                    if (!element.assignees.includes(assignedUser.dataset.userid)) {\n                        assignedUser.parentNode.removeChild(assignedUser);\n                    }\n                });\n            }\n            this.toggleClass(element.assignees.length == 0, 'mod_kanban_unassigned');\n            if (element.assignees.length > 0) {\n                additional.forEach(async user => {\n                    let placeholder = document.createElement('div');\n                    let userdata = this.reactive.state.users.get(user);\n                    let data = Object.assign({cardid: element.id}, userdata);\n                    data = Object.assign(data, exporter.exportCapabilities(this.reactive.state));\n                    placeholder.setAttribute('data-id', element.id);\n                    assignees.appendChild(placeholder);\n                    const newcomponent = await this.renderComponent(placeholder, 'mod_kanban/user', data);\n                    const newelement = newcomponent.getElement();\n                    assignees.replaceChild(newelement, placeholder);\n                });\n            }\n        }\n        this.toggleClass(element.selfassigned, 'mod_kanban_selfassigned');\n        if (element.completed !== undefined) {\n            this.toggleClass(element.completed == 1, 'mod_kanban_closed');\n            if (element.completed == 1) {\n                this.getElement(selectors.INPLACEEDITABLE).removeAttribute('data-inplaceeditable');\n            } else {\n                this.getElement(selectors.INPLACEEDITABLE).setAttribute('data-inplaceeditable', '1');\n            }\n        }\n        if (element.title !== undefined) {\n            this.getElement(selectors.INPLACEEDITABLE).setAttribute('data-value', element.title);\n            this.getElement(selectors.INPLACEEDITABLE).querySelector('a').innerHTML = element.title;\n            this.getElement(selectors.DESCRIPTIONMODALTITLE).innerHTML = element.title;\n        }\n        if (element.description !== undefined) {\n            this.getElement(selectors.DESCRIPTIONMODALBODY).innerHTML = element.description;\n        }\n        if (element.attachments !== undefined) {\n            Templates.renderForPromise('mod_kanban/attachmentitems', {attachments: element.attachments}).then(({html}) => {\n                this.getElement(selectors.DESCRIPTIONMODALFOOTER).innerHTML = html;\n                return true;\n            }).catch((error) => displayException(error));\n        }\n        this.toggleClass(element.hasdescription, 'mod_kanban_hasdescription');\n        this.toggleClass(element.hasattachment, 'mod_kanban_hasattachment');\n        if (element.duedate !== undefined) {\n            this.getElement(selectors.DUEDATE).setAttribute('data-date', element.duedate);\n            this._dueDateFormat();\n        }\n        this.toggleClass(element.discussion, 'mod_kanban_hasdiscussion');\n        if (element.options !== undefined) {\n            let options = JSON.parse(element.options);\n            if (options.background === undefined) {\n                this.getElement().removeAttribute('style');\n            } else {\n                this.getElement().setAttribute('style', 'background-color: ' + options.background);\n            }\n        }\n        if (element.highlight !== undefined && element.highlight) {\n            this.getElement().classList.add('mod_kanban_updated');\n            setTimeout(() => this.getElement().classList.remove('mod_kanban_updated'), 3000);\n        }\n        this.checkDragging();\n    }\n\n    /**\n     * Delete this card.\n     */\n    _cardDeleted() {\n        const el = this.getElement();\n        el.parentNode.removeChild(el);\n        this.destroy();\n    }\n\n    /**\n     * Dispatch event to remove this card.\n     * @param {*} event\n     */\n    _removeCard(event) {\n        let target = event.target.closest(selectors.DELETECARD);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('deleteCard', data.id);\n    }\n\n    /**\n     * Dispatch event to remove this card.\n     * @param {*} event\n     */\n    _removeMessage(event) {\n        let target = event.target.closest(selectors.DELETEMESSAGE);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('deleteMessage', data.id);\n    }\n\n    /**\n     * Dispatch event to complete this card.\n     * @param {*} event\n     */\n    _completeCard(event) {\n        let target = event.target.closest(selectors.COMPLETE);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('completeCard', data.id);\n    }\n\n    /**\n     * Dispatch event to complete this card.\n     * @param {*} event\n     */\n    _uncompleteCard(event) {\n        let target = event.target.closest(selectors.UNCOMPLETE);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('uncompleteCard', data.id);\n    }\n\n    /**\n     * Remove all subcomponents dependencies.\n     */\n    destroy() {\n        if (this.dragdrop !== undefined) {\n            this.dragdrop.unregister();\n        }\n    }\n\n    /**\n     * Get the draggable data of this component.\n     * @returns {object}\n     */\n    getDraggableData() {\n        return {\n            id: this.id,\n            type: 'card',\n        };\n    }\n\n    /**\n     * Conditionally enable / disable dragging.\n     * @param {*} state\n     */\n    checkDragging(state) {\n        if (state === undefined) {\n            state = this.reactive.stateManager.state;\n        }\n        if (state.capabilities.get('moveallcards').value ||\n            (state.capabilities.get('moveassignedcards').value &&\n            state.cards.get(this.id).assignees.includes(state.common.userid))) {\n            this.draggable = true;\n            this.dragdrop.setDraggable(true);\n        } else {\n            this.draggable = false;\n            this.dragdrop.setDraggable(false);\n        }\n    }\n\n    /**\n     * Validate draggable data.\n     * @param {object} dropdata\n     * @returns {boolean} if the data is valid for this drop-zone.\n     */\n    validateDropData(dropdata) {\n        return dropdata?.type == 'card';\n    }\n\n    /**\n     * Executed when a valid dropdata is dropped over the drop-zone.\n     * @param {object} dropdata\n     */\n    drop(dropdata) {\n        if (dropdata.id != this.id) {\n            let newcolumn = this.getElement(selectors.ADDCARD, this.id).dataset.columnid;\n            let aftercard = this.id;\n            this.reactive.dispatch('moveCard', dropdata.id, newcolumn, aftercard);\n        }\n    }\n\n    /**\n     * Dispatch event to unassign the current user.\n     * @param {*} event\n     */\n    _unassignSelf(event) {\n        let target = event.target.closest(selectors.UNASSIGNSELF);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('unassignUser', data.id);\n    }\n\n    /**\n     * Show modal form to edit card details.\n     * @param {*} event\n     */\n    _editDetails(event) {\n        event.preventDefault();\n\n        const modalForm = new ModalForm({\n            formClass: \"mod_kanban\\\\form\\\\edit_card_form\",\n            args: {\n                id: this.id,\n                boardid: this.boardid,\n                cmid: this.cmid,\n                groupid: this.groupid,\n                userid: this.user\n            },\n            modalConfig: {title: getString('editcard', 'mod_kanban')},\n            returnFocus: this.getElement(),\n        });\n        this.addEventListener(modalForm, modalForm.events.FORM_SUBMITTED, this._updateCard);\n        modalForm.show();\n    }\n\n    /**\n     * Dispatch an event to update card data from the detail modal.\n     * @param {*} event\n     */\n    _updateCard(event) {\n        this.reactive.dispatch('processUpdates', event.detail);\n    }\n\n    /**\n     * Update relative time.\n     * @param {int} timestamp\n     * @returns {string}\n     */\n    updateRelativeTime(timestamp) {\n        let elapsed = new Date(timestamp) - new Date();\n        for (var u in this._units) {\n            if (Math.abs(elapsed) > this._units[u] || u == 'second') {\n                return this.rtf.format(Math.round(elapsed / this._units[u]), u);\n            }\n        }\n        return '';\n    }\n\n    /**\n     * Format due date.\n     */\n    _dueDateFormat() {\n        // Convert timestamp to ms.\n        let duedate = this.getElement(selectors.DUEDATE).dataset.date * 1000;\n        if (duedate > 0) {\n            let element = this.getElement(selectors.DUEDATE);\n            element.innerHTML = this.updateRelativeTime(duedate);\n            if (duedate < new Date().getTime()) {\n                element.classList.add('mod_kanban_overdue');\n            } else {\n                element.classList.remove('mod_kanban_overdue');\n            }\n        } else {\n            this.getElement(selectors.DUEDATE).innerHTML = '';\n        }\n    }\n}\n"],"names":["KanbanComponent","year","month","day","hour","minute","second","target","this","element","document","getElementById","create","id","dataset","getWatchers","watch","handler","_cardUpdated","_cardDeleted","_discussionUpdated","stateReady","state","lang","undefined","common","rtf","Intl","RelativeTimeFormat","numeric","addEventListener","getElement","selectors","DELETECARD","_removeConfirm","ADDCARD","_addCard","COMPLETE","_completeCard","UNCOMPLETE","_uncompleteCard","ASSIGNSELF","_assignSelf","UNASSIGNSELF","_unassignSelf","EDITDETAILS","_editDetails","DISCUSSIONMODALTRIGGER","_updateDiscussion","DISCUSSIONSHOW","DISCUSSIONSEND","_sendMessage","draggable","dragdrop","DragDrop","checkDragging","boardid","board","cmid","user","groupid","_dueDateFormat","event","_removeCard","_removeMessageConfirm","_removeMessage","el","DISCUSSIONINPUT","message","value","trim","reactive","dispatch","DISCUSSIONMODAL","classList","add","DISCUSSIONMODALTITLE","innerHTML","cards","get","title","data","discussions","exporter","exportDiscussion","renderForPromise","then","_ref","html","DISCUSSION","remove","DISCUSSIONMESSAGES","scrollTop","scrollHeight","forEach","d","DELETEMESSAGE","catch","error","closest","Object","assign","columnid","card","kanban_column","querySelector","COLUMNINNER","appendChild","setAttribute","assignees","ASSIGNEES","assignedUsers","getElements","ASSIGNEDUSER","userids","map","v","userid","additional","filter","x","includes","assignedUser","parentNode","removeChild","toggleClass","length","async","placeholder","createElement","userdata","users","cardid","exportCapabilities","newelement","renderComponent","replaceChild","selfassigned","completed","INPLACEEDITABLE","removeAttribute","DESCRIPTIONMODALTITLE","description","DESCRIPTIONMODALBODY","attachments","_ref3","DESCRIPTIONMODALFOOTER","hasdescription","hasattachment","duedate","DUEDATE","discussion","options","JSON","parse","background","highlight","setTimeout","destroy","unregister","getDraggableData","type","stateManager","capabilities","setDraggable","validateDropData","dropdata","drop","newcolumn","aftercard","preventDefault","modalForm","ModalForm","formClass","args","modalConfig","returnFocus","events","FORM_SUBMITTED","_updateCard","show","detail","updateRelativeTime","timestamp","elapsed","Date","u","_units","Math","abs","format","round","date","getTime"],"mappings":"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"}