{"version":3,"file":"card.min.js","sources":["../src/card.js"],"sourcesContent":["import {DragDrop} from 'core/reactive';\nimport selectors from 'mod_kanban/selectors';\nimport exporter from 'mod_kanban/exporter';\nimport {saveCancel} from 'core/notification';\nimport ModalForm from 'core_form/modalform';\nimport {get_string as getString} from 'core/str';\nimport {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\nimport KanbanComponent from 'mod_kanban/kanbancomponent';\n\n\n/**\n * Component representing a card in a kanban board.\n */\nexport default class extends KanbanComponent {\n    /**\n     * For relative time helper.\n     */\n    _units = {\n        year: 24 * 60 * 60 * 1000 * 365,\n        month: 24 * 60 * 60 * 1000 * 365 / 12,\n        day: 24 * 60 * 60 * 1000,\n        hour: 60 * 60 * 1000,\n        minute: 60 * 1000,\n        second: 1000\n    };\n\n    /**\n     * Function to initialize component, called by mustache template.\n     * @param {*} target The id of the HTMLElement to attach to\n     * @returns {BaseComponent} New component attached to the HTMLElement represented by target\n     */\n    static init(target) {\n        let element = document.getElementById(target);\n        return new this({\n            element: element,\n        });\n    }\n\n    /**\n     * Called after the component was created.\n     */\n    create() {\n        this.id = this.element.dataset.id;\n    }\n\n    /**\n     * Watchers for this component.\n     * @returns {array} All watchers for this component\n     */\n    getWatchers() {\n        return [\n            {watch: `cards[${this.id}]:updated`, handler: this._cardUpdated},\n            {watch: `cards[${this.id}]:deleted`, handler: this._cardDeleted},\n            {watch: `discussions:created`, handler: this._discussionUpdated},\n            {watch: `discussions:updated`, handler: this._discussionUpdated},\n            {watch: `discussions:deleted`, handler: this._discussionUpdated},\n            {watch: `history:created`, handler: this._historyUpdated},\n            {watch: `history:updated`, handler: this._historyUpdated},\n            {watch: `history:deleted`, handler: this._historyUpdated},\n        ];\n    }\n\n    /**\n     * Called once when state is ready (also if component is registered after initial state was set), attaching event\n     * isteners and initializing drag and drop.\n     * @param {*} state The initial state\n     */\n    stateReady(state) {\n        // Get language for relative time formatting.\n        let lang = 'en';\n        if (state.common.lang !== undefined) {\n            lang = state.common.lang;\n        }\n        this.rtf = new Intl.RelativeTimeFormat(lang, {numeric: 'auto'});\n\n        this.addEventListener(\n            this.getElement(selectors.DELETECARD, this.id),\n            'click',\n            this._removeConfirm\n        );\n        this.addEventListener(\n            this.getElement(selectors.ADDCARD, this.id),\n            'click',\n            this._addCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.COMPLETE, this.id),\n            'click',\n            this._completeCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.UNCOMPLETE, this.id),\n            'click',\n            this._uncompleteCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.ASSIGNSELF, this.id),\n            'click',\n            this._assignSelf\n        );\n        this.addEventListener(\n            this.getElement(selectors.UNASSIGNSELF, this.id),\n            'click',\n            this._unassignSelf\n        );\n        this.addEventListener(\n            this.getElement(selectors.EDITDETAILS, this.id),\n            'click',\n            this._editDetails\n        );\n        this.addEventListener(\n            this.getElement(selectors.DISCUSSIONMODALTRIGGER),\n            'click',\n            this._updateDiscussion\n        );\n        this.addEventListener(\n            this.getElement(selectors.DISCUSSIONSHOW, this.id),\n            'click',\n            this._updateDiscussion\n        );\n        this.addEventListener(\n            this.getElement(selectors.DISCUSSIONSEND),\n            'click',\n            this._sendMessage\n        );\n        this.addEventListener(\n            this.getElement(selectors.HISTORYMODALTRIGGER),\n            'click',\n            this._updateHistory\n        );\n        this.addEventListener(\n            this.getElement(selectors.MOVEMODALTRIGGER),\n            'click',\n            this._showMoveModal\n        );\n\n        this.draggable = false;\n        this.dragdrop = new DragDrop(this);\n        this.checkDragging(state);\n        this.boardid = state.board.id;\n        this.cmid = state.common.id;\n        this.userid = state.board.userid;\n        this.groupid = state.board.groupid;\n        this._dueDateFormat();\n    }\n\n    /**\n     * Show modal to move a column.\n     */\n    _showMoveModal() {\n        let data = exporter.exportStateForTemplate(this.reactive.state);\n        data.cardid = this.id;\n        data.kanbancolumn = this.reactive.state.cards.get(this.id).kanban_column;\n        saveCancel(\n            getString('movecard', 'mod_kanban'),\n            Templates.render('mod_kanban/movemodal', data),\n            getString('move', 'core'),\n            () => {\n                let column = document.querySelector(selectors.MOVECARDCOLUMN + `[data-id=\"${this.id}\"]`).value;\n                let aftercard = document.querySelector(selectors.MOVECARDAFTERCARD + `[data-id=\"${this.id}\"]`).value;\n                this.reactive.dispatch('moveCard', this.id, column, aftercard);\n            }\n        );\n    }\n\n    /**\n     * Display confirmation modal for deleting a card.\n     * @param {*} event\n     */\n    _removeConfirm(event) {\n        saveCancel(\n            getString('deletecard', 'mod_kanban'),\n            getString('deletecardconfirm', 'mod_kanban'),\n            getString('delete', 'core'),\n            () => {\n                this._removeCard(event);\n            }\n        );\n    }\n\n    /**\n     * Display confirmation modal for deleting a discussion message.\n     * @param {*} event\n     */\n    _removeMessageConfirm(event) {\n        saveCancel(\n            getString('deletemessage', 'mod_kanban'),\n            getString('deletemessageconfirm', 'mod_kanban'),\n            getString('delete', 'core'),\n            () => {\n                this._removeMessage(event);\n            }\n        );\n    }\n\n    /**\n     * Dispatch event to add a message to discussion.\n     */\n    _sendMessage() {\n        let el = this.getElement(selectors.DISCUSSIONINPUT);\n        let message = el.value.trim();\n        if (message != '') {\n            this.reactive.dispatch('sendDiscussionMessage', this.id, message);\n            el.value = '';\n        }\n    }\n\n    /**\n     * Dispatch event to update the discussion data.\n     */\n    _updateDiscussion() {\n        this.getElement(selectors.DISCUSSIONMODAL).classList.add('mod_kanban_loading');\n        this.reactive.dispatch('getDiscussionUpdates', this.id);\n    }\n\n    /**\n     * Called when discussion was updated.\n     */\n    async _discussionUpdated() {\n        let data = {\n            discussions: exporter.exportDiscussion(this.reactive.state, this.id)\n        };\n        Templates.renderForPromise('mod_kanban/discussionmessages', data).then(({html}) => {\n            this.getElement(selectors.DISCUSSION, this.id).innerHTML = html;\n            this.getElement(selectors.DISCUSSIONMODAL, this.id).classList.remove('mod_kanban_loading');\n            let el = this.getElement(selectors.DISCUSSIONMESSAGES);\n            // Scroll down to latest message.\n            el.scrollTop = el.scrollHeight;\n            data.discussions.forEach((d) => {\n                this.addEventListener(this.getElement(selectors.DELETEMESSAGE, d.id), 'click', this._removeMessageConfirm);\n            });\n            return true;\n        }).catch((error) => displayException(error));\n    }\n\n    /**\n     * Dispatch event to update the history data.\n     */\n    _updateHistory() {\n        this.getElement(selectors.HISTORYMODAL).classList.add('mod_kanban_loading');\n        this.reactive.dispatch('getHistoryUpdates', this.id);\n    }\n\n    /**\n     * Called when history was updated.\n     */\n    async _historyUpdated() {\n        let data = {\n            historyitems: exporter.exportHistory(this.reactive.state, this.id)\n        };\n        Templates.renderForPromise('mod_kanban/historyitems', data).then(({html}) => {\n            this.getElement(selectors.HISTORY, this.id).innerHTML = html;\n            this.getElement(selectors.HISTORYMODAL).classList.remove('mod_kanban_loading');\n            // Scroll down to latest history item.\n            let el = this.getElement(selectors.HISTORYITEMS);\n            el.scrollTop = el.scrollHeight;\n            return true;\n        }).catch((error) => displayException(error));\n    }\n\n    /**\n     * Dispatch event to assign the current user to the card.\n     * @param {*} event\n     */\n    _assignSelf(event) {\n        let target = event.target.closest(selectors.ASSIGNSELF);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('assignUser', data.id);\n    }\n\n    /**\n     * Dispatch event to add a card after this card.\n     * @param {*} event\n     */\n    _addCard(event) {\n        document.activeElement.blur();\n        let target = event.target.closest(selectors.ADDCARD);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('addCard', data.columnid, data.id);\n    }\n\n    /**\n     * Called when card is updated.\n     * @param {*} param0\n     */\n    async _cardUpdated({element}) {\n        const card = this.getElement();\n        // Card was moved to another column. Move the element to new card (right position is handled by column component).\n        if (card.dataset.columnid != element.kanban_column) {\n            const col = document.querySelector(selectors.COLUMNINNER + '[data-id=\"' + element.kanban_column + '\"]');\n            col.appendChild(card);\n            this.getElement(selectors.ADDCARD, this.id).setAttribute('data-columnid', element.kanban_column);\n            card.setAttribute('data-columnid', element.kanban_column);\n        }\n        const assignees = this.getElement(selectors.ASSIGNEES, this.id);\n        const assignedUsers = this.getElements(selectors.ASSIGNEDUSER, this.id);\n        const userids = [...assignedUsers].map(v => {\n            return v.dataset.userid;\n        });\n        // Update assignees.\n        if (element.assignees !== undefined) {\n            const additional = element.assignees.filter(x => !userids.includes(x));\n            // Remove all elements that represent users that are no longer assigned to this card.\n            if (assignedUsers !== null) {\n                assignedUsers.forEach(assignedUser => {\n                    if (!element.assignees.includes(assignedUser.dataset.userid)) {\n                        assignedUser.parentNode.removeChild(assignedUser);\n                    }\n                });\n            }\n            this.toggleClass(element.assignees.length == 0, 'mod_kanban_unassigned');\n            // Add new assignees.\n            if (element.assignees.length > 0) {\n                additional.forEach(async user => {\n                    let userdata = this.reactive.state.users.get(user);\n                    let data = Object.assign({cardid: element.id}, userdata);\n                    data = Object.assign(data, exporter.exportCapabilities(this.reactive.state));\n                    Templates.renderForPromise('mod_kanban/user', data).then(({html, js}) => {\n                        Templates.appendNodeContents(assignees, html, js);\n                        return true;\n                    }).catch((error) => displayException(error));\n                });\n            }\n        }\n        this.toggleClass(element.selfassigned, 'mod_kanban_selfassigned');\n        // Set card completion state.\n        if (element.completed !== undefined) {\n            this.toggleClass(element.completed == 1, 'mod_kanban_closed');\n            if (element.completed == 1) {\n                this.getElement(selectors.INPLACEEDITABLE).removeAttribute('data-inplaceeditable');\n            } else {\n                this.getElement(selectors.INPLACEEDITABLE).setAttribute('data-inplaceeditable', '1');\n            }\n        }\n        // Update title (also in modals).\n        if (element.title !== undefined) {\n            this.getElement(selectors.INPLACEEDITABLE).setAttribute('data-value', element.title);\n            this.getElement(selectors.INPLACEEDITABLE).querySelector('a').innerHTML = element.title;\n            this.getElement(selectors.DESCRIPTIONMODALTITLE).innerHTML = element.title;\n            this.getElement(selectors.DISCUSSIONMODALTITLE).innerHTML = element.title;\n        }\n        // Update description.\n        if (element.description !== undefined) {\n            this.getElement(selectors.DESCRIPTIONMODALBODY).innerHTML = element.description;\n        }\n        // Render attachments in description modal.\n        if (element.attachments !== undefined) {\n            Templates.renderForPromise('mod_kanban/attachmentitems', {attachments: element.attachments}).then(({html}) => {\n                this.getElement(selectors.DESCRIPTIONMODALFOOTER).innerHTML = html;\n                return true;\n            }).catch((error) => displayException(error));\n        }\n        this.toggleClass(element.hasdescription, 'mod_kanban_hasdescription');\n        this.toggleClass(element.hasattachment, 'mod_kanban_hasattachment');\n        // Update due date.\n        if (element.duedate !== undefined) {\n            this.getElement(selectors.DUEDATE).setAttribute('data-date', element.duedate);\n            this._dueDateFormat();\n        }\n        this.toggleClass(element.discussion, 'mod_kanban_hasdiscussion');\n        // Only option for now is background color.\n        if (element.options !== undefined) {\n            let options = JSON.parse(element.options);\n            if (options.background === undefined) {\n                this.getElement().removeAttribute('style');\n            } else {\n                this.getElement().setAttribute('style', 'background-color: ' + options.background);\n            }\n        }\n        // Enable/disable dragging (e.g. if user is not assigned to the card anymore).\n        this.checkDragging();\n    }\n\n    /**\n     * Delete this card.\n     */\n    _cardDeleted() {\n        this.destroy();\n    }\n\n    /**\n     * Dispatch event to remove this card.\n     * @param {*} event\n     */\n    _removeCard(event) {\n        let target = event.target.closest(selectors.DELETECARD);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('deleteCard', data.id);\n    }\n\n    /**\n     * Dispatch event to remove this card.\n     * @param {*} event\n     */\n    _removeMessage(event) {\n        let target = event.target.closest(selectors.DELETEMESSAGE);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('deleteMessage', data.id);\n    }\n\n    /**\n     * Dispatch event to complete this card.\n     * @param {*} event\n     */\n    _completeCard(event) {\n        let target = event.target.closest(selectors.COMPLETE);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('completeCard', data.id);\n    }\n\n    /**\n     * Dispatch event to complete this card.\n     * @param {*} event\n     */\n    _uncompleteCard(event) {\n        let target = event.target.closest(selectors.UNCOMPLETE);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('uncompleteCard', data.id);\n    }\n\n    /**\n     * Remove all subcomponents dependencies.\n     */\n    destroy() {\n        if (this.dragdrop !== undefined) {\n            this.dragdrop.unregister();\n        }\n    }\n\n    /**\n     * Get the draggable data of this component.\n     * @returns {object}\n     */\n    getDraggableData() {\n        return {\n            id: this.id,\n            type: 'card',\n        };\n    }\n\n    /**\n     * Conditionally enable / disable dragging.\n     * @param {*} state\n     */\n    checkDragging(state) {\n        if (state === undefined) {\n            state = this.reactive.stateManager.state;\n        }\n        // User may move the card if he/she has moveallcards capability or has moveassignedcards\n        // capability and is currently assigned to the card.\n        if (state.capabilities.get('moveallcards').value ||\n            (state.capabilities.get('moveassignedcards').value &&\n            state.cards.get(this.id).assignees.includes(state.common.userid))) {\n            this.draggable = true;\n            this.dragdrop.setDraggable(true);\n        } else {\n            this.draggable = false;\n            this.dragdrop.setDraggable(false);\n        }\n    }\n\n    /**\n     * Validate draggable data.\n     * @param {object} dropdata\n     * @returns {boolean} if the data is valid for this drop-zone.\n     */\n    validateDropData(dropdata) {\n        return dropdata?.type == 'card';\n    }\n\n    /**\n     * Executed when a valid dropdata is dropped over the drop-zone.\n     * @param {object} dropdata\n     */\n    drop(dropdata) {\n        if (dropdata.id != this.id) {\n            let newcolumn = this.getElement(selectors.ADDCARD, this.id).dataset.columnid;\n            let aftercard = this.id;\n            this.reactive.dispatch('moveCard', dropdata.id, newcolumn, aftercard);\n        }\n    }\n\n    /**\n     * Dispatch event to unassign the current user.\n     * @param {*} event\n     */\n    _unassignSelf(event) {\n        let target = event.target.closest(selectors.UNASSIGNSELF);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('unassignUser', data.id);\n    }\n\n    /**\n     * Show modal form to edit card details.\n     * @param {*} event\n     */\n    _editDetails(event) {\n        event.preventDefault();\n\n        const modalForm = new ModalForm({\n            formClass: \"mod_kanban\\\\form\\\\edit_card_form\",\n            args: {\n                id: this.id,\n                boardid: this.boardid,\n                cmid: this.cmid,\n                groupid: this.groupid,\n                userid: this.userid\n            },\n            modalConfig: {title: getString('editcard', 'mod_kanban')},\n            returnFocus: this.getElement(),\n        });\n        this.addEventListener(modalForm, modalForm.events.FORM_SUBMITTED, this._updateCard);\n        modalForm.show();\n    }\n\n    /**\n     * Dispatch an event to update card data from the detail modal.\n     * @param {*} event\n     */\n    _updateCard(event) {\n        this.reactive.dispatch('processUpdates', event.detail);\n    }\n\n    /**\n     * Update relative time.\n     * @param {int} timestamp\n     * @returns {string}\n     */\n    updateRelativeTime(timestamp) {\n        let elapsed = new Date(timestamp) - new Date();\n        for (var u in this._units) {\n            if (Math.abs(elapsed) > this._units[u] || u == 'second') {\n                return this.rtf.format(Math.round(elapsed / this._units[u]), u);\n            }\n        }\n        return '';\n    }\n\n    /**\n     * Format due date using relative time.\n     */\n    _dueDateFormat() {\n        // Convert timestamp to ms.\n        let duedate = this.getElement(selectors.DUEDATE).dataset.date * 1000;\n        if (duedate > 0) {\n            let element = this.getElement(selectors.DUEDATE);\n            element.innerHTML = this.updateRelativeTime(duedate);\n            if (duedate < new Date().getTime()) {\n                element.classList.add('mod_kanban_overdue');\n            } else {\n                element.classList.remove('mod_kanban_overdue');\n            }\n        } else {\n            this.getElement(selectors.DUEDATE).innerHTML = '';\n        }\n    }\n}\n"],"names":["KanbanComponent","year","month","day","hour","minute","second","target","this","element","document","getElementById","create","id","dataset","getWatchers","watch","handler","_cardUpdated","_cardDeleted","_discussionUpdated","_historyUpdated","stateReady","state","lang","undefined","common","rtf","Intl","RelativeTimeFormat","numeric","addEventListener","getElement","selectors","DELETECARD","_removeConfirm","ADDCARD","_addCard","COMPLETE","_completeCard","UNCOMPLETE","_uncompleteCard","ASSIGNSELF","_assignSelf","UNASSIGNSELF","_unassignSelf","EDITDETAILS","_editDetails","DISCUSSIONMODALTRIGGER","_updateDiscussion","DISCUSSIONSHOW","DISCUSSIONSEND","_sendMessage","HISTORYMODALTRIGGER","_updateHistory","MOVEMODALTRIGGER","_showMoveModal","draggable","dragdrop","DragDrop","checkDragging","boardid","board","cmid","userid","groupid","_dueDateFormat","data","exporter","exportStateForTemplate","reactive","cardid","kanbancolumn","cards","get","kanban_column","Templates","render","column","querySelector","MOVECARDCOLUMN","value","aftercard","MOVECARDAFTERCARD","dispatch","event","_removeCard","_removeMessageConfirm","_removeMessage","el","DISCUSSIONINPUT","message","trim","DISCUSSIONMODAL","classList","add","discussions","exportDiscussion","renderForPromise","then","_ref","html","DISCUSSION","innerHTML","remove","DISCUSSIONMESSAGES","scrollTop","scrollHeight","forEach","d","DELETEMESSAGE","catch","error","HISTORYMODAL","historyitems","exportHistory","_ref2","HISTORY","HISTORYITEMS","closest","Object","assign","activeElement","blur","columnid","card","COLUMNINNER","appendChild","setAttribute","assignees","ASSIGNEES","assignedUsers","getElements","ASSIGNEDUSER","userids","map","v","additional","filter","x","includes","assignedUser","parentNode","removeChild","toggleClass","length","async","userdata","users","user","exportCapabilities","_ref4","js","appendNodeContents","selfassigned","completed","INPLACEEDITABLE","removeAttribute","title","DESCRIPTIONMODALTITLE","DISCUSSIONMODALTITLE","description","DESCRIPTIONMODALBODY","attachments","_ref5","DESCRIPTIONMODALFOOTER","hasdescription","hasattachment","duedate","DUEDATE","discussion","options","JSON","parse","background","destroy","unregister","getDraggableData","type","stateManager","capabilities","setDraggable","validateDropData","dropdata","drop","newcolumn","preventDefault","modalForm","ModalForm","formClass","args","modalConfig","returnFocus","events","FORM_SUBMITTED","_updateCard","show","detail","updateRelativeTime","timestamp","elapsed","Date","u","_units","Math","abs","format","round","date","getTime"],"mappings":"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"}