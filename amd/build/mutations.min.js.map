{"version":3,"file":"mutations.min.js","sources":["../src/mutations.js"],"sourcesContent":["import Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport {get_string as getString} from 'core/str';\nimport Log from 'core/log';\n\n/**\n * Mutations library for mod_kanban.\n * The functions are just used to forward data to the webservice.\n */\nexport default class {\n    // Attribute for counting update fails.\n    updateFails = 0;\n\n    async saveAsTemplate(stateManager) {\n        await this._sendChange('save_as_template', stateManager);\n    }\n\n    /**\n     * Delete a card.\n     * @param {*} stateManager StateManager instance\n     * @param {number} cardId Id of the card to be deleted\n     */\n    async deleteCard(stateManager, cardId) {\n        await this._sendChange('delete_card', stateManager, {cardid: cardId});\n    }\n\n    /**\n     * Delete the board.\n     * @param {*} stateManager StateManager instance\n     */\n    async deleteBoard(stateManager) {\n        await this._sendChange('delete_board', stateManager);\n    }\n\n    /**\n     * Add a card after an existing one.\n     * @param {*} stateManager StateManager instance\n     * @param {number} columnId Id of the column\n     * @param {number} afterCard Id of the card before (0 means to insert at the top of the column)\n     */\n    async addCard(stateManager, columnId, afterCard) {\n        await this._sendChange('add_card', stateManager, {columnid: columnId, aftercard: afterCard});\n    }\n\n    /**\n     * Move a card to another column.\n     * @param {*} stateManager StateManager instance\n     * @param {number} cardId Id of the card to be deleted\n     * @param {number} columnId Id of the new column\n     * @param {number} afterCard Id of the card before (0 means to move at the top of the column)\n     */\n    async moveCard(stateManager, cardId, columnId, afterCard) {\n        await this._sendChange('move_card', stateManager, {cardid: cardId, columnid: columnId, aftercard: afterCard});\n    }\n\n    /**\n     * Deletes a column and all cards within.\n     * @param {*} stateManager StateManager instance\n     * @param {number} columnId Id of the column to delete\n     */\n    async deleteColumn(stateManager, columnId) {\n        await this._sendChange('delete_column', stateManager, {columnid: columnId});\n    }\n\n    /**\n     * Adds a new column.\n     * @param {*} stateManager StateManager instance\n     * @param {number} afterColumn Id of the column before (0 means to insert at the left of the board)\n     */\n    async addColumn(stateManager, afterColumn) {\n        await this._sendChange('add_column', stateManager, {aftercol: afterColumn});\n    }\n\n    /**\n     * Moves a column to a new place.\n     * @param {*} stateManager StateManager instance\n     * @param {number} columnId Id of the column to move\n     * @param {number} afterColumn Id of the column before (0 means to insert at the left of the board)\n     */\n    async moveColumn(stateManager, columnId, afterColumn) {\n        await this._sendChange('move_column', stateManager, {columnid: columnId, aftercol: afterColumn});\n    }\n\n    /**\n     * Assign a user to a card.\n     * @param {*} stateManager StateManager instance.\n     * @param {number} cardId Id of the card\n     * @param {number} userId Id of the user to assign (0 means to assign the current user)\n     */\n    async assignUser(stateManager, cardId, userId = 0) {\n        await this._sendChange('assign_user', stateManager, {cardid: cardId, userid: userId});\n    }\n\n    /**\n     * Mark a card as completed.\n     * @param {*} stateManager StateManager instance.\n     * @param {number} cardId Id of the card\n     */\n    async completeCard(stateManager, cardId) {\n        await this._sendChange('set_card_complete', stateManager, {cardid: cardId, state: 1});\n    }\n\n    /**\n     * Mark a card as not completed.\n     * @param {*} stateManager StateManager instance.\n     * @param {number} cardId Id of the card\n     */\n    async uncompleteCard(stateManager, cardId) {\n        await this._sendChange('set_card_complete', stateManager, {cardid: cardId, state: 0});\n    }\n\n    /**\n     * Remove assignment for a user to a card.\n     * @param {*} stateManager StateManager instance.\n     * @param {number} cardId Id of the card\n     * @param {number} userId Id of the user to unassign, defaults to 0 (current user)\n     */\n    async unassignUser(stateManager, cardId, userId = 0) {\n        await this._sendChange('unassign_user', stateManager, {cardid: cardId, userid: userId});\n    }\n\n    /**\n     * Locks a column.\n     * @param {*} stateManager StateManager instance\n     * @param {number} columnId Id of the column to lock\n     */\n    async lockColumn(stateManager, columnId) {\n        await this._sendChange('set_column_locked', stateManager, {columnid: columnId, state: 1});\n    }\n\n    /**\n     * Unlocks a column.\n     * @param {*} stateManager StateManager instance\n     * @param {number} columnId Id of the column to unlock\n     */\n    async unlockColumn(stateManager, columnId) {\n        await this._sendChange('set_column_locked', stateManager, {columnid: columnId, state: 0});\n    }\n\n    /**\n     * Locks all columns of the board.\n     * @param {*} stateManager StateManager instance\n     */\n    async lockColumns(stateManager) {\n        await this._sendChange('set_board_columns_locked', stateManager, {state: 1});\n    }\n\n    /**\n     * Unlocks all columns of the board.\n     * @param {*} stateManager StateManager instance\n     */\n    async unlockColumns(stateManager) {\n        await this._sendChange('set_board_columns_locked', stateManager, {state: 0});\n    }\n\n    /**\n     * Adds a message to discussion.\n     * @param {*} stateManager\n     * @param {*} cardId\n     * @param {*} message\n     */\n    async sendDiscussionMessage(stateManager, cardId, message) {\n        await this._sendChange('add_discussion_message', stateManager, {cardid: cardId, message: message});\n    }\n\n    /**\n     * Delete a message from a discussion.\n     * @param {*} stateManager StateManager instance\n     * @param {number} messageId Id of the message to be deleted\n     */\n    async deleteMessage(stateManager, messageId) {\n        await this._sendChange('delete_discussion_message', stateManager, {messageid: messageId});\n    }\n\n    /**\n     * Push a copy of a card to all boards.\n     * @param {*} stateManager StateManager instance\n     * @param {number} cardId Id of the card to be pushed\n     */\n    async pushCard(stateManager, cardId) {\n        await this._sendChange('push_card_copy', stateManager, {cardid: cardId});\n    }\n\n    /**\n     * Send change request to webservice\n     * @param {string} method Name of the method\n     * @param {*} stateManager StateManager instance\n     * @param {object} data Data to send\n     */\n    async _sendChange(method, stateManager, data) {\n        const state = stateManager.state;\n        const request = {\n            methodname: 'mod_kanban_' + method,\n            args: {\n                cmid: state.common.id,\n                boardid: state.board.id,\n                data: data\n            },\n            fail: this.displayError,\n        };\n\n        let result = null;\n        try {\n            result = await Ajax.call([request])[0];\n        } catch (e) {\n            // If the request cannot be performed (connection loss for example) we need to catch this error here.\n            Log.warn('Sending a change request to the kanban backend failed, probably due to connection loss.');\n            this.processUpdateFail(stateManager);\n            return;\n        }\n\n        this.processUpdates(stateManager, result);\n    }\n\n    /**\n     * Update state.\n     * @param {*} stateManager\n     */\n    async getUpdates(stateManager) {\n        const state = stateManager.state;\n        if (state.board === undefined) {\n            stateManager.setReadOnly(false);\n            stateManager.eventsToPublish.push({\n                eventName: `board:deleted`,\n                eventData: {},\n                action: `deleted`,\n            });\n            stateManager.setReadOnly(true);\n        } else {\n            let result = null;\n            try {\n                result = await Ajax.call([{\n                    methodname: 'mod_kanban_get_kanban_content_update',\n                    args: {\n                        cmid: state.common.id,\n                        boardid: state.board.id,\n                        timestamp: state.common.timestamp,\n                    },\n                    fail: () => {\n                        this.processUpdateFail(stateManager);\n                    },\n                }])[0];\n            } catch (e) {\n                // If the request cannot be performed (connection loss for example) we need to catch this error here.\n                Log.warn('Retrieving the updated state of the kanban board failed, probably due to connection loss.');\n                this.processUpdateFail(stateManager);\n                return;\n            }\n\n            this.processUpdates(stateManager, result);\n        }\n    }\n\n    /**\n     * Count update fails.\n     * @param {*} stateManager\n     */\n    processUpdateFail(stateManager) {\n        const state = stateManager.state;\n        stateManager.setReadOnly(false);\n        state.common.updatefails++;\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Show a modal to display an error message\n     * @param {*} data\n     */\n    async displayError(data) {\n        if (data.message) {\n            // Can switch to direct call of getString when dropping support for Moodle 4.1.\n            await Notification.alert(getString('error'), data.message, getString('cancel'));\n        }\n    }\n\n    /**\n     * Update discussions for a card.\n     * @param {*} stateManager\n     * @param {number} cardId\n     */\n    async getDiscussionUpdates(stateManager, cardId) {\n        const state = stateManager.state;\n        let timestamp = 0;\n        state.discussions.forEach((c) => {\n            if (c.kanban_card == cardId) {\n                if (c.timestamp > timestamp) {\n                    timestamp = c.timestamp;\n                }\n            }\n        });\n\n        const result = await Ajax.call([{\n            methodname: 'mod_kanban_get_discussion_update',\n            args: {\n                cmid: state.common.id,\n                boardid: state.board.id,\n                cardid: cardId,\n                timestamp: timestamp,\n            },\n            fail: () => {\n                this.processUpdateFail(stateManager);\n            },\n        }])[0];\n\n        this.processUpdates(stateManager, result);\n    }\n\n    /**\n     * Update history for a card.\n     * @param {*} stateManager\n     * @param {number} cardId\n     */\n    async getHistoryUpdates(stateManager, cardId) {\n        const state = stateManager.state;\n        let timestamp = 0;\n        state.history.forEach((c) => {\n            if (c.kanban_card == cardId) {\n                if (c.timestamp > timestamp) {\n                    timestamp = c.timestamp;\n                }\n            }\n        });\n\n        const result = await Ajax.call([{\n            methodname: 'mod_kanban_get_history_update',\n            args: {\n                cmid: state.common.id,\n                boardid: state.board.id,\n                cardid: cardId,\n                timestamp: timestamp,\n            },\n            fail: () => {\n                this.processUpdateFail(stateManager);\n            },\n        }])[0];\n\n        this.processUpdates(stateManager, result);\n    }\n\n    /**\n     * Process updates.\n     *\n     * @param {*} stateManager\n     * @param {*} result\n     */\n    async processUpdates(stateManager, result) {\n        let updates = JSON.parse(result.update);\n        stateManager.processUpdates(updates);\n    }\n}\n"],"names":["stateManager","this","_sendChange","cardId","cardid","columnId","afterCard","columnid","aftercard","afterColumn","aftercol","userId","userid","state","message","messageId","messageid","method","data","request","methodname","args","cmid","common","id","boardid","board","fail","displayError","result","Ajax","call","e","warn","processUpdateFail","processUpdates","undefined","setReadOnly","eventsToPublish","push","eventName","eventData","action","timestamp","updatefails","Notification","alert","discussions","forEach","c","kanban_card","history","updates","JSON","parse","update"],"mappings":"kfAWkB,6JAEOA,oBACXC,KAAKC,YAAY,mBAAoBF,+BAQ9BA,aAAcG,cACrBF,KAAKC,YAAY,cAAeF,aAAc,CAACI,OAAQD,2BAO/CH,oBACRC,KAAKC,YAAY,eAAgBF,4BAS7BA,aAAcK,SAAUC,iBAC5BL,KAAKC,YAAY,WAAYF,aAAc,CAACO,SAAUF,SAAUG,UAAWF,2BAUtEN,aAAcG,OAAQE,SAAUC,iBACrCL,KAAKC,YAAY,YAAaF,aAAc,CAACI,OAAQD,OAAQI,SAAUF,SAAUG,UAAWF,+BAQnFN,aAAcK,gBACvBJ,KAAKC,YAAY,gBAAiBF,aAAc,CAACO,SAAUF,2BAQrDL,aAAcS,mBACpBR,KAAKC,YAAY,aAAcF,aAAc,CAACU,SAAUD,+BASjDT,aAAcK,SAAUI,mBAC/BR,KAAKC,YAAY,cAAeF,aAAc,CAACO,SAAUF,SAAUK,SAAUD,+BAStET,aAAcG,YAAQQ,8DAAS,QACtCV,KAAKC,YAAY,cAAeF,aAAc,CAACI,OAAQD,OAAQS,OAAQD,4BAQ9DX,aAAcG,cACvBF,KAAKC,YAAY,oBAAqBF,aAAc,CAACI,OAAQD,OAAQU,MAAO,yBAQjEb,aAAcG,cACzBF,KAAKC,YAAY,oBAAqBF,aAAc,CAACI,OAAQD,OAAQU,MAAO,uBASnEb,aAAcG,YAAQQ,8DAAS,QACxCV,KAAKC,YAAY,gBAAiBF,aAAc,CAACI,OAAQD,OAAQS,OAAQD,0BAQlEX,aAAcK,gBACrBJ,KAAKC,YAAY,oBAAqBF,aAAc,CAACO,SAAUF,SAAUQ,MAAO,uBAQvEb,aAAcK,gBACvBJ,KAAKC,YAAY,oBAAqBF,aAAc,CAACO,SAAUF,SAAUQ,MAAO,sBAOxEb,oBACRC,KAAKC,YAAY,2BAA4BF,aAAc,CAACa,MAAO,wBAOzDb,oBACVC,KAAKC,YAAY,2BAA4BF,aAAc,CAACa,MAAO,gCASjDb,aAAcG,OAAQW,eACxCb,KAAKC,YAAY,yBAA0BF,aAAc,CAACI,OAAQD,OAAQW,QAASA,8BAQzEd,aAAce,iBACxBd,KAAKC,YAAY,4BAA6BF,aAAc,CAACgB,UAAWD,2BAQnEf,aAAcG,cACnBF,KAAKC,YAAY,iBAAkBF,aAAc,CAACI,OAAQD,2BASlDc,OAAQjB,aAAckB,YAC9BL,MAAQb,aAAaa,MACrBM,QAAU,CACZC,WAAY,cAAgBH,OAC5BI,KAAM,CACFC,KAAMT,MAAMU,OAAOC,GACnBC,QAASZ,MAAMa,MAAMF,GACrBN,KAAMA,MAEVS,KAAM1B,KAAK2B,kBAGXC,OAAS,SAETA,aAAeC,cAAKC,KAAK,CAACZ,UAAU,GACtC,MAAOa,uBAEDC,KAAK,qGACJC,kBAAkBlC,mBAItBmC,eAAenC,aAAc6B,yBAOrB7B,oBACPa,MAAQb,aAAaa,cACPuB,IAAhBvB,MAAMa,MACN1B,aAAaqC,aAAY,GACzBrC,aAAasC,gBAAgBC,KAAK,CAC9BC,0BACAC,UAAW,GACXC,mBAEJ1C,aAAaqC,aAAY,OACtB,KACCR,OAAS,SAETA,aAAeC,cAAKC,KAAK,CAAC,CACtBX,WAAY,uCACZC,KAAM,CACFC,KAAMT,MAAMU,OAAOC,GACnBC,QAASZ,MAAMa,MAAMF,GACrBmB,UAAW9B,MAAMU,OAAOoB,WAE5BhB,KAAM,UACGO,kBAAkBlC,kBAE3B,GACN,MAAOgC,uBAEDC,KAAK,uGACJC,kBAAkBlC,mBAItBmC,eAAenC,aAAc6B,SAQ1CK,kBAAkBlC,oBACRa,MAAQb,aAAaa,MAC3Bb,aAAaqC,aAAY,GACzBxB,MAAMU,OAAOqB,cACb5C,aAAaqC,aAAY,sBAOVnB,MACXA,KAAKJ,eAEC+B,sBAAaC,OAAM,mBAAU,SAAU5B,KAAKJ,SAAS,mBAAU,sCASlDd,aAAcG,cAC/BU,MAAQb,aAAaa,UACvB8B,UAAY,EAChB9B,MAAMkC,YAAYC,SAASC,IACnBA,EAAEC,aAAe/C,QACb8C,EAAEN,UAAYA,YACdA,UAAYM,EAAEN,oBAKpBd,aAAeC,cAAKC,KAAK,CAAC,CAC5BX,WAAY,mCACZC,KAAM,CACFC,KAAMT,MAAMU,OAAOC,GACnBC,QAASZ,MAAMa,MAAMF,GACrBpB,OAAQD,OACRwC,UAAWA,WAEfhB,KAAM,UACGO,kBAAkBlC,kBAE3B,QAECmC,eAAenC,aAAc6B,gCAQd7B,aAAcG,cAC5BU,MAAQb,aAAaa,UACvB8B,UAAY,EAChB9B,MAAMsC,QAAQH,SAASC,IACfA,EAAEC,aAAe/C,QACb8C,EAAEN,UAAYA,YACdA,UAAYM,EAAEN,oBAKpBd,aAAeC,cAAKC,KAAK,CAAC,CAC5BX,WAAY,gCACZC,KAAM,CACFC,KAAMT,MAAMU,OAAOC,GACnBC,QAASZ,MAAMa,MAAMF,GACrBpB,OAAQD,OACRwC,UAAWA,WAEfhB,KAAM,UACGO,kBAAkBlC,kBAE3B,QAECmC,eAAenC,aAAc6B,6BASjB7B,aAAc6B,YAC3BuB,QAAUC,KAAKC,MAAMzB,OAAO0B,QAChCvD,aAAamC,eAAeiB"}