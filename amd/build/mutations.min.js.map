{"version":3,"file":"mutations.min.js","sources":["../src/mutations.js"],"sourcesContent":["import Ajax from 'core/ajax';\n/**\n * Mutations library for mod_kanban.\n * The functions are just used to forward data to the webservice.\n */\nexport default class {\n    /**\n     * Delete a card.\n     * @param {*} stateManager StateManager instance\n     * @param {number} cardId Id of the card to be deleted\n     */\n    async deleteCard(stateManager, cardId) {\n        await this.sendChange('delete_card', stateManager, {cardid: cardId});\n    }\n    /**\n     * Add a card after an existing one.\n     * @param {*} stateManager StateManager instance\n     * @param {number} columnId Id of the column\n     * @param {number} afterCard Id of the card before (0 means to insert at the top of the column)\n     */\n    async addCard(stateManager, columnId, afterCard) {\n        await this.sendChange('add_card', stateManager, {columnid: columnId, aftercard: afterCard});\n    }\n    /**\n     * Move a card to another column.\n     * @param {*} stateManager StateManager instance\n     * @param {number} cardId Id of the card to be deleted\n     * @param {number} columnId Id of the new column\n     * @param {number} afterCard Id of the card before (0 means to move at the top of the column)\n     */\n    async moveCard(stateManager, cardId, columnId, afterCard) {\n        await this.sendChange('move_card', stateManager, {cardid: cardId, columnid: columnId, aftercard: afterCard});\n    }\n    /**\n     * Deletes a column and all cards within.\n     * @param {*} stateManager StateManager instance\n     * @param {number} columnId Id of the column to delete\n     */\n    async deleteColumn(stateManager, columnId) {\n        await this.sendChange('delete_column', stateManager, {columnid: columnId});\n    }\n    /**\n     * Adds a new column.\n     * @param {*} stateManager StateManager instance\n     * @param {number} afterColumn Id of the column before (0 means to insert at the left of the board)\n     */\n    async addColumn(stateManager, afterColumn) {\n        await this.sendChange('add_column', stateManager, {aftercol: afterColumn});\n    }\n    /**\n     * Moves a column to a new place.\n     * @param {*} stateManager StateManager instance\n     * @param {number} columnId Id of the column to move\n     * @param {number} afterColumn Id of the column before (0 means to insert at the left of the board)\n     */\n    async moveColumn(stateManager, columnId, afterColumn) {\n        await this.sendChange('move_column', stateManager, {columnid: columnId, aftercol: afterColumn});\n    }\n    /**\n     * Assign a user to a card.\n     * @param {*} stateManager StateManager instance.\n     * @param {number} cardId Id of the card\n     * @param {number} userId Id of the user to assign (0 means to assign the current user)\n     */\n    async assignUser(stateManager, cardId, userId = 0) {\n        await this.sendChange('assign_user', stateManager, {cardid: cardId, userid: userId});\n    }\n    /**\n     * Remove assignment for a user to a card.\n     * @param {*} stateManager StateManager instance.\n     * @param {number} cardId Id of the card\n     * @param {number} userId Id of the user to unassign\n     */\n    async unassignUser(stateManager, cardId, userId) {\n        await this.sendChange('unassign_user', stateManager, {cardid: cardId, userid: userId});\n    }\n\n    /**\n     * Send change request to webservice\n     * @param {string} method Name of the method\n     * @param {*} stateManager StateManager instance\n     * @param {object} data Data to send\n     */\n    async sendChange(method, stateManager, data) {\n        const state = stateManager.state;\n        const result = await Ajax.call([{\n            methodname: 'mod_kanban_change_kanban_content_' + method,\n            args: {\n                cmid: state.board.cmid,\n                boardid: state.board.id,\n                data: data\n            },\n        }])[0];\n\n        let updates = JSON.parse(result.update);\n        stateManager.processUpdates(updates);\n    }\n\n    /**\n     * Update state.\n     * @param {*} stateManager\n     */\n    async getUpdates(stateManager) {\n        const state = stateManager.state;\n        const result = await Ajax.call([{\n            methodname: 'mod_kanban_get_kanban_content',\n            args: {\n                cmid: state.board.cmid,\n                boardid: state.board.id,\n                timestamp: state.board.timestamp,\n            },\n        }])[0];\n\n        let updates = JSON.parse(result.update);\n        stateManager.processUpdates(updates);\n    }\n}"],"names":["stateManager","cardId","this","sendChange","cardid","columnId","afterCard","columnid","aftercard","afterColumn","aftercol","userId","userid","method","data","state","result","Ajax","call","methodname","args","cmid","board","boardid","id","updates","JSON","parse","update","processUpdates","timestamp"],"mappings":"2QAWqBA,aAAcC,cACrBC,KAAKC,WAAW,cAAeH,aAAc,CAACI,OAAQH,uBAQlDD,aAAcK,SAAUC,iBAC5BJ,KAAKC,WAAW,WAAYH,aAAc,CAACO,SAAUF,SAAUG,UAAWF,2BASrEN,aAAcC,OAAQI,SAAUC,iBACrCJ,KAAKC,WAAW,YAAaH,aAAc,CAACI,OAAQH,OAAQM,SAAUF,SAAUG,UAAWF,+BAOlFN,aAAcK,gBACvBH,KAAKC,WAAW,gBAAiBH,aAAc,CAACO,SAAUF,2BAOpDL,aAAcS,mBACpBP,KAAKC,WAAW,aAAcH,aAAc,CAACU,SAAUD,+BAQhDT,aAAcK,SAAUI,mBAC/BP,KAAKC,WAAW,cAAeH,aAAc,CAACO,SAAUF,SAAUK,SAAUD,+BAQrET,aAAcC,YAAQU,8DAAS,QACtCT,KAAKC,WAAW,cAAeH,aAAc,CAACI,OAAQH,OAAQW,OAAQD,4BAQ7DX,aAAcC,OAAQU,cAC/BT,KAAKC,WAAW,gBAAiBH,aAAc,CAACI,OAAQH,OAAQW,OAAQD,0BASjEE,OAAQb,aAAcc,YAC7BC,MAAQf,aAAae,MACrBC,aAAeC,cAAKC,KAAK,CAAC,CAC5BC,WAAY,oCAAsCN,OAClDO,KAAM,CACFC,KAAMN,MAAMO,MAAMD,KAClBE,QAASR,MAAMO,MAAME,GACrBV,KAAMA,SAEV,OAEAW,QAAUC,KAAKC,MAAMX,OAAOY,QAChC5B,aAAa6B,eAAeJ,0BAOfzB,oBACPe,MAAQf,aAAae,MACrBC,aAAeC,cAAKC,KAAK,CAAC,CAC5BC,WAAY,gCACZC,KAAM,CACFC,KAAMN,MAAMO,MAAMD,KAClBE,QAASR,MAAMO,MAAME,GACrBM,UAAWf,MAAMO,MAAMQ,cAE3B,OAEAL,QAAUC,KAAKC,MAAMX,OAAOY,QAChC5B,aAAa6B,eAAeJ"}