{"version":3,"file":"mutations.min.js","sources":["../src/mutations.js"],"sourcesContent":["import Ajax from 'core/ajax';\n/**\n * Mutations library for mod_kanban.\n * The functions are just used to forward data to the webservice.\n */\nexport default class {\n    async saveAsTemplate(stateManager) {\n        await this.sendChange('save_as_template', stateManager);\n    }\n\n    /**\n     * Delete a card.\n     * @param {*} stateManager StateManager instance\n     * @param {number} cardId Id of the card to be deleted\n     */\n    async deleteCard(stateManager, cardId) {\n        await this.sendChange('delete_card', stateManager, {cardid: cardId});\n    }\n\n    /**\n     * Delete the board.\n     * @param {*} stateManager StateManager instance\n     */\n    async deleteBoard(stateManager) {\n        await this.sendChange('delete_board', stateManager);\n    }\n\n    /**\n     * Add a card after an existing one.\n     * @param {*} stateManager StateManager instance\n     * @param {number} columnId Id of the column\n     * @param {number} afterCard Id of the card before (0 means to insert at the top of the column)\n     */\n    async addCard(stateManager, columnId, afterCard) {\n        await this.sendChange('add_card', stateManager, {columnid: columnId, aftercard: afterCard});\n    }\n\n    /**\n     * Move a card to another column.\n     * @param {*} stateManager StateManager instance\n     * @param {number} cardId Id of the card to be deleted\n     * @param {number} columnId Id of the new column\n     * @param {number} afterCard Id of the card before (0 means to move at the top of the column)\n     */\n    async moveCard(stateManager, cardId, columnId, afterCard) {\n        await this.sendChange('move_card', stateManager, {cardid: cardId, columnid: columnId, aftercard: afterCard});\n    }\n\n    /**\n     * Deletes a column and all cards within.\n     * @param {*} stateManager StateManager instance\n     * @param {number} columnId Id of the column to delete\n     */\n    async deleteColumn(stateManager, columnId) {\n        await this.sendChange('delete_column', stateManager, {columnid: columnId});\n    }\n\n    /**\n     * Adds a new column.\n     * @param {*} stateManager StateManager instance\n     * @param {number} afterColumn Id of the column before (0 means to insert at the left of the board)\n     */\n    async addColumn(stateManager, afterColumn) {\n        await this.sendChange('add_column', stateManager, {aftercol: afterColumn});\n    }\n\n    /**\n     * Moves a column to a new place.\n     * @param {*} stateManager StateManager instance\n     * @param {number} columnId Id of the column to move\n     * @param {number} afterColumn Id of the column before (0 means to insert at the left of the board)\n     */\n    async moveColumn(stateManager, columnId, afterColumn) {\n        await this.sendChange('move_column', stateManager, {columnid: columnId, aftercol: afterColumn});\n    }\n\n    /**\n     * Assign a user to a card.\n     * @param {*} stateManager StateManager instance.\n     * @param {number} cardId Id of the card\n     * @param {number} userId Id of the user to assign (0 means to assign the current user)\n     */\n    async assignUser(stateManager, cardId, userId = 0) {\n        await this.sendChange('assign_user', stateManager, {cardid: cardId, userid: userId});\n    }\n\n    /**\n     * Mark a card as completed.\n     * @param {*} stateManager StateManager instance.\n     * @param {number} cardId Id of the card\n     */\n    async completeCard(stateManager, cardId) {\n        await this.sendChange('set_card_complete', stateManager, {cardid: cardId, state: 1});\n    }\n\n    /**\n     * Mark a card as not completed.\n     * @param {*} stateManager StateManager instance.\n     * @param {number} cardId Id of the card\n     */\n    async uncompleteCard(stateManager, cardId) {\n        await this.sendChange('set_card_complete', stateManager, {cardid: cardId, state: 0});\n    }\n\n    /**\n     * Remove assignment for a user to a card.\n     * @param {*} stateManager StateManager instance.\n     * @param {number} cardId Id of the card\n     * @param {number} userId Id of the user to unassign, defaults to 0 (current user)\n     */\n    async unassignUser(stateManager, cardId, userId = 0) {\n        await this.sendChange('unassign_user', stateManager, {cardid: cardId, userid: userId});\n    }\n\n    /**\n     * Locks a column.\n     * @param {*} stateManager StateManager instance\n     * @param {number} columnId Id of the column to lock\n     */\n    async lockColumn(stateManager, columnId) {\n        await this.sendChange('set_column_locked', stateManager, {columnid: columnId, state: 1});\n    }\n\n    /**\n     * Unlocks a column.\n     * @param {*} stateManager StateManager instance\n     * @param {number} columnId Id of the column to unlock\n     */\n    async unlockColumn(stateManager, columnId) {\n        await this.sendChange('set_column_locked', stateManager, {columnid: columnId, state: 0});\n    }\n\n    /**\n     * Locks all columns of the board.\n     * @param {*} stateManager StateManager instance\n     */\n    async lockColumns(stateManager) {\n        await this.sendChange('set_board_columns_locked', stateManager, {state: 1});\n    }\n\n    /**\n     * Unlocks all columns of the board.\n     * @param {*} stateManager StateManager instance\n     */\n    async unlockColumns(stateManager) {\n        await this.sendChange('set_board_columns_locked', stateManager, {state: 0});\n    }\n\n    /**\n     * Adds a message to discussion.\n     * @param {*} stateManager\n     * @param {*} cardId\n     * @param {*} message\n     */\n    async sendDiscussionMessage(stateManager, cardId, message) {\n        await this.sendChange('add_discussion_message', stateManager, {cardid: cardId, message: message});\n    }\n\n    /**\n     * Delete a message from a discussion.\n     * @param {*} stateManager StateManager instance\n     * @param {number} messageId Id of the message to be deleted\n     */\n    async deleteMessage(stateManager, messageId) {\n        await this.sendChange('delete_discussion_message', stateManager, {messageid: messageId});\n    }\n\n    /**\n     * Send change request to webservice\n     * @param {string} method Name of the method\n     * @param {*} stateManager StateManager instance\n     * @param {object} data Data to send\n     */\n    async sendChange(method, stateManager, data) {\n        const state = stateManager.state;\n        const result = await Ajax.call([{\n            methodname: 'mod_kanban_change_kanban_content_' + method,\n            args: {\n                cmid: state.common.id,\n                boardid: state.board.id,\n                data: data\n            },\n        }])[0];\n\n        this.processUpdates(stateManager, result);\n    }\n\n    /**\n     * Update state.\n     * @param {*} stateManager\n     */\n    async getUpdates(stateManager) {\n        const state = stateManager.state;\n        if (state.board === undefined) {\n            stateManager.setReadOnly(false);\n            stateManager.eventsToPublish.push({\n                eventName: `board:deleted`,\n                eventData: {},\n                action: `deleted`,\n            });\n            stateManager.setReadOnly(true);\n        } else {\n            const result = await Ajax.call([{\n                methodname: 'mod_kanban_get_kanban_content_update',\n                args: {\n                    cmid: state.common.id,\n                    boardid: state.board.id,\n                    timestamp: state.common.timestamp,\n                },\n            }])[0];\n\n            this.processUpdates(stateManager, result);\n        }\n    }\n\n    /**\n     * Update discussions for a card.\n     * @param {*} stateManager\n     * @param {number} cardId\n     */\n    async getDiscussionUpdates(stateManager, cardId) {\n        const state = stateManager.state;\n        let timestamp = 0;\n        if (state.discussions.get(cardId) !== undefined) {\n            state.discussions.get(cardId).values.forEach((discussion) => {\n                if (discussion.timestamp === undefined) {\n                    return;\n                }\n                if (discussion.timestamp > timestamp) {\n                    timestamp = discussion.timestamp;\n                }\n            });\n        }\n        const result = await Ajax.call([{\n            methodname: 'mod_kanban_get_discussion_update',\n            args: {\n                cmid: state.common.id,\n                boardid: state.board.id,\n                cardid: cardId,\n                timestamp: timestamp,\n            },\n        }])[0];\n\n        this.processUpdates(stateManager, result);\n    }\n\n    /**\n     * Process updates.\n     *\n     * @param {*} stateManager\n     * @param {*} result\n     */\n    async processUpdates(stateManager, result) {\n        let updates = JSON.parse(result.update);\n        stateManager.processUpdates(updates);\n    }\n}"],"names":["stateManager","this","sendChange","cardId","cardid","columnId","afterCard","columnid","aftercard","afterColumn","aftercol","userId","userid","state","message","messageId","messageid","method","data","result","Ajax","call","methodname","args","cmid","common","id","boardid","board","processUpdates","undefined","setReadOnly","eventsToPublish","push","eventName","eventData","action","timestamp","discussions","get","values","forEach","discussion","updates","JSON","parse","update"],"mappings":"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"}