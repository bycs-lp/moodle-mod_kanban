{"version":3,"file":"mutations.min.js","sources":["../src/mutations.js"],"sourcesContent":["import Ajax from 'core/ajax';\n/**\n * Mutations library for mod_kanban.\n * The functions are just used to forward data to the webservice.\n */\nexport default class {\n    init(stateManager) {\n        stateManager.addUpdateTypes({\n            discussionput: this._discussionPut,\n            discussiondelete: this._discussionDelete,\n        });\n    }\n\n    _discussionPut(stateManager, name, fields) {\n        stateManager.setReadOnly(false);\n        const cardid = parseInt(fields.kanban_card);\n        if (stateManager.state.discussions.get(cardid) === undefined) {\n            stateManager.state.discussions.set(cardid, {'id': cardid, values: []});\n        }\n        stateManager.state.discussions.get(cardid).values[fields.id] = fields;\n        stateManager.eventsToPublish.push({\n            eventName: `${name}:updated`,\n            eventData: fields,\n            action: `updated`,\n        });\n        stateManager.setReadOnly(false);\n    }\n\n    _discussionDelete(stateManager, name, fields) {\n        stateManager.setReadOnly(false);\n        const cardid = parseInt(fields.kanban_card);\n        if (stateManager.state.discussions.get(cardid) !== undefined) {\n            delete stateManager.state.discussions.get(cardid).values[fields.id];\n            stateManager.eventsToPublish.push({\n                eventName: `${name}:updated`,\n                eventData: fields,\n                action: `updated`,\n            });\n        }\n        stateManager.setReadOnly(false);\n    }\n\n    /**\n     * Delete a card.\n     * @param {*} stateManager StateManager instance\n     * @param {number} cardId Id of the card to be deleted\n     */\n    async deleteCard(stateManager, cardId) {\n        await this.sendChange('delete_card', stateManager, {cardid: cardId});\n    }\n\n    /**\n     * Add a card after an existing one.\n     * @param {*} stateManager StateManager instance\n     * @param {number} columnId Id of the column\n     * @param {number} afterCard Id of the card before (0 means to insert at the top of the column)\n     */\n    async addCard(stateManager, columnId, afterCard) {\n        await this.sendChange('add_card', stateManager, {columnid: columnId, aftercard: afterCard});\n    }\n\n    /**\n     * Move a card to another column.\n     * @param {*} stateManager StateManager instance\n     * @param {number} cardId Id of the card to be deleted\n     * @param {number} columnId Id of the new column\n     * @param {number} afterCard Id of the card before (0 means to move at the top of the column)\n     */\n    async moveCard(stateManager, cardId, columnId, afterCard) {\n        await this.sendChange('move_card', stateManager, {cardid: cardId, columnid: columnId, aftercard: afterCard});\n    }\n\n    /**\n     * Deletes a column and all cards within.\n     * @param {*} stateManager StateManager instance\n     * @param {number} columnId Id of the column to delete\n     */\n    async deleteColumn(stateManager, columnId) {\n        await this.sendChange('delete_column', stateManager, {columnid: columnId});\n    }\n\n    /**\n     * Adds a new column.\n     * @param {*} stateManager StateManager instance\n     * @param {number} afterColumn Id of the column before (0 means to insert at the left of the board)\n     */\n    async addColumn(stateManager, afterColumn) {\n        await this.sendChange('add_column', stateManager, {aftercol: afterColumn});\n    }\n\n    /**\n     * Moves a column to a new place.\n     * @param {*} stateManager StateManager instance\n     * @param {number} columnId Id of the column to move\n     * @param {number} afterColumn Id of the column before (0 means to insert at the left of the board)\n     */\n    async moveColumn(stateManager, columnId, afterColumn) {\n        await this.sendChange('move_column', stateManager, {columnid: columnId, aftercol: afterColumn});\n    }\n\n    /**\n     * Assign a user to a card.\n     * @param {*} stateManager StateManager instance.\n     * @param {number} cardId Id of the card\n     * @param {number} userId Id of the user to assign (0 means to assign the current user)\n     */\n    async assignUser(stateManager, cardId, userId = 0) {\n        await this.sendChange('assign_user', stateManager, {cardid: cardId, userid: userId});\n    }\n\n    /**\n     * Mark a card as completed.\n     * @param {*} stateManager StateManager instance.\n     * @param {number} cardId Id of the card\n     */\n    async completeCard(stateManager, cardId) {\n        await this.sendChange('set_card_complete', stateManager, {cardid: cardId, state: 1});\n    }\n\n    /**\n     * Mark a card as not completed.\n     * @param {*} stateManager StateManager instance.\n     * @param {number} cardId Id of the card\n     */\n    async uncompleteCard(stateManager, cardId) {\n        await this.sendChange('set_card_complete', stateManager, {cardid: cardId, state: 0});\n    }\n\n    /**\n     * Remove assignment for a user to a card.\n     * @param {*} stateManager StateManager instance.\n     * @param {number} cardId Id of the card\n     * @param {number} userId Id of the user to unassign, defaults to 0 (current user)\n     */\n    async unassignUser(stateManager, cardId, userId = 0) {\n        await this.sendChange('unassign_user', stateManager, {cardid: cardId, userid: userId});\n    }\n\n    /**\n     * Locks a column.\n     * @param {*} stateManager StateManager instance\n     * @param {number} columnId Id of the column to lock\n     */\n    async lockColumn(stateManager, columnId) {\n        await this.sendChange('set_column_locked', stateManager, {columnid: columnId, state: 1});\n    }\n\n    /**\n     * Unlocks a column.\n     * @param {*} stateManager StateManager instance\n     * @param {number} columnId Id of the column to unlock\n     */\n    async unlockColumn(stateManager, columnId) {\n        await this.sendChange('set_column_locked', stateManager, {columnid: columnId, state: 0});\n    }\n\n    /**\n     * Locks all columns of the board.\n     * @param {*} stateManager StateManager instance\n     */\n    async lockColumns(stateManager) {\n        await this.sendChange('set_board_columns_locked', stateManager, {state: 1});\n    }\n\n    /**\n     * Unlocks all columns of the board.\n     * @param {*} stateManager StateManager instance\n     */\n    async unlockColumns(stateManager) {\n        await this.sendChange('set_board_columns_locked', stateManager, {state: 0});\n    }\n\n    /**\n     * Adds a message to discussion.\n     * @param {*} stateManager\n     * @param {*} cardId\n     * @param {*} message\n     */\n    async sendDiscussionMessage(stateManager, cardId, message) {\n        await this.sendChange('add_discussion_message', stateManager, {cardid: cardId, message: message});\n    }\n\n    /**\n     * Delete a message from a discussion.\n     * @param {*} stateManager StateManager instance\n     * @param {number} messageId Id of the message to be deleted\n     */\n    async deleteMessage(stateManager, messageId) {\n        await this.sendChange('delete_discussion_message', stateManager, {messageid: messageId});\n    }\n\n    /**\n     * Send change request to webservice\n     * @param {string} method Name of the method\n     * @param {*} stateManager StateManager instance\n     * @param {object} data Data to send\n     */\n    async sendChange(method, stateManager, data) {\n        const state = stateManager.state;\n        const result = await Ajax.call([{\n            methodname: 'mod_kanban_change_kanban_content_' + method,\n            args: {\n                cmid: state.common.id,\n                boardid: state.board.id,\n                data: data\n            },\n        }])[0];\n\n        this.processUpdates(stateManager, result);\n    }\n\n    /**\n     * Update state.\n     * @param {*} stateManager\n     */\n    async getUpdates(stateManager) {\n        const state = stateManager.state;\n        const result = await Ajax.call([{\n            methodname: 'mod_kanban_get_kanban_content_update',\n            args: {\n                cmid: state.common.id,\n                boardid: state.board.id,\n                timestamp: state.common.timestamp,\n            },\n        }])[0];\n\n        this.processUpdates(stateManager, result);\n    }\n\n    /**\n     * Update discussions for a card.\n     * @param {*} stateManager\n     * @param {number} cardId\n     */\n    async getDiscussionUpdates(stateManager, cardId) {\n        const state = stateManager.state;\n        let timestamp = 0;\n        if (state.discussions.get(cardId) !== undefined) {\n            state.discussions.get(cardId).values.forEach((discussion) => {\n                if (discussion.timestamp === undefined) {\n                    return;\n                }\n                if (discussion.timestamp > timestamp) {\n                    timestamp = discussion.timestamp;\n                }\n            });\n        }\n        const result = await Ajax.call([{\n            methodname: 'mod_kanban_get_discussion_update',\n            args: {\n                cmid: state.common.id,\n                boardid: state.board.id,\n                cardid: cardId,\n                timestamp: timestamp,\n            },\n        }])[0];\n\n        this.processUpdates(stateManager, result);\n    }\n\n    /**\n     * Process updates.\n     *\n     * @param {*} stateManager\n     * @param {*} result\n     */\n    async processUpdates(stateManager, result) {\n        let updates = JSON.parse(result.update);\n        stateManager.processUpdates(updates);\n    }\n}"],"names":["init","stateManager","addUpdateTypes","discussionput","this","_discussionPut","discussiondelete","_discussionDelete","name","fields","setReadOnly","cardid","parseInt","kanban_card","undefined","state","discussions","get","set","values","id","eventsToPublish","push","eventName","eventData","action","cardId","sendChange","columnId","afterCard","columnid","aftercard","afterColumn","aftercol","userId","userid","message","messageId","messageid","method","data","result","Ajax","call","methodname","args","cmid","common","boardid","board","processUpdates","timestamp","forEach","discussion","updates","JSON","parse","update"],"mappings":"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"}