define("mod_kanban/card",["exports","core/reactive","mod_kanban/selectors","mod_kanban/exporter","core/notification","core/str"],(function(_exports,_reactive,_selectors,_exporter,_notification,_str){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_selectors=_interopRequireDefault(_selectors),_exporter=_interopRequireDefault(_exporter);class _default extends _reactive.BaseComponent{static init(target){return new this({element:document.getElementById(target)})}create(){this.id=this.element.dataset.id}getWatchers(){return[{watch:"cards[".concat(this.id,"]:updated"),handler:this._cardUpdated},{watch:"cards[".concat(this.id,"]:deleted"),handler:this._cardDeleted}]}stateReady(state){this.addEventListener(this.getElement(_selectors.default.DELETECARD,this.id),"click",this._removeConfirm),this.addEventListener(this.getElement(_selectors.default.ADDCARD,this.id),"click",this._addCard),this.addEventListener(this.getElement(_selectors.default.COMPLETE,this.id),"click",this._completeCard),this.addEventListener(this.getElement(_selectors.default.UNCOMPLETE,this.id),"click",this._uncompleteCard),this.addEventListener(this.getElement(_selectors.default.ASSIGNSELF,this.id),"click",this._assignSelf),this.addEventListener(this.getElement(_selectors.default.UNASSIGNSELF,this.id),"click",this._unassignSelf),this.draggable=!1,this.dragdrop=new _reactive.DragDrop(this),this.checkDragging(state)}_removeConfirm(event){(0,_notification.saveCancel)((0,_str.get_string)("deletecard","mod_kanban"),(0,_str.get_string)("deletecardconfirm","mod_kanban"),(0,_str.get_string)("delete","core"),(()=>{this._removeCard(event)}))}_assignSelf(event){let target=event.target.closest(_selectors.default.ASSIGNSELF),data=Object.assign({},target.dataset);this.reactive.dispatch("assignUser",data.id)}_addCard(event){let target=event.target.closest(_selectors.default.ADDCARD),data=Object.assign({},target.dataset);this.reactive.dispatch("addCard",data.columnid,data.id)}async _cardUpdated(_ref){let{element:element}=_ref;const card=this.getElement();if(card.dataset.columnid!=element.kanban_column){document.querySelector(_selectors.default.COLUMNINNER+'[data-id="'+element.kanban_column+'"]').appendChild(card),this.getElement(_selectors.default.ADDCARD,this.id).setAttribute("data-columnid",element.kanban_column),card.setAttribute("data-columnid",element.kanban_column)}const assignees=this.getElement(_selectors.default.ASSIGNEES,this.id),assignedUsers=this.getElements(_selectors.default.ASSIGNEDUSER,this.id),userids=[...assignedUsers].map((v=>v.dataset.userid)),additional=element.assignees.filter((x=>!userids.includes(x)));null!==assignedUsers&&assignedUsers.forEach((assignedUser=>{element.assignees.includes(assignedUser.dataset.userid)||assignedUser.parentNode.removeChild(assignedUser)})),element.assignees.length>0&&additional.forEach((async user=>{let placeholder=document.createElement("div"),userdata=this.reactive.state.users.get(user),data=Object.assign({cardid:element.id},userdata);data=Object.assign(data,_exporter.default.exportCapabilities(this.reactive.state)),placeholder.setAttribute("data-id",element.id),assignees.appendChild(placeholder);const newelement=(await this.renderComponent(placeholder,"mod_kanban/user",data)).getElement();assignees.replaceChild(newelement,placeholder)})),void 0!==element.selfassigned&&(element.selfassigned?(this.getElement(_selectors.default.ASSIGNSELF,this.id).parentNode.classList.add("hidden"),this.getElement(_selectors.default.UNASSIGNSELF,this.id).parentNode.classList.remove("hidden")):(this.getElement(_selectors.default.ASSIGNSELF,this.id).parentNode.classList.remove("hidden"),this.getElement(_selectors.default.UNASSIGNSELF,this.id).parentNode.classList.add("hidden"))),void 0!==element.completed&&(element.completed?(this.getElement(_selectors.default.COMPLETIONSTATE).classList.remove("hidden"),this.getElement(_selectors.default.UNCOMPLETE).parentNode.classList.remove("hidden"),this.getElement(_selectors.default.COMPLETE).parentNode.classList.add("hidden"),this.getElement(_selectors.default.INPLACEEDITABLE).removeAttribute("data-inplaceeditable")):(this.getElement(_selectors.default.COMPLETIONSTATE).classList.add("hidden"),this.getElement(_selectors.default.UNCOMPLETE).parentNode.classList.add("hidden"),this.getElement(_selectors.default.COMPLETE).parentNode.classList.remove("hidden"),this.getElement(_selectors.default.INPLACEEDITABLE).setAttribute("data-inplaceeditable","1"))),this.checkDragging()}_cardDeleted(){const el=this.getElement();el.parentNode.removeChild(el),this.destroy()}_removeCard(event){let target=event.target.closest('[data-action="delete_card"]'),data=Object.assign({},target.dataset);this.reactive.dispatch("deleteCard",data.id)}_completeCard(event){let target=event.target.closest(_selectors.default.COMPLETE),data=Object.assign({},target.dataset);this.reactive.dispatch("completeCard",data.id)}_uncompleteCard(event){let target=event.target.closest(_selectors.default.UNCOMPLETE),data=Object.assign({},target.dataset);this.reactive.dispatch("uncompleteCard",data.id)}destroy(){void 0!==this.dragdrop&&this.dragdrop.unregister()}getDraggableData(){return{id:this.id,type:"card"}}checkDragging(state){void 0===state&&(state=this.reactive.stateManager.state),state.capabilities.get("moveallcards").value||state.capabilities.get("moveassignedcards").value&&state.cards.get(this.id).assignees.includes(state.board.userid)?(this.draggable=!0,this.dragdrop.setDraggable(!0)):(this.draggable=!1,this.dragdrop.setDraggable(!1))}validateDropData(dropdata){return"card"==(null==dropdata?void 0:dropdata.type)}drop(dropdata){if(dropdata.id!=this.id){let newcolumn=this.getElement(_selectors.default.ADDCARD,this.id).dataset.columnid,aftercard=this.id;this.reactive.dispatch("moveCard",dropdata.id,newcolumn,aftercard)}}_unassignSelf(event){let target=event.target.closest(_selectors.default.UNASSIGNSELF),data=Object.assign({},target.dataset);this.reactive.dispatch("unassignUser",data.id)}}return _exports.default=_default,_exports.default}));

//# sourceMappingURL=card.min.js.map