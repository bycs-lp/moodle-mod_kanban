define("mod_kanban/mutations",["exports","core/ajax"],(function(_exports,_ajax){var obj;Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_ajax=(obj=_ajax)&&obj.__esModule?obj:{default:obj};return _exports.default=class{async deleteCard(stateManager,cardId){await this.sendChange("delete_card",stateManager,{cardid:cardId})}async addCard(stateManager,columnId,afterCard){await this.sendChange("add_card",stateManager,{columnid:columnId,aftercard:afterCard})}async moveCard(stateManager,cardId,columnId,afterCard){await this.sendChange("move_card",stateManager,{cardid:cardId,columnid:columnId,aftercard:afterCard})}async deleteColumn(stateManager,columnId){await this.sendChange("delete_column",stateManager,{columnid:columnId})}async addColumn(stateManager,afterColumn){await this.sendChange("add_column",stateManager,{aftercol:afterColumn})}async moveColumn(stateManager,columnId,afterColumn){await this.sendChange("move_column",stateManager,{columnid:columnId,aftercol:afterColumn})}async assignUser(stateManager,cardId){let userId=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;await this.sendChange("assign_user",stateManager,{cardid:cardId,userid:userId})}async completeCard(stateManager,cardId){await this.sendChange("set_card_complete",stateManager,{cardid:cardId,state:1})}async uncompleteCard(stateManager,cardId){await this.sendChange("set_card_complete",stateManager,{cardid:cardId,state:0})}async unassignUser(stateManager,cardId){let userId=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;await this.sendChange("unassign_user",stateManager,{cardid:cardId,userid:userId})}async lockColumn(stateManager,columnId){await this.sendChange("set_column_locked",stateManager,{columnid:columnId,state:1})}async unlockColumn(stateManager,columnId){await this.sendChange("set_column_locked",stateManager,{columnid:columnId,state:0})}async sendChange(method,stateManager,data){const state=stateManager.state,result=await _ajax.default.call([{methodname:"mod_kanban_change_kanban_content_"+method,args:{cmid:state.board.cmid,boardid:state.board.id,data:data}}])[0];let updates=JSON.parse(result.update);stateManager.processUpdates(updates)}async getUpdates(stateManager){const state=stateManager.state,result=await _ajax.default.call([{methodname:"mod_kanban_get_kanban_content_update",args:{cmid:state.board.cmid,boardid:state.board.id,timestamp:state.board.timestamp}}])[0];let updates=JSON.parse(result.update);stateManager.processUpdates(updates)}},_exports.default}));

//# sourceMappingURL=mutations.min.js.map