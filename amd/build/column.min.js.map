{"version":3,"file":"column.min.js","sources":["../src/column.js"],"sourcesContent":["import {DragDrop} from 'core/reactive';\nimport selectors from 'mod_kanban/selectors';\nimport exporter from 'mod_kanban/exporter';\nimport {saveCancel} from 'core/notification';\nimport {get_string as getString} from 'core/str';\nimport ModalForm from 'core_form/modalform';\nimport KanbanComponent from 'mod_kanban/kanbancomponent';\n\n/**\n * Component representing a column in a kanban board.\n */\nexport default class extends KanbanComponent {\n    /**\n     * Function to initialize component, called by mustache template.\n     * @param {*} target The id of the HTMLElement to attach to\n     * @returns {BaseComponent} New component attached to the HTMLElement represented by target\n     */\n    static init(target) {\n        let element = document.getElementById(target);\n        return new this({\n            element: element,\n        });\n    }\n\n    /**\n     * Called after the component was created.\n     */\n    create() {\n        this.id = this.element.dataset.id;\n    }\n\n    /**\n     * Watchers for this component.\n     * @returns {array}\n     */\n    getWatchers() {\n        return [\n            {watch: `columns[${this.id}]:updated`, handler: this._columnUpdated},\n            {watch: `columns[${this.id}]:deleted`, handler: this._columnDeleted},\n            {watch: `cards:created`, handler: this._cardCreated}\n        ];\n    }\n\n    /**\n     * Called once when state is ready, attaching event listeners and initializing drag and drop.\n     * @param {object} state\n     */\n    stateReady(state) {\n        this.addEventListener(\n            this.getElement(selectors.DELETECOLUMN, this.id),\n            'click',\n            this._removeConfirm\n        );\n        this.addEventListener(\n            this.getElement(selectors.ADDCARDFIRST),\n            'click',\n            this._addCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.ADDCOLUMN, this.id),\n            'click',\n            this._addColumn\n        );\n        this.addEventListener(\n            this.getElement(selectors.LOCKCOLUMN, this.id),\n            'click',\n            this._lockColumn\n        );\n        this.addEventListener(\n            this.getElement(selectors.UNLOCKCOLUMN, this.id),\n            'click',\n            this._unlockColumn\n        );\n        this.addEventListener(\n            this.getElement(selectors.EDITDETAILS, this.id),\n            'click',\n            this._editDetails\n        );\n        this.addEventListener(\n            this.getElement(selectors.SHOWHIDDEN),\n            'click',\n            this._showHidden\n        );\n        this.addEventListener(\n            this.getElement(selectors.HIDEHIDDEN),\n            'click',\n            this._hideHidden\n        );\n        this.draggable = false;\n        this.dragdrop = new DragDrop(this);\n        this.checkDragging(state);\n        this.boardid = state.board.id;\n        this.cmid = state.common.id;\n    }\n\n    /**\n     * Display confirmation modal for deleting a card.\n     * @param {*} event\n     */\n    _removeConfirm(event) {\n        saveCancel(\n            getString('deletecolumn', 'mod_kanban'),\n            getString('deletecolumnconfirm', 'mod_kanban'),\n            getString('delete', 'core'),\n            () => {\n                this._removeColumn(event);\n            }\n        );\n    }\n\n    /**\n     * Remove all subcomponents dependencies.\n     */\n    destroy() {\n        if (this.dragdrop !== undefined) {\n            this.dragdrop.unregister();\n        }\n    }\n\n    /**\n     * Get the draggable data of this component.\n     *\n     * @returns {Object} the draggable data.\n     */\n    getDraggableData() {\n        return {id: this.id, type: 'column'};\n    }\n\n    /**\n     * Conditionally enable / disable dragging.\n     * @param {*} state\n     */\n    checkDragging(state) {\n        if (state === undefined) {\n            state = this.reactive.stateManager.state;\n        }\n\n        if (state.capabilities.get('managecolumns').value && state.columns.get(this.id).locked == 0) {\n            this.dragdrop.setDraggable(true);\n        } else {\n            this.dragdrop.setDraggable(false);\n        }\n    }\n\n    /**\n     * Validate draggable data.\n     * @param {object} dropdata\n     * @returns {boolean} if the data is valid for this drop-zone.\n     */\n    validateDropData(dropdata) {\n        let type = dropdata?.type;\n        return type == 'card' || type == 'column';\n    }\n\n    /**\n     * Executed when a valid dropdata is dropped over the drop-zone.\n     * @param {object} dropdata\n     * @param {object} event\n     */\n    drop(dropdata, event) {\n        if (dropdata.type == 'card') {\n            let cards = this.getElements(selectors.CARD);\n            let aftercard = 0;\n            for (let i = 0; i < cards.length; i++) {\n                if (cards[i].offsetTop + cards[i].clientHeight / 2 <= event.layerY) {\n                    aftercard = cards[i].dataset.id;\n                }\n            }\n            this.reactive.dispatch('moveCard', dropdata.id, this.id, aftercard);\n        }\n        if (dropdata.type == 'column') {\n            if (dropdata.id != this.id) {\n                this.reactive.dispatch('moveColumn', dropdata.id, this.id);\n            }\n        }\n    }\n\n    /**\n     * Optional method to show some visual hints to the user.\n     * @param {object} dropdata\n     * @param {object} event\n     */\n    showDropZone(dropdata, event) {\n        if (dropdata.type == 'card') {\n            let cards = this.getElements(selectors.CARD);\n            let aftercard = 0;\n            for (let i = 0; i < cards.length; i++) {\n                if (cards[i].offsetTop + cards[i].clientHeight / 2 <= event.layerY) {\n                    aftercard = cards[i].dataset.id;\n                }\n            }\n            if (aftercard == 0) {\n                this.getElement(selectors.ADDCARDCONTAINER).classList.add('mod_kanban_insert');\n            } else {\n                this.getElement(selectors.ADDCARDCONTAINER, aftercard).classList.add('mod_kanban_insert');\n            }\n        }\n        if (dropdata.type == 'column') {\n            this.getElement(selectors.ADDCOLUMNCONTAINER).classList.add('mod_kanban_insert');\n        }\n    }\n\n    /**\n     * Optional method to remove visual hints to the user.\n     */\n    hideDropZone() {\n        this.getElement(selectors.ADDCOLUMNCONTAINER).classList.remove('mod_kanban_insert');\n        this.getElements(selectors.ADDCARDCONTAINER).forEach((e) => {\n            e.classList.remove('mod_kanban_insert');\n        });\n    }\n\n    /**\n     * Dispatch event to add a column after this column.\n     * @param {*} event\n     */\n    _addColumn(event) {\n        let target = event.target.closest(selectors.ADDCOLUMN);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('addColumn', data.id);\n    }\n\n    /**\n     * Called when a card was created in this column.\n     * @param {*} param0\n     */\n    async _cardCreated({element}) {\n        if (element.kanban_column == this.id) {\n            let data = Object.assign({\n                id: element.id,\n                title: element.title,\n                options: element.options,\n                // eslint-disable-next-line\n                kanban_column: element.kanban_column,\n            }, exporter.exportCapabilities(this.reactive.state));\n            let placeholder = document.createElement('li');\n            placeholder.setAttribute('data-id', data.id);\n            let node = this.getElement(selectors.COLUMNINNER, this.id);\n            node.appendChild(placeholder);\n            const newcomponent = await this.renderComponent(placeholder, 'mod_kanban/card', data);\n            const newelement = newcomponent.getElement();\n            node.replaceChild(newelement, placeholder);\n            if (element.highlight !== undefined && element.highlight) {\n                newelement.classList.add('mod_kanban_updated');\n                setTimeout(() => this.newelement.classList.remove('mod_kanban_updated'), 3000);\n            }\n        }\n    }\n\n    /**\n     * Dispatch event to add a card in this column.\n     * @param {*} event\n     */\n    _addCard(event) {\n        let target = event.target.closest(selectors.ADDCARD);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('addCard', data.columnid, 0);\n    }\n\n    /**\n     * Called when column is updated.\n     * @param {*} param0\n     */\n    _columnUpdated({element}) {\n        const el = this.getElement(selectors.COLUMNINNER, this.id);\n        if (element.sequence !== undefined) {\n            let sequence = element.sequence.split(',');\n            [...el.children]\n            .forEach((node) => {\n                if (node.classList.contains('mod_kanban_card') && !sequence.includes(node.dataset.id)) {\n                    el.removeChild(node);\n                }\n            });\n            [...el.children]\n            .sort((a, b) => sequence.indexOf(a.dataset.id) > sequence.indexOf(b.dataset.id) ? 1 : -1)\n            .forEach(node => el.appendChild(node));\n        }\n        if (element.locked !== undefined) {\n            this.toggleClass(element.locked != 0, 'mod_kanban_locked_column');\n            if (element.locked != 0) {\n                this.getElement(selectors.INPLACEEDITABLE).removeAttribute('data-inplaceeditable');\n            } else {\n                this.getElement(selectors.INPLACEEDITABLE).setAttribute('data-inplaceeditable', '1');\n            }\n        }\n        if (element.title !== undefined) {\n            this.getElement(selectors.INPLACEEDITABLE).setAttribute('data-value', element.title);\n            this.getElement(selectors.INPLACEEDITABLE).querySelector('a').innerHTML = element.title;\n        }\n        if (element.options !== undefined) {\n            let options = JSON.parse(element.options);\n            this.toggleClass(options.autohide, 'mod_kanban_autohide');\n        }\n        if (element.highlight !== undefined && element.highlight) {\n            this.getElement().classList.add('mod_kanban_updated');\n            setTimeout(() => this.getElement().classList.remove('mod_kanban_updated'), 3000);\n        }\n        this.checkDragging();\n    }\n\n    /**\n     * Called when this column is deleted.\n     */\n    _columnDeleted() {\n        const el = this.getElement();\n        el.parentNode.removeChild(el);\n        this.destroy();\n    }\n\n    /**\n     * Dispatch event to remove this column.\n     * @param {*} event\n     */\n    _removeColumn(event) {\n        let target = event.target.closest(selectors.DELETECOLUMN);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('deleteColumn', data.id);\n    }\n\n    /**\n     * Dispatch event to lock this column.\n     * @param {*} event\n     */\n    _lockColumn(event) {\n        let target = event.target.closest(selectors.LOCKCOLUMN);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('lockColumn', data.id);\n    }\n\n    /**\n     * Dispatch event to unlock this column.\n     * @param {*} event\n     */\n    _unlockColumn(event) {\n        let target = event.target.closest(selectors.UNLOCKCOLUMN);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('unlockColumn', data.id);\n    }\n\n    /**\n     * Show modal form to edit column details.\n     * @param {*} event\n     */\n    _editDetails(event) {\n        event.preventDefault();\n\n        const modalForm = new ModalForm({\n            formClass: \"mod_kanban\\\\form\\\\edit_column_form\",\n            args: {\n                id: this.id,\n                boardid: this.boardid,\n                cmid: this.cmid\n            },\n            modalConfig: {title: getString('editcolumn', 'mod_kanban')},\n            returnFocus: this.getElement(),\n        });\n        this.addEventListener(modalForm, modalForm.events.FORM_SUBMITTED, this._updateColumn);\n        modalForm.show();\n    }\n\n    /**\n     * Dispatch an event to update column data from the detail modal.\n     * @param {*} event\n     */\n    _updateColumn(event) {\n        this.reactive.dispatch('processUpdates', event.detail);\n    }\n\n    /**\n     * Show hidden cards.\n     */\n    _showHidden() {\n        this.getElement().classList.add('mod_kanban_show_hidden');\n    }\n\n    /**\n     * Hide hidden cards.\n     */\n    _hideHidden() {\n        this.getElement().classList.remove('mod_kanban_show_hidden');\n    }\n}"],"names":["KanbanComponent","target","this","element","document","getElementById","create","id","dataset","getWatchers","watch","handler","_columnUpdated","_columnDeleted","_cardCreated","stateReady","state","addEventListener","getElement","selectors","DELETECOLUMN","_removeConfirm","ADDCARDFIRST","_addCard","ADDCOLUMN","_addColumn","LOCKCOLUMN","_lockColumn","UNLOCKCOLUMN","_unlockColumn","EDITDETAILS","_editDetails","SHOWHIDDEN","_showHidden","HIDEHIDDEN","_hideHidden","draggable","dragdrop","DragDrop","checkDragging","boardid","board","cmid","common","event","_removeColumn","destroy","undefined","unregister","getDraggableData","type","reactive","stateManager","capabilities","get","value","columns","locked","setDraggable","validateDropData","dropdata","drop","cards","getElements","CARD","aftercard","i","length","offsetTop","clientHeight","layerY","dispatch","showDropZone","ADDCARDCONTAINER","classList","add","ADDCOLUMNCONTAINER","hideDropZone","remove","forEach","e","closest","data","Object","assign","kanban_column","title","options","exporter","exportCapabilities","placeholder","createElement","setAttribute","node","COLUMNINNER","appendChild","newelement","renderComponent","replaceChild","highlight","setTimeout","ADDCARD","columnid","el","sequence","split","children","contains","includes","removeChild","sort","a","b","indexOf","toggleClass","INPLACEEDITABLE","removeAttribute","querySelector","innerHTML","JSON","parse","autohide","parentNode","preventDefault","modalForm","ModalForm","formClass","args","modalConfig","returnFocus","events","FORM_SUBMITTED","_updateColumn","show","detail"],"mappings":"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"}