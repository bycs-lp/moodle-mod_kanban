{"version":3,"file":"column.min.js","sources":["../src/column.js"],"sourcesContent":["import {BaseComponent, DragDrop} from 'core/reactive';\nimport selectors from 'mod_kanban/selectors';\nimport exporter from 'mod_kanban/exporter';\nimport {saveCancel} from 'core/notification';\nimport {get_string as getString} from 'core/str';\n\n/**\n * Component representing a column in a kanban board.\n */\nexport default class extends BaseComponent {\n    /**\n     * Function to initialize component, called by mustache template.\n     * @param {*} target The id of the HTMLElement to attach to\n     * @returns {BaseComponent} New component attached to the HTMLElement represented by target\n     */\n    static init(target) {\n        let element = document.getElementById(target);\n        return new this({\n            element: element,\n        });\n    }\n\n    /**\n     * Called after the component was created.\n     */\n    create() {\n        this.id = this.element.dataset.id;\n    }\n\n    /**\n     * Watchers for this component.\n     * @returns {array}\n     */\n    getWatchers() {\n        return [\n            {watch: `columns[${this.id}]:updated`, handler: this._columnUpdated},\n            {watch: `columns[${this.id}]:deleted`, handler: this._columnDeleted},\n            {watch: `cards:created`, handler: this._cardCreated}\n        ];\n    }\n\n    /**\n     * Called once when state is ready, attaching event listeners and initializing drag and drop.\n     * @param {object} state\n     */\n    stateReady(state) {\n        this.addEventListener(\n            this.getElement(selectors.DELETECOLUMN, this.id),\n            'click',\n            this._removeConfirm\n        );\n        this.addEventListener(\n            this.getElement(selectors.ADDCARDFIRST),\n            'click',\n            this._addCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.ADDCOLUMN, this.id),\n            'click',\n            this._addColumn\n        );\n        this.draggable = false;\n        this.dragdrop = new DragDrop(this);\n        this.checkDragging(state);\n    }\n\n    /**\n     * Display confirmation modal for deleting a card.\n     * @param {*} event\n     */\n    _removeConfirm(event) {\n        saveCancel(\n            getString('deletecolumn', 'mod_kanban'),\n            getString('deletecolumnconfirm', 'mod_kanban'),\n            getString('delete', 'core'),\n            () => {\n                this._removeColumn(event);\n            }\n        );\n    }\n\n    /**\n     * Remove all subcomponents dependencies.\n     */\n    destroy() {\n        if (this.dragdrop !== undefined) {\n            this.dragdrop.unregister();\n        }\n    }\n\n    /**\n     * Get the draggable data of this component.\n     *\n     * @returns {Object} the draggable data.\n     */\n    getDraggableData() {\n        return {id: this.id, type: 'column'};\n    }\n\n    /**\n     * Conditionally enable / disable dragging.\n     * @param {*} state\n     */\n    checkDragging(state) {\n        if (state === undefined) {\n            state = this.reactive.stateManager.state;\n        }\n\n        if (state.capabilities.get('managecolumns').value) {\n            this.dragdrop.setDraggable(true);\n        } else {\n            this.dragdrop.setDraggable(false);\n        }\n    }\n\n    /**\n     * Validate draggable data.\n     * @param {object} dropdata\n     * @returns {boolean} if the data is valid for this drop-zone.\n     */\n    validateDropData(dropdata) {\n        let type = dropdata?.type;\n        return type == 'card' || type == 'column';\n    }\n\n    /**\n     * Executed when a valid dropdata is dropped over the drop-zone.\n     * @param {object} dropdata\n     * @param {object} event\n     */\n    drop(dropdata, event) {\n        if (dropdata.type == 'card') {\n            let cards = this.getElements(selectors.CARD);\n            let aftercard = 0;\n            for (let i = 0; i < cards.length; i++) {\n                if (cards[i].offsetTop + cards[i].clientHeight / 2 <= event.layerY) {\n                    aftercard = cards[i].dataset.id;\n                }\n            }\n            this.reactive.dispatch('moveCard', dropdata.id, this.id, aftercard);\n        }\n        if (dropdata.type == 'column') {\n            if (dropdata.id != this.id) {\n                this.reactive.dispatch('moveColumn', dropdata.id, this.id);\n            }\n        }\n    }\n\n    /**\n     * Optional method to show some visual hints to the user.\n     * @param {object} dropdata\n     * @param {object} event\n     */\n    showDropZone(dropdata, event) {\n        if (dropdata.type == 'card') {\n            let cards = this.getElements(selectors.CARD);\n            let aftercard = 0;\n            for (let i = 0; i < cards.length; i++) {\n                if (cards[i].offsetTop + cards[i].clientHeight / 2 <= event.layerY) {\n                    aftercard = cards[i].dataset.id;\n                }\n            }\n            if (aftercard == 0) {\n                this.getElement(selectors.ADDCARDCONTAINER).classList.add('mod_kanban_insert');\n            } else {\n                this.getElement(selectors.ADDCARDCONTAINER, aftercard).classList.add('mod_kanban_insert');\n            }\n        }\n        if (dropdata.type == 'column') {\n            this.getElement(selectors.ADDCOLUMNCONTAINER).classList.add('mod_kanban_insert');\n        }\n    }\n\n    /**\n     * Optional method to remove visual hints to the user.\n     */\n    hideDropZone() {\n        this.getElement(selectors.ADDCOLUMNCONTAINER).classList.remove('mod_kanban_insert');\n        this.getElements(selectors.ADDCARDCONTAINER).forEach((e) => {\n            e.classList.remove('mod_kanban_insert');\n        });\n    }\n\n    /**\n     * Dispatch event to add a column after this column.\n     * @param {*} event\n     */\n    _addColumn(event) {\n        let target = event.target.closest(selectors.ADDCOLUMN);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('addColumn', data.id);\n    }\n\n    /**\n     * Called when a card was created in this column.\n     * @param {*} param0\n     */\n    async _cardCreated({element}) {\n        if (element.kanban_column == this.id) {\n            let data = Object.assign({\n                id: element.id,\n                title: element.title,\n                options: element.options,\n                // eslint-disable-next-line\n                kanban_column: element.kanban_column,\n            }, exporter.exportCapabilities(this.reactive.state));\n            let placeholder = document.createElement('li');\n            placeholder.setAttribute('data-id', data.id);\n            let node = this.getElement(selectors.COLUMNINNER, this.id);\n            node.appendChild(placeholder);\n            const newcomponent = await this.renderComponent(placeholder, 'mod_kanban/card', data);\n            const newelement = newcomponent.getElement();\n            node.replaceChild(newelement, placeholder);\n        }\n    }\n\n    /**\n     * Dispatch event to add a card in this column.\n     * @param {*} event\n     */\n    _addCard(event) {\n        let target = event.target.closest(selectors.ADDCARD);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('addCard', data.columnid, 0);\n    }\n\n    /**\n     * Called when column is updated.\n     * @param {*} param0\n     */\n    _columnUpdated({element}) {\n        const el = this.getElement(selectors.COLUMNINNER, this.id);\n        let sequence = element.sequence.split(',');\n        [...el.children]\n        .sort((a, b)=>sequence.indexOf(a.dataset.id) > sequence.indexOf(b.dataset.id) ? 1 : -1)\n        .forEach(node=>el.appendChild(node));\n    }\n\n    /**\n     * Called when this column is deleted.\n     */\n    _columnDeleted() {\n        const el = this.getElement();\n        el.parentNode.removeChild(el);\n        this.destroy();\n    }\n\n    /**\n     * Dispatch event to remove this column.\n     * @param {*} event\n     */\n    _removeColumn(event) {\n        let target = event.target.closest('[data-action=\"delete_column\"]');\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('deleteColumn', data.id);\n    }\n}"],"names":["BaseComponent","target","this","element","document","getElementById","create","id","dataset","getWatchers","watch","handler","_columnUpdated","_columnDeleted","_cardCreated","stateReady","state","addEventListener","getElement","selectors","DELETECOLUMN","_removeConfirm","ADDCARDFIRST","_addCard","ADDCOLUMN","_addColumn","draggable","dragdrop","DragDrop","checkDragging","event","_removeColumn","destroy","undefined","unregister","getDraggableData","type","reactive","stateManager","capabilities","get","value","setDraggable","validateDropData","dropdata","drop","cards","getElements","CARD","aftercard","i","length","offsetTop","clientHeight","layerY","dispatch","showDropZone","ADDCARDCONTAINER","classList","add","ADDCOLUMNCONTAINER","hideDropZone","remove","forEach","e","closest","data","Object","assign","kanban_column","title","options","exporter","exportCapabilities","placeholder","createElement","setAttribute","node","COLUMNINNER","appendChild","newelement","renderComponent","replaceChild","ADDCARD","columnid","el","sequence","split","children","sort","a","b","indexOf","parentNode","removeChild"],"mappings":"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"}