{"version":3,"file":"column.min.js","sources":["../src/column.js"],"sourcesContent":["import {BaseComponent, DragDrop} from 'core/reactive';\nimport selectors from 'mod_kanban/selectors';\nimport exporter from 'mod_kanban/exporter';\nimport {saveCancel} from 'core/notification';\nimport {get_string as getString} from 'core/str';\n\n/**\n * Component representing a column in a kanban board.\n */\nexport default class extends BaseComponent {\n    /**\n     * Function to initialize component, called by mustache template.\n     * @param {*} target The id of the HTMLElement to attach to\n     * @returns {BaseComponent} New component attached to the HTMLElement represented by target\n     */\n    static init(target) {\n        let element = document.getElementById(target);\n        return new this({\n            element: element,\n        });\n    }\n\n    /**\n     * Called after the component was created.\n     */\n    create() {\n        this.id = this.element.dataset.id;\n    }\n\n    /**\n     * Watchers for this component.\n     * @returns {array}\n     */\n    getWatchers() {\n        return [\n            {watch: `columns[${this.id}]:updated`, handler: this._columnUpdated},\n            {watch: `columns[${this.id}]:deleted`, handler: this._columnDeleted},\n            {watch: `cards:created`, handler: this._cardCreated}\n        ];\n    }\n\n    /**\n     * Called once when state is ready, attaching event listeners and initializing drag and drop.\n     * @param {object} state\n     */\n    stateReady(state) {\n        this.addEventListener(\n            this.getElement(selectors.DELETECOLUMN, this.id),\n            'click',\n            this._removeConfirm\n        );\n        this.addEventListener(\n            this.getElement(selectors.ADDCARDFIRST),\n            'click',\n            this._addCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.ADDCOLUMN, this.id),\n            'click',\n            this._addColumn\n        );\n        this.addEventListener(\n            this.getElement(selectors.LOCKCOLUMN, this.id),\n            'click',\n            this._lockColumn\n        );\n        this.addEventListener(\n            this.getElement(selectors.UNLOCKCOLUMN, this.id),\n            'click',\n            this._unlockColumn\n        );\n        this.draggable = false;\n        this.dragdrop = new DragDrop(this);\n        this.checkDragging(state);\n    }\n\n    /**\n     * Display confirmation modal for deleting a card.\n     * @param {*} event\n     */\n    _removeConfirm(event) {\n        saveCancel(\n            getString('deletecolumn', 'mod_kanban'),\n            getString('deletecolumnconfirm', 'mod_kanban'),\n            getString('delete', 'core'),\n            () => {\n                this._removeColumn(event);\n            }\n        );\n    }\n\n    /**\n     * Remove all subcomponents dependencies.\n     */\n    destroy() {\n        if (this.dragdrop !== undefined) {\n            this.dragdrop.unregister();\n        }\n    }\n\n    /**\n     * Get the draggable data of this component.\n     *\n     * @returns {Object} the draggable data.\n     */\n    getDraggableData() {\n        return {id: this.id, type: 'column'};\n    }\n\n    /**\n     * Conditionally enable / disable dragging.\n     * @param {*} state\n     */\n    checkDragging(state) {\n        if (state === undefined) {\n            state = this.reactive.stateManager.state;\n        }\n\n        if (state.capabilities.get('managecolumns').value && state.columns.get(this.id).locked == 0) {\n            this.dragdrop.setDraggable(true);\n        } else {\n            this.dragdrop.setDraggable(false);\n        }\n    }\n\n    /**\n     * Validate draggable data.\n     * @param {object} dropdata\n     * @returns {boolean} if the data is valid for this drop-zone.\n     */\n    validateDropData(dropdata) {\n        let type = dropdata?.type;\n        return type == 'card' || type == 'column';\n    }\n\n    /**\n     * Executed when a valid dropdata is dropped over the drop-zone.\n     * @param {object} dropdata\n     * @param {object} event\n     */\n    drop(dropdata, event) {\n        if (dropdata.type == 'card') {\n            let cards = this.getElements(selectors.CARD);\n            let aftercard = 0;\n            for (let i = 0; i < cards.length; i++) {\n                if (cards[i].offsetTop + cards[i].clientHeight / 2 <= event.layerY) {\n                    aftercard = cards[i].dataset.id;\n                }\n            }\n            this.reactive.dispatch('moveCard', dropdata.id, this.id, aftercard);\n        }\n        if (dropdata.type == 'column') {\n            if (dropdata.id != this.id) {\n                this.reactive.dispatch('moveColumn', dropdata.id, this.id);\n            }\n        }\n    }\n\n    /**\n     * Optional method to show some visual hints to the user.\n     * @param {object} dropdata\n     * @param {object} event\n     */\n    showDropZone(dropdata, event) {\n        if (dropdata.type == 'card') {\n            let cards = this.getElements(selectors.CARD);\n            let aftercard = 0;\n            for (let i = 0; i < cards.length; i++) {\n                if (cards[i].offsetTop + cards[i].clientHeight / 2 <= event.layerY) {\n                    aftercard = cards[i].dataset.id;\n                }\n            }\n            if (aftercard == 0) {\n                this.getElement(selectors.ADDCARDCONTAINER).classList.add('mod_kanban_insert');\n            } else {\n                this.getElement(selectors.ADDCARDCONTAINER, aftercard).classList.add('mod_kanban_insert');\n            }\n        }\n        if (dropdata.type == 'column') {\n            this.getElement(selectors.ADDCOLUMNCONTAINER).classList.add('mod_kanban_insert');\n        }\n    }\n\n    /**\n     * Optional method to remove visual hints to the user.\n     */\n    hideDropZone() {\n        this.getElement(selectors.ADDCOLUMNCONTAINER).classList.remove('mod_kanban_insert');\n        this.getElements(selectors.ADDCARDCONTAINER).forEach((e) => {\n            e.classList.remove('mod_kanban_insert');\n        });\n    }\n\n    /**\n     * Dispatch event to add a column after this column.\n     * @param {*} event\n     */\n    _addColumn(event) {\n        let target = event.target.closest(selectors.ADDCOLUMN);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('addColumn', data.id);\n    }\n\n    /**\n     * Called when a card was created in this column.\n     * @param {*} param0\n     */\n    async _cardCreated({element}) {\n        if (element.kanban_column == this.id) {\n            let data = Object.assign({\n                id: element.id,\n                title: element.title,\n                options: element.options,\n                // eslint-disable-next-line\n                kanban_column: element.kanban_column,\n            }, exporter.exportCapabilities(this.reactive.state));\n            let placeholder = document.createElement('li');\n            placeholder.setAttribute('data-id', data.id);\n            let node = this.getElement(selectors.COLUMNINNER, this.id);\n            node.appendChild(placeholder);\n            const newcomponent = await this.renderComponent(placeholder, 'mod_kanban/card', data);\n            const newelement = newcomponent.getElement();\n            node.replaceChild(newelement, placeholder);\n        }\n    }\n\n    /**\n     * Dispatch event to add a card in this column.\n     * @param {*} event\n     */\n    _addCard(event) {\n        let target = event.target.closest(selectors.ADDCARD);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('addCard', data.columnid, 0);\n    }\n\n    /**\n     * Called when column is updated.\n     * @param {*} param0\n     */\n    _columnUpdated({element}) {\n        const el = this.getElement(selectors.COLUMNINNER, this.id);\n        let sequence = element.sequence.split(',');\n        [...el.children]\n        .forEach((node) => {\n            if (node.classList.contains('mod_kanban_card') && !sequence.includes(node.dataset.id)) {\n                el.removeChild(node);\n            }\n        });\n        [...el.children]\n        .sort((a, b) => sequence.indexOf(a.dataset.id) > sequence.indexOf(b.dataset.id) ? 1 : -1)\n        .forEach(node => el.appendChild(node));\n        if (element.locked) {\n            this.getElement(selectors.UNLOCKCOLUMN).parentNode.classList.remove('hidden');\n            this.getElement(selectors.LOCKCOLUMN).parentNode.classList.add('hidden');\n            this.getElement(selectors.INPLACEEDITABLE).removeAttribute('data-inplaceeditable');\n        } else {\n            this.getElement(selectors.UNLOCKCOLUMN).parentNode.classList.add('hidden');\n            this.getElement(selectors.LOCKCOLUMN).parentNode.classList.remove('hidden');\n            this.getElement(selectors.INPLACEEDITABLE).setAttribute('data-inplaceeditable', '1');\n        }\n        this.checkDragging();\n    }\n\n    /**\n     * Called when this column is deleted.\n     */\n    _columnDeleted() {\n        const el = this.getElement();\n        el.parentNode.removeChild(el);\n        this.destroy();\n    }\n\n    /**\n     * Dispatch event to remove this column.\n     * @param {*} event\n     */\n    _removeColumn(event) {\n        let target = event.target.closest(selectors.DELETECOLUMN);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('deleteColumn', data.id);\n    }\n\n    /**\n     * Dispatch event to lock this column.\n     * @param {*} event\n     */\n    _lockColumn(event) {\n        let target = event.target.closest(selectors.LOCKCOLUMN);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('lockColumn', data.id);\n    }\n\n    /**\n     * Dispatch event to unlock this column.\n     * @param {*} event\n     */\n    _unlockColumn(event) {\n        let target = event.target.closest(selectors.UNLOCKCOLUMN);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('unlockColumn', data.id);\n    }\n}"],"names":["BaseComponent","target","this","element","document","getElementById","create","id","dataset","getWatchers","watch","handler","_columnUpdated","_columnDeleted","_cardCreated","stateReady","state","addEventListener","getElement","selectors","DELETECOLUMN","_removeConfirm","ADDCARDFIRST","_addCard","ADDCOLUMN","_addColumn","LOCKCOLUMN","_lockColumn","UNLOCKCOLUMN","_unlockColumn","draggable","dragdrop","DragDrop","checkDragging","event","_removeColumn","destroy","undefined","unregister","getDraggableData","type","reactive","stateManager","capabilities","get","value","columns","locked","setDraggable","validateDropData","dropdata","drop","cards","getElements","CARD","aftercard","i","length","offsetTop","clientHeight","layerY","dispatch","showDropZone","ADDCARDCONTAINER","classList","add","ADDCOLUMNCONTAINER","hideDropZone","remove","forEach","e","closest","data","Object","assign","kanban_column","title","options","exporter","exportCapabilities","placeholder","createElement","setAttribute","node","COLUMNINNER","appendChild","newelement","renderComponent","replaceChild","ADDCARD","columnid","el","sequence","split","children","contains","includes","removeChild","sort","a","b","indexOf","parentNode","INPLACEEDITABLE","removeAttribute"],"mappings":"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"}