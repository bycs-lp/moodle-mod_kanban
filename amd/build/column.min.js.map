{"version":3,"file":"column.min.js","sources":["../src/column.js"],"sourcesContent":["import {BaseComponent, DragDrop} from 'core/reactive';\nimport selectors from 'mod_kanban/selectors';\nimport exporter from 'mod_kanban/exporter';\nimport {saveCancel} from 'core/notification';\nimport {get_string as getString} from 'core/str';\nimport ModalForm from 'core_form/modalform';\n\n/**\n * Component representing a column in a kanban board.\n */\nexport default class extends BaseComponent {\n    /**\n     * Function to initialize component, called by mustache template.\n     * @param {*} target The id of the HTMLElement to attach to\n     * @returns {BaseComponent} New component attached to the HTMLElement represented by target\n     */\n    static init(target) {\n        let element = document.getElementById(target);\n        return new this({\n            element: element,\n        });\n    }\n\n    /**\n     * Called after the component was created.\n     */\n    create() {\n        this.id = this.element.dataset.id;\n    }\n\n    /**\n     * Watchers for this component.\n     * @returns {array}\n     */\n    getWatchers() {\n        return [\n            {watch: `columns[${this.id}]:updated`, handler: this._columnUpdated},\n            {watch: `columns[${this.id}]:deleted`, handler: this._columnDeleted},\n            {watch: `cards:created`, handler: this._cardCreated}\n        ];\n    }\n\n    /**\n     * Called once when state is ready, attaching event listeners and initializing drag and drop.\n     * @param {object} state\n     */\n    stateReady(state) {\n        this.addEventListener(\n            this.getElement(selectors.DELETECOLUMN, this.id),\n            'click',\n            this._removeConfirm\n        );\n        this.addEventListener(\n            this.getElement(selectors.ADDCARDFIRST),\n            'click',\n            this._addCard\n        );\n        this.addEventListener(\n            this.getElement(selectors.ADDCOLUMN, this.id),\n            'click',\n            this._addColumn\n        );\n        this.addEventListener(\n            this.getElement(selectors.LOCKCOLUMN, this.id),\n            'click',\n            this._lockColumn\n        );\n        this.addEventListener(\n            this.getElement(selectors.UNLOCKCOLUMN, this.id),\n            'click',\n            this._unlockColumn\n        );\n        this.addEventListener(\n            this.getElement(selectors.EDITDETAILS, this.id),\n            'click',\n            this._editDetails\n        );\n        this.draggable = false;\n        this.dragdrop = new DragDrop(this);\n        this.checkDragging(state);\n        this.boardid = state.board.id;\n        this.cmid = state.board.cmid;\n    }\n\n    /**\n     * Display confirmation modal for deleting a card.\n     * @param {*} event\n     */\n    _removeConfirm(event) {\n        saveCancel(\n            getString('deletecolumn', 'mod_kanban'),\n            getString('deletecolumnconfirm', 'mod_kanban'),\n            getString('delete', 'core'),\n            () => {\n                this._removeColumn(event);\n            }\n        );\n    }\n\n    /**\n     * Remove all subcomponents dependencies.\n     */\n    destroy() {\n        if (this.dragdrop !== undefined) {\n            this.dragdrop.unregister();\n        }\n    }\n\n    /**\n     * Get the draggable data of this component.\n     *\n     * @returns {Object} the draggable data.\n     */\n    getDraggableData() {\n        return {id: this.id, type: 'column'};\n    }\n\n    /**\n     * Conditionally enable / disable dragging.\n     * @param {*} state\n     */\n    checkDragging(state) {\n        if (state === undefined) {\n            state = this.reactive.stateManager.state;\n        }\n\n        if (state.capabilities.get('managecolumns').value && state.columns.get(this.id).locked == 0) {\n            this.dragdrop.setDraggable(true);\n        } else {\n            this.dragdrop.setDraggable(false);\n        }\n    }\n\n    /**\n     * Validate draggable data.\n     * @param {object} dropdata\n     * @returns {boolean} if the data is valid for this drop-zone.\n     */\n    validateDropData(dropdata) {\n        let type = dropdata?.type;\n        return type == 'card' || type == 'column';\n    }\n\n    /**\n     * Executed when a valid dropdata is dropped over the drop-zone.\n     * @param {object} dropdata\n     * @param {object} event\n     */\n    drop(dropdata, event) {\n        if (dropdata.type == 'card') {\n            let cards = this.getElements(selectors.CARD);\n            let aftercard = 0;\n            for (let i = 0; i < cards.length; i++) {\n                if (cards[i].offsetTop + cards[i].clientHeight / 2 <= event.layerY) {\n                    aftercard = cards[i].dataset.id;\n                }\n            }\n            this.reactive.dispatch('moveCard', dropdata.id, this.id, aftercard);\n        }\n        if (dropdata.type == 'column') {\n            if (dropdata.id != this.id) {\n                this.reactive.dispatch('moveColumn', dropdata.id, this.id);\n            }\n        }\n    }\n\n    /**\n     * Optional method to show some visual hints to the user.\n     * @param {object} dropdata\n     * @param {object} event\n     */\n    showDropZone(dropdata, event) {\n        if (dropdata.type == 'card') {\n            let cards = this.getElements(selectors.CARD);\n            let aftercard = 0;\n            for (let i = 0; i < cards.length; i++) {\n                if (cards[i].offsetTop + cards[i].clientHeight / 2 <= event.layerY) {\n                    aftercard = cards[i].dataset.id;\n                }\n            }\n            if (aftercard == 0) {\n                this.getElement(selectors.ADDCARDCONTAINER).classList.add('mod_kanban_insert');\n            } else {\n                this.getElement(selectors.ADDCARDCONTAINER, aftercard).classList.add('mod_kanban_insert');\n            }\n        }\n        if (dropdata.type == 'column') {\n            this.getElement(selectors.ADDCOLUMNCONTAINER).classList.add('mod_kanban_insert');\n        }\n    }\n\n    /**\n     * Optional method to remove visual hints to the user.\n     */\n    hideDropZone() {\n        this.getElement(selectors.ADDCOLUMNCONTAINER).classList.remove('mod_kanban_insert');\n        this.getElements(selectors.ADDCARDCONTAINER).forEach((e) => {\n            e.classList.remove('mod_kanban_insert');\n        });\n    }\n\n    /**\n     * Dispatch event to add a column after this column.\n     * @param {*} event\n     */\n    _addColumn(event) {\n        let target = event.target.closest(selectors.ADDCOLUMN);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('addColumn', data.id);\n    }\n\n    /**\n     * Called when a card was created in this column.\n     * @param {*} param0\n     */\n    async _cardCreated({element}) {\n        if (element.kanban_column == this.id) {\n            let data = Object.assign({\n                id: element.id,\n                title: element.title,\n                options: element.options,\n                // eslint-disable-next-line\n                kanban_column: element.kanban_column,\n            }, exporter.exportCapabilities(this.reactive.state));\n            let placeholder = document.createElement('li');\n            placeholder.setAttribute('data-id', data.id);\n            let node = this.getElement(selectors.COLUMNINNER, this.id);\n            node.appendChild(placeholder);\n            const newcomponent = await this.renderComponent(placeholder, 'mod_kanban/card', data);\n            const newelement = newcomponent.getElement();\n            node.replaceChild(newelement, placeholder);\n        }\n    }\n\n    /**\n     * Dispatch event to add a card in this column.\n     * @param {*} event\n     */\n    _addCard(event) {\n        let target = event.target.closest(selectors.ADDCARD);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('addCard', data.columnid, 0);\n    }\n\n    /**\n     * Called when column is updated.\n     * @param {*} param0\n     */\n    _columnUpdated({element}) {\n        const el = this.getElement(selectors.COLUMNINNER, this.id);\n        let sequence = element.sequence.split(',');\n        [...el.children]\n        .forEach((node) => {\n            if (node.classList.contains('mod_kanban_card') && !sequence.includes(node.dataset.id)) {\n                el.removeChild(node);\n            }\n        });\n        [...el.children]\n        .sort((a, b) => sequence.indexOf(a.dataset.id) > sequence.indexOf(b.dataset.id) ? 1 : -1)\n        .forEach(node => el.appendChild(node));\n        if (element.locked) {\n            this.getElement(selectors.UNLOCKCOLUMN).parentNode.classList.remove('hidden');\n            this.getElement(selectors.LOCKCOLUMN).parentNode.classList.add('hidden');\n            this.getElement(selectors.INPLACEEDITABLE).removeAttribute('data-inplaceeditable');\n        } else {\n            this.getElement(selectors.UNLOCKCOLUMN).parentNode.classList.add('hidden');\n            this.getElement(selectors.LOCKCOLUMN).parentNode.classList.remove('hidden');\n            this.getElement(selectors.INPLACEEDITABLE).setAttribute('data-inplaceeditable', '1');\n        }\n        if (element.options !== undefined) {\n            let options = JSON.parse(element.options);\n            if (options.autohide) {\n                this.getElement().classList.add('mod_kanban_autohide');\n            } else {\n                this.getElement().classList.remove('mod_kanban_autohide');\n            }\n        }\n        this.checkDragging();\n    }\n\n    /**\n     * Called when this column is deleted.\n     */\n    _columnDeleted() {\n        const el = this.getElement();\n        el.parentNode.removeChild(el);\n        this.destroy();\n    }\n\n    /**\n     * Dispatch event to remove this column.\n     * @param {*} event\n     */\n    _removeColumn(event) {\n        let target = event.target.closest(selectors.DELETECOLUMN);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('deleteColumn', data.id);\n    }\n\n    /**\n     * Dispatch event to lock this column.\n     * @param {*} event\n     */\n    _lockColumn(event) {\n        let target = event.target.closest(selectors.LOCKCOLUMN);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('lockColumn', data.id);\n    }\n\n    /**\n     * Dispatch event to unlock this column.\n     * @param {*} event\n     */\n    _unlockColumn(event) {\n        let target = event.target.closest(selectors.UNLOCKCOLUMN);\n        let data = Object.assign({}, target.dataset);\n        this.reactive.dispatch('unlockColumn', data.id);\n    }\n\n    /**\n     * Show modal form to edit column details.\n     * @param {*} event\n     */\n    _editDetails(event) {\n        event.preventDefault();\n\n        const modalForm = new ModalForm({\n            formClass: \"mod_kanban\\\\form\\\\edit_column_form\",\n            args: {\n                id: this.id,\n                boardid: this.boardid,\n                cmid: this.cmid\n            },\n            modalConfig: {title: getString('editcolumn', 'mod_kanban')},\n            returnFocus: this.getElement(),\n        });\n        this.addEventListener(modalForm, modalForm.events.FORM_SUBMITTED, this._updateColumn);\n        modalForm.show();\n    }\n\n    /**\n     * Dispatch an event to update column data from the detail modal.\n     * @param {*} event\n     */\n    _updateColumn(event) {\n        this.reactive.dispatch('processUpdates', event.detail);\n    }\n}"],"names":["BaseComponent","target","this","element","document","getElementById","create","id","dataset","getWatchers","watch","handler","_columnUpdated","_columnDeleted","_cardCreated","stateReady","state","addEventListener","getElement","selectors","DELETECOLUMN","_removeConfirm","ADDCARDFIRST","_addCard","ADDCOLUMN","_addColumn","LOCKCOLUMN","_lockColumn","UNLOCKCOLUMN","_unlockColumn","EDITDETAILS","_editDetails","draggable","dragdrop","DragDrop","checkDragging","boardid","board","cmid","event","_removeColumn","destroy","undefined","unregister","getDraggableData","type","reactive","stateManager","capabilities","get","value","columns","locked","setDraggable","validateDropData","dropdata","drop","cards","getElements","CARD","aftercard","i","length","offsetTop","clientHeight","layerY","dispatch","showDropZone","ADDCARDCONTAINER","classList","add","ADDCOLUMNCONTAINER","hideDropZone","remove","forEach","e","closest","data","Object","assign","kanban_column","title","options","exporter","exportCapabilities","placeholder","createElement","setAttribute","node","COLUMNINNER","appendChild","newelement","renderComponent","replaceChild","ADDCARD","columnid","el","sequence","split","children","contains","includes","removeChild","sort","a","b","indexOf","parentNode","INPLACEEDITABLE","removeAttribute","JSON","parse","autohide","preventDefault","modalForm","ModalForm","formClass","args","modalConfig","returnFocus","events","FORM_SUBMITTED","_updateColumn","show","detail"],"mappings":"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"}