{"version":3,"file":"board.min.js","sources":["../src/board.js"],"sourcesContent":["import {BaseComponent, DragDrop} from 'core/reactive';\nimport selectors from 'mod_kanban/selectors';\nimport exporter from 'mod_kanban/exporter';\n/**\n * Component representing a kanban board.\n */\nexport default class extends BaseComponent {\n    static init(target) {\n        let element = document.getElementById(target);\n        return new this({\n            element: element,\n        });\n    }\n\n    create() {\n        this.cmid = this.element.dataset.cmid;\n        this.id = this.element.dataset.id;\n    }\n\n    getWatchers() {\n        return [\n            {watch: `board:updated`, handler: this._boardUpdated},\n            {watch: `columns:created`, handler: this._createColumn},\n        ];\n    }\n\n    async stateReady() {\n        this.addEventListener(\n            this.getElement(selectors.ADDCOLUMNFIRST),\n            'click',\n            this._addColumn\n        );\n        this.dragdrop = new DragDrop(this);\n        this._continuousUpdate();\n    }\n\n    _continuousUpdate() {\n        setTimeout(() => {\n            this.reactive.dispatch('getUpdates');\n            this._continuousUpdate();\n        }, 10000);\n    }\n\n    /**\n     * Remove all subcomponents dependencies.\n     */\n    destroy() {\n        if (this.dragdrop !== undefined) {\n            this.dragdrop.unregister();\n        }\n    }\n\n    _boardUpdated({element}) {\n        const el = this.getElement();\n        let sequence = element.sequence.split(',');\n        [...el.children]\n        .forEach((node) => {\n            if (node.classList.contains('mod_kanban_column') && !sequence.includes(node.dataset.id)) {\n                el.removeChild(node);\n            }\n        });\n        [...el.children]\n        .sort((a, b)=>sequence.indexOf(a.dataset.id) > sequence.indexOf(b.dataset.id) ? 1 : -1)\n        .forEach(node=>el.appendChild(node));\n    }\n\n    async _createColumn({element}) {\n        let data = Object.assign({\n            id: element.id,\n            title: element.title,\n            options: element.options,\n            sequence: element.sequence,\n        }, exporter.exportCapabilities(this.reactive.state));\n        let placeholder = document.createElement('li');\n        placeholder.setAttribute('data-id', data.id);\n        this.getElement().appendChild(placeholder);\n        const newcomponent = await this.renderComponent(placeholder, 'mod_kanban/column', data);\n        const newelement = newcomponent.getElement();\n        this.getElement().replaceChild(newelement, placeholder);\n    }\n\n    _addColumn() {\n        this.reactive.dispatch('addColumn', 0);\n    }\n\n    /**\n     * Validate draggable data.\n     * @param {object} dropdata\n     * @returns {boolean} if the data is valid for this drop-zone.\n     */\n    validateDropData(dropdata) {\n        let type = dropdata?.type;\n        return type == 'column';\n    }\n\n    /**\n     * Executed when a valid dropdata is dropped over the drop-zone.\n     * @param {object} dropdata\n     */\n    drop(dropdata) {\n        this.reactive.dispatch('moveColumn', dropdata.id, 0);\n    }\n\n    /**\n     * Optional method to show some visual hints to the user.\n     */\n    showDropZone() {\n        this.getElement(selectors.ADDCOLUMNCONTAINER).classList.add('mod_kanban_insert');\n    }\n\n    /**\n     * Optional method to remove visual hints to the user.\n     */\n    hideDropZone() {\n        this.getElement(selectors.ADDCOLUMNCONTAINER).classList.remove('mod_kanban_insert');\n    }\n}"],"names":["BaseComponent","target","this","element","document","getElementById","create","cmid","dataset","id","getWatchers","watch","handler","_boardUpdated","_createColumn","addEventListener","getElement","selectors","ADDCOLUMNFIRST","_addColumn","dragdrop","DragDrop","_continuousUpdate","setTimeout","reactive","dispatch","destroy","undefined","unregister","el","sequence","split","children","forEach","node","classList","contains","includes","removeChild","sort","a","b","indexOf","appendChild","data","Object","assign","title","options","exporter","exportCapabilities","state","placeholder","createElement","setAttribute","newelement","renderComponent","replaceChild","validateDropData","dropdata","type","drop","showDropZone","ADDCOLUMNCONTAINER","add","hideDropZone","remove"],"mappings":"yaAM6BA,oCACbC,eAED,IAAIC,KAAK,CACZC,QAFUC,SAASC,eAAeJ,UAM1CK,cACSC,KAAOL,KAAKC,QAAQK,QAAQD,UAC5BE,GAAKP,KAAKC,QAAQK,QAAQC,GAGnCC,oBACW,CACH,CAACC,sBAAwBC,QAASV,KAAKW,eACvC,CAACF,wBAA0BC,QAASV,KAAKY,wCAKxCC,iBACDb,KAAKc,WAAWC,mBAAUC,gBAC1B,QACAhB,KAAKiB,iBAEJC,SAAW,IAAIC,mBAASnB,WACxBoB,oBAGTA,oBACIC,YAAW,UACFC,SAASC,SAAS,mBAClBH,sBACN,KAMPI,eAC0BC,IAAlBzB,KAAKkB,eACAA,SAASQ,aAItBf,wBAAcV,QAACA,oBACL0B,GAAK3B,KAAKc,iBACZc,SAAW3B,QAAQ2B,SAASC,MAAM,SAClCF,GAAGG,UACNC,SAASC,OACFA,KAAKC,UAAUC,SAAS,uBAAyBN,SAASO,SAASH,KAAK1B,QAAQC,KAChFoB,GAAGS,YAAYJ,aAGnBL,GAAGG,UACNO,MAAK,CAACC,EAAGC,IAAIX,SAASY,QAAQF,EAAEhC,QAAQC,IAAMqB,SAASY,QAAQD,EAAEjC,QAAQC,IAAM,GAAK,IACpFwB,SAAQC,MAAML,GAAGc,YAAYT,uCAGd/B,QAACA,eACbyC,KAAOC,OAAOC,OAAO,CACrBrC,GAAIN,QAAQM,GACZsC,MAAO5C,QAAQ4C,MACfC,QAAS7C,QAAQ6C,QACjBlB,SAAU3B,QAAQ2B,UACnBmB,kBAASC,mBAAmBhD,KAAKsB,SAAS2B,QACzCC,YAAchD,SAASiD,cAAc,MACzCD,YAAYE,aAAa,UAAWV,KAAKnC,SACpCO,aAAa2B,YAAYS,mBAExBG,kBADqBrD,KAAKsD,gBAAgBJ,YAAa,oBAAqBR,OAClD5B,kBAC3BA,aAAayC,aAAaF,WAAYH,aAG/CjC,kBACSK,SAASC,SAAS,YAAa,GAQxCiC,iBAAiBC,gBAEE,WADJA,MAAAA,gBAAAA,SAAUC,MAQzBC,KAAKF,eACInC,SAASC,SAAS,aAAckC,SAASlD,GAAI,GAMtDqD,oBACS9C,WAAWC,mBAAU8C,oBAAoB5B,UAAU6B,IAAI,qBAMhEC,oBACSjD,WAAWC,mBAAU8C,oBAAoB5B,UAAU+B,OAAO"}